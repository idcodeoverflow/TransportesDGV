/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.CargoEspecialDTO;
import beans.CargoOperadorDTO;
import beans.CargoUnidadDTO;
import beans.EntradaAlmacenDTO;
import beans.FacturaDTO;
import beans.ProveedorCreditoDTO;
import beans.ProveedorDTO;
import beans.SalidaAlmacenDTO;
import beans.TrabajoExternoDTO;
import beans.UsuarioDTO;
import bussines.LazyQueryBO;
import data.CargoEspecialDAO;
import data.CargoOperadorDAO;
import data.CargoUnidadDAO;
import data.EntradaAlmacenDAO;
import data.FacturaDAO;
import data.ProveedorCreditoDAO;
import data.ProveedorDAO;
import data.SalidaAlmacenDAO;
import data.TrabajoExternoDAO;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;

/**
 *
 * @author David Israel
 */
public class ControlFacturasProveedor extends javax.swing.JFrame {

    private FacturaDTO factura;
    private EntradaAlmacenDTO entradaAlmacen;
    private TrabajoExternoDTO trabajoEspecial;
    private CargoEspecialDTO cargoEspecial;
    private CargoOperadorDTO cargoOperador;
    private CargoUnidadDTO cargoUnidad;
    private double subtotal;
    private double iva;
    private double total;
    private boolean agregar;
    
    /**
     * Creates new form ControlFacturasProveedor
     */
    public ControlFacturasProveedor() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.mostrarValores();
            this.obtenerFacturas();
            this.jTFacturas.setSelectionMode(0);
            this.jTConceptosFactura.setSelectionMode(0);
            this.estadoBotonesInicio();
            this.iva = 0.0;
            this.subtotal = 0.0;
            this.total = 0.0;
            this.agregar = false;
            if(UserHome.getUsuario().getPrivilegio() == 1){
                this.jMMovimientosExtemporaneos.setEnabled(true);
            } else {
                this.jMMovimientosExtemporaneos.setEnabled(false);                
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 815\n" + ex.getMessage(),
                "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlFacturasProveedor()", 815, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }
    
    public FacturaDTO getFactura(){
        return this.factura;
    }
    
    public void setFactura(FacturaDTO factura){
        this.factura = factura;
    }
    
    public void mostrarValores(){
        try{
            this.jTFUsuario.setText(UserHome.getUsuario().getNombre() + " " + UserHome.getUsuario().getApellidos());
            this.jTFPorcentajeIVA.setText("16.00");
            this.jTFSubtotal.setText("0.00");
            this.jTFIVA.setText("0.00");
            this.jTFTotal.setText("0.00");
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 816\n" + ex.getMessage(),
                    "Error al mostrar los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlFacturasProveedor mostrarValores()", 816, UserHome.getUsuario(), ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLIdProveedor = new javax.swing.JLabel();
        jTFIdProveedor = new javax.swing.JTextField();
        jLFolio = new javax.swing.JLabel();
        jTFFolioFactura = new javax.swing.JTextField();
        jLFechaRegistro = new javax.swing.JLabel();
        jTFFechaRegistro = new javax.swing.JTextField();
        jLFechaPago = new javax.swing.JLabel();
        jTFFechaPago = new javax.swing.JTextField();
        jLSubtotal = new javax.swing.JLabel();
        jTFSubtotal = new javax.swing.JTextField();
        jLPorcentajeIVA = new javax.swing.JLabel();
        jTFPorcentajeIVA = new javax.swing.JTextField();
        jLIVA = new javax.swing.JLabel();
        jTFIVA = new javax.swing.JTextField();
        jTFTotal = new javax.swing.JTextField();
        jLTotal = new javax.swing.JLabel();
        jLUsuario = new javax.swing.JLabel();
        jTFUsuario = new javax.swing.JTextField();
        jBCancelar = new javax.swing.JButton();
        jBModificar = new javax.swing.JButton();
        jBAgregar = new javax.swing.JButton();
        jBFinalizar = new javax.swing.JButton();
        jPFacturas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTFacturas = new javax.swing.JTable();
        jBPagar = new javax.swing.JButton();
        jPConceptosFactura = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTConceptosFactura = new javax.swing.JTable();
        jBEliminar = new javax.swing.JButton();
        jBCargoDirecto = new javax.swing.JButton();
        jBTrabajoExterno = new javax.swing.JButton();
        jBEntradaAlmacen = new javax.swing.JButton();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAgregar = new javax.swing.JMenuItem();
        jMIFinalizar = new javax.swing.JMenuItem();
        jMIPagar = new javax.swing.JMenuItem();
        jMIModificar = new javax.swing.JMenuItem();
        jMICancelar = new javax.swing.JMenuItem();
        jMConceptosFactura = new javax.swing.JMenu();
        jMIEntradaAlmacen = new javax.swing.JMenuItem();
        jMITrabajoExterno = new javax.swing.JMenuItem();
        jMICargoDirecto = new javax.swing.JMenuItem();
        jMIEliminarConcepto = new javax.swing.JMenuItem();
        jMMovimientosExtemporaneos = new javax.swing.JMenu();
        jMICargosDirectosExtemporaneos = new javax.swing.JMenuItem();
        jMITrabajosExternosExtemporaneos = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMIBuscar = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Facturas Proveedores - Sistema de Administración Mantenimiento");
        setAlwaysOnTop(true);

        jLIdProveedor.setText("ID de Proveedor:");

        jLFolio.setText("Folio:");

        jLFechaRegistro.setText("Fecha de Registro:");

        jTFFechaRegistro.setEditable(false);
        jTFFechaRegistro.setFocusable(false);

        jLFechaPago.setText("Fecha de Pago:");

        jTFFechaPago.setEditable(false);
        jTFFechaPago.setFocusable(false);

        jLSubtotal.setText("Subtotal:");

        jTFSubtotal.setEditable(false);
        jTFSubtotal.setFocusable(false);
        jTFSubtotal.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTFSubtotalCaretUpdate(evt);
            }
        });
        jTFSubtotal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFSubtotalFocusLost(evt);
            }
        });

        jLPorcentajeIVA.setText("% IVA:");

        jTFPorcentajeIVA.setEditable(false);
        jTFPorcentajeIVA.setFocusable(false);
        jTFPorcentajeIVA.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTFPorcentajeIVACaretUpdate(evt);
            }
        });
        jTFPorcentajeIVA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFPorcentajeIVAFocusLost(evt);
            }
        });

        jLIVA.setText("IVA:");

        jTFIVA.setEditable(false);
        jTFIVA.setFocusable(false);
        jTFIVA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFIVAFocusLost(evt);
            }
        });

        jTFTotal.setEditable(false);
        jTFTotal.setFocusable(false);

        jLTotal.setText("Total:");

        jLUsuario.setText("Usuario:");

        jTFUsuario.setEditable(false);
        jTFUsuario.setFocusable(false);

        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jBAgregar.setText("Agregar");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });

        jBFinalizar.setText("Finalizar");
        jBFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFinalizarActionPerformed(evt);
            }
        });

        jPFacturas.setBorder(javax.swing.BorderFactory.createTitledBorder("Facturas"));

        jTFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Folio", "Fecha de Registro", "Fecha de Pago", "ID Proveedor", "Nombre Proveedor", "Monto", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTFacturas.getTableHeader().setReorderingAllowed(false);
        jTFacturas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTFacturasMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTFacturas);
        if (jTFacturas.getColumnModel().getColumnCount() > 0) {
            jTFacturas.getColumnModel().getColumn(0).setMinWidth(120);
            jTFacturas.getColumnModel().getColumn(0).setPreferredWidth(120);
            jTFacturas.getColumnModel().getColumn(0).setMaxWidth(120);
            jTFacturas.getColumnModel().getColumn(1).setMinWidth(180);
            jTFacturas.getColumnModel().getColumn(1).setPreferredWidth(180);
            jTFacturas.getColumnModel().getColumn(1).setMaxWidth(180);
            jTFacturas.getColumnModel().getColumn(2).setMinWidth(180);
            jTFacturas.getColumnModel().getColumn(2).setPreferredWidth(180);
            jTFacturas.getColumnModel().getColumn(2).setMaxWidth(180);
            jTFacturas.getColumnModel().getColumn(3).setMinWidth(120);
            jTFacturas.getColumnModel().getColumn(3).setPreferredWidth(120);
            jTFacturas.getColumnModel().getColumn(3).setMaxWidth(120);
            jTFacturas.getColumnModel().getColumn(5).setMinWidth(120);
            jTFacturas.getColumnModel().getColumn(5).setPreferredWidth(120);
            jTFacturas.getColumnModel().getColumn(5).setMaxWidth(120);
            jTFacturas.getColumnModel().getColumn(6).setMinWidth(120);
            jTFacturas.getColumnModel().getColumn(6).setPreferredWidth(120);
            jTFacturas.getColumnModel().getColumn(6).setMaxWidth(120);
        }

        javax.swing.GroupLayout jPFacturasLayout = new javax.swing.GroupLayout(jPFacturas);
        jPFacturas.setLayout(jPFacturasLayout);
        jPFacturasLayout.setHorizontalGroup(
            jPFacturasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPFacturasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1355, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPFacturasLayout.setVerticalGroup(
            jPFacturasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPFacturasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addContainerGap())
        );

        jBPagar.setText("Pagar");
        jBPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPagarActionPerformed(evt);
            }
        });

        jPConceptosFactura.setBorder(javax.swing.BorderFactory.createTitledBorder("Conceptos por Factura"));

        jTConceptosFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "# Parte", "Nombre", "Cantidad", "Precio", "Subtotal", "IVA", "Total", "Tipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTConceptosFactura.getTableHeader().setReorderingAllowed(false);
        jTConceptosFactura.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTConceptosFacturaMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTConceptosFactura);
        if (jTConceptosFactura.getColumnModel().getColumnCount() > 0) {
            jTConceptosFactura.getColumnModel().getColumn(0).setMinWidth(50);
            jTConceptosFactura.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTConceptosFactura.getColumnModel().getColumn(0).setMaxWidth(50);
            jTConceptosFactura.getColumnModel().getColumn(1).setMinWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(1).setPreferredWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(1).setMaxWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(3).setMinWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(3).setPreferredWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(3).setMaxWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(4).setMinWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(4).setPreferredWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(4).setMaxWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(5).setMinWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(5).setPreferredWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(5).setMaxWidth(70);
            jTConceptosFactura.getColumnModel().getColumn(6).setMinWidth(65);
            jTConceptosFactura.getColumnModel().getColumn(6).setPreferredWidth(65);
            jTConceptosFactura.getColumnModel().getColumn(6).setMaxWidth(65);
            jTConceptosFactura.getColumnModel().getColumn(7).setMinWidth(80);
            jTConceptosFactura.getColumnModel().getColumn(7).setPreferredWidth(80);
            jTConceptosFactura.getColumnModel().getColumn(7).setMaxWidth(80);
            jTConceptosFactura.getColumnModel().getColumn(8).setMinWidth(80);
            jTConceptosFactura.getColumnModel().getColumn(8).setPreferredWidth(80);
            jTConceptosFactura.getColumnModel().getColumn(8).setMaxWidth(80);
        }

        jBEliminar.setText("Elminar");
        jBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarActionPerformed(evt);
            }
        });

        jBCargoDirecto.setText("Cargo Directo");
        jBCargoDirecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCargoDirectoActionPerformed(evt);
            }
        });

        jBTrabajoExterno.setText("Trabajo Externo");
        jBTrabajoExterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTrabajoExternoActionPerformed(evt);
            }
        });

        jBEntradaAlmacen.setText("Entrada de Almacén");
        jBEntradaAlmacen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEntradaAlmacenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPConceptosFacturaLayout = new javax.swing.GroupLayout(jPConceptosFactura);
        jPConceptosFactura.setLayout(jPConceptosFacturaLayout);
        jPConceptosFacturaLayout.setHorizontalGroup(
            jPConceptosFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPConceptosFacturaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPConceptosFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPConceptosFacturaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBEntradaAlmacen)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBTrabajoExterno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBCargoDirecto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBEliminar)))
                .addContainerGap())
        );

        jPConceptosFacturaLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBCargoDirecto, jBEliminar, jBEntradaAlmacen, jBTrabajoExterno});

        jPConceptosFacturaLayout.setVerticalGroup(
            jPConceptosFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPConceptosFacturaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPConceptosFacturaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBEliminar)
                    .addComponent(jBCargoDirecto)
                    .addComponent(jBTrabajoExterno)
                    .addComponent(jBEntradaAlmacen))
                .addContainerGap())
        );

        jMArchivo.setText("Archivo");

        jMIAgregar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIAgregar.setText("Agregar");
        jMIAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregar);

        jMIFinalizar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMIFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIFinalizar.setText("Finalizar");
        jMIFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIFinalizarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIFinalizar);

        jMIPagar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMIPagar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Money-16.png"))); // NOI18N
        jMIPagar.setText("Pagar");
        jMIPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIPagarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIPagar);

        jMIModificar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMIModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Modify-16.png"))); // NOI18N
        jMIModificar.setText("Modificar");
        jMIModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIModificarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIModificar);

        jMICancelar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMICancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Trash-16.png"))); // NOI18N
        jMICancelar.setText("Cancelar");
        jMICancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICancelarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMICancelar);

        jMConceptosFactura.setText("Conceptos");

        jMIEntradaAlmacen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMIEntradaAlmacen.setText("Entrada de Almacén");
        jMIEntradaAlmacen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIEntradaAlmacenActionPerformed(evt);
            }
        });
        jMConceptosFactura.add(jMIEntradaAlmacen);

        jMITrabajoExterno.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMITrabajoExterno.setText("Trabajo Externo");
        jMITrabajoExterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMITrabajoExternoActionPerformed(evt);
            }
        });
        jMConceptosFactura.add(jMITrabajoExterno);

        jMICargoDirecto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_MASK));
        jMICargoDirecto.setText("Cargo Directo");
        jMICargoDirecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICargoDirectoActionPerformed(evt);
            }
        });
        jMConceptosFactura.add(jMICargoDirecto);

        jMIEliminarConcepto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_J, java.awt.event.InputEvent.CTRL_MASK));
        jMIEliminarConcepto.setText("Eliminar Concepto");
        jMIEliminarConcepto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIEliminarConceptoActionPerformed(evt);
            }
        });
        jMConceptosFactura.add(jMIEliminarConcepto);

        jMArchivo.add(jMConceptosFactura);

        jMMovimientosExtemporaneos.setText("Movimientos extemporáneos");

        jMICargosDirectosExtemporaneos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMICargosDirectosExtemporaneos.setText("Cargos Directos Extemporáneos");
        jMICargosDirectosExtemporaneos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICargosDirectosExtemporaneosActionPerformed(evt);
            }
        });
        jMMovimientosExtemporaneos.add(jMICargosDirectosExtemporaneos);

        jMITrabajosExternosExtemporaneos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jMITrabajosExternosExtemporaneos.setText("Trabajos Externos Extemporáneos");
        jMITrabajosExternosExtemporaneos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMITrabajosExternosExtemporaneosActionPerformed(evt);
            }
        });
        jMMovimientosExtemporaneos.add(jMITrabajosExternosExtemporaneos);

        jMArchivo.add(jMMovimientosExtemporaneos);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMIBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMIBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Search-16.png"))); // NOI18N
        jMIBuscar.setText("Buscar");
        jMIBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIBuscarActionPerformed(evt);
            }
        });
        jMEditar.add(jMIBuscar);

        jMBMenu.add(jMEditar);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBPagar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBFinalizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBCancelar))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLUsuario)
                                    .addComponent(jLIVA)
                                    .addComponent(jLSubtotal)
                                    .addComponent(jLFechaRegistro)
                                    .addComponent(jLIdProveedor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFFechaRegistro)
                                    .addComponent(jTFSubtotal)
                                    .addComponent(jTFIVA)
                                    .addComponent(jTFIdProveedor)
                                    .addComponent(jTFUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLFolio)
                                    .addComponent(jLFechaPago)
                                    .addComponent(jLPorcentajeIVA)
                                    .addComponent(jLTotal))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                                    .addComponent(jTFFolioFactura)
                                    .addComponent(jTFFechaPago)
                                    .addComponent(jTFPorcentajeIVA))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPConceptosFactura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPFacturas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAgregar, jBCancelar, jBFinalizar, jBModificar, jBPagar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLUsuario)
                            .addComponent(jTFUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLIdProveedor)
                            .addComponent(jTFIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLFolio)
                            .addComponent(jTFFolioFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLFechaRegistro)
                            .addComponent(jTFFechaRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLFechaPago)
                            .addComponent(jTFFechaPago, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLSubtotal)
                            .addComponent(jTFSubtotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLPorcentajeIVA)
                            .addComponent(jTFPorcentajeIVA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLIVA)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jTFIVA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTFTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLTotal)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBCancelar)
                            .addComponent(jBModificar)
                            .addComponent(jBAgregar)
                            .addComponent(jBFinalizar)
                            .addComponent(jBPagar)))
                    .addComponent(jPConceptosFactura, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPFacturas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarActionPerformed
        this.agregarFacturaCredito();
    }//GEN-LAST:event_jMIAgregarActionPerformed

    private void jMIFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIFinalizarActionPerformed
        this.modificarFactura();
    }//GEN-LAST:event_jMIFinalizarActionPerformed

    private void jMIPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIPagarActionPerformed
        this.pagarFactura(true);
        this.limpiar();
    }//GEN-LAST:event_jMIPagarActionPerformed

    private void jMIModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIModificarActionPerformed
        this.accionModificar();
    }//GEN-LAST:event_jMIModificarActionPerformed

    private void jMICancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICancelarActionPerformed
        this.cancelarFactura();
    }//GEN-LAST:event_jMICancelarActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIBuscarActionPerformed
        this.buscar();
    }//GEN-LAST:event_jMIBuscarActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        this.cancelarFactura();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        this.accionModificar();
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jBPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPagarActionPerformed
        this.pagarFactura(true);
        this.limpiar();
    }//GEN-LAST:event_jBPagarActionPerformed

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        this.agregarFacturaCredito();
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void jBFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFinalizarActionPerformed
        this.modificarFactura();
    }//GEN-LAST:event_jBFinalizarActionPerformed

    private void jTFacturasMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFacturasMouseReleased
        this.obtenerFactura();
        this.obtenerDetallesFactura();
    }//GEN-LAST:event_jTFacturasMouseReleased

    private void jBEntradaAlmacenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEntradaAlmacenActionPerformed
        this.agregarEntradaAlmacen();
    }//GEN-LAST:event_jBEntradaAlmacenActionPerformed

    private void jBTrabajoExternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTrabajoExternoActionPerformed
        this.agregarTrabajoExterno();
    }//GEN-LAST:event_jBTrabajoExternoActionPerformed

    private void jBCargoDirectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCargoDirectoActionPerformed
        this.agregarCargoDirecto();
    }//GEN-LAST:event_jBCargoDirectoActionPerformed

    private void jBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarActionPerformed
        this.eliminarDetalleFactura();
    }//GEN-LAST:event_jBEliminarActionPerformed

    private void jMIEntradaAlmacenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIEntradaAlmacenActionPerformed
        this.agregarEntradaAlmacen();
    }//GEN-LAST:event_jMIEntradaAlmacenActionPerformed

    private void jMITrabajoExternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMITrabajoExternoActionPerformed
        this.agregarTrabajoExterno();
    }//GEN-LAST:event_jMITrabajoExternoActionPerformed

    private void jMICargoDirectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICargoDirectoActionPerformed
        this.agregarCargoDirecto();
    }//GEN-LAST:event_jMICargoDirectoActionPerformed

    private void jMIEliminarConceptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIEliminarConceptoActionPerformed
        this.eliminarDetalleFactura();
    }//GEN-LAST:event_jMIEliminarConceptoActionPerformed

    private void jTFSubtotalCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTFSubtotalCaretUpdate
        if(this.jTFTotal != null && !"".equals(this.jTFIVA.getText()) && 
                !"".equals(this.jTFSubtotal.getText()) && 
                !"".equals(this.jTFPorcentajeIVA.getText())){
            try{
                DecimalFormat formatoDecimal = new DecimalFormat("0.00");
                double ivaT = (double)(Double.parseDouble(this.jTFSubtotal.getText()) * 
                        Double.parseDouble(this.jTFPorcentajeIVA.getText()) / 100.0);
                this.jTFIVA.setText(formatoDecimal.format(ivaT));
                
                double totalT = (double)(Double.parseDouble(this.jTFSubtotal.getText()) + 
                        Double.parseDouble(this.jTFIVA.getText()));
                this.jTFTotal.setText(formatoDecimal.format(totalT));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Numero Error: 817\n" + ex.getMessage()
                        + "\nError al intentar calcular el total.\nVerifique que los datos"
                        + " ingresados\nson correctos.", "Error!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog("ControlFacturasProveedor jTFSubtotalCaretUpdate()", 817, UserHome.getUsuario(), ex);
            }
        } else {
            try{
                if("".equals(this.jTFSubtotal.getText())){
                    this.jTFIVA.setText("0.00");
                    this.jTFTotal.setText("0.00");
                }
                if("".equals(this.jTFIVA.getText())){
                    this.jTFTotal.setText(this.jTFSubtotal.getText());
                }
                if("".equals(this.jTFPorcentajeIVA.getText())){
                    this.jTFIVA.setText("0.00");
                    this.jTFTotal.setText(this.jTFSubtotal.getText());
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Numero Error: 818\n" + ex.getMessage()
                        + "\nError al intentar calcular el total.\nVerifique que los datos"
                        + " ingresados\nson correctos.", "Error!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog("ControlFacturasProveedor jTFSubtotalCaretUpdate()", 818, UserHome.getUsuario(), ex);
            }
        }
    }//GEN-LAST:event_jTFSubtotalCaretUpdate

    private void jTFPorcentajeIVACaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTFPorcentajeIVACaretUpdate
        if(this.jTFTotal != null && !"".equals(this.jTFIVA.getText()) && 
                !"".equals(this.jTFSubtotal.getText()) && 
                !"".equals(this.jTFPorcentajeIVA.getText())){
            try{
                DecimalFormat formatoDecimal = new DecimalFormat("0.00");
                double ivaT = (double)(Double.parseDouble(this.jTFSubtotal.getText()) * 
                        Double.parseDouble(this.jTFPorcentajeIVA.getText()) / 100.0);
                double totalT = (double)(Double.parseDouble(this.jTFSubtotal.getText()) + 
                        Double.parseDouble(this.jTFIVA.getText()));
                
                this.jTFIVA.setText(formatoDecimal.format(ivaT));
                this.jTFTotal.setText(formatoDecimal.format(totalT));
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Numero Error: 819\n" + ex.getMessage()
                        + "\nError al intentar calcular el total.\nVerifique que los datos"
                        + " ingresados\nson correctos.", "Error!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog("ControlFacturasProveedor jTFPorcentajeIVACaretUpdate()", 819, UserHome.getUsuario(), ex);
            }
        } else {
            if("".equals(this.jTFSubtotal.getText())){
                this.jTFIVA.setText("0.00");
                this.jTFTotal.setText("0.00");
            }
            if("".equals(this.jTFIVA.getText())){
                this.jTFTotal.setText(this.jTFSubtotal.getText());
            }
            if("".equals(this.jTFPorcentajeIVA.getText())){
                this.jTFIVA.setText("0.00");
                this.jTFTotal.setText(this.jTFSubtotal.getText());
            }
        }
    }//GEN-LAST:event_jTFPorcentajeIVACaretUpdate

    private void jTFSubtotalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFSubtotalFocusLost
        this.onFormatErrorSetValue(this.jTFSubtotal, 0.00);
    }//GEN-LAST:event_jTFSubtotalFocusLost

    private void jTFPorcentajeIVAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFPorcentajeIVAFocusLost
        this.onFormatErrorSetValue(this.jTFPorcentajeIVA, 16.00);
    }//GEN-LAST:event_jTFPorcentajeIVAFocusLost

    private void jTFIVAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFIVAFocusLost
        this.onFormatErrorSetValue(this.jTFIVA, 0.00);
    }//GEN-LAST:event_jTFIVAFocusLost

    private void jTConceptosFacturaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTConceptosFacturaMouseReleased
        this.obtenerDetalleFactura();
    }//GEN-LAST:event_jTConceptosFacturaMouseReleased

    private void jMICargosDirectosExtemporaneosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICargosDirectosExtemporaneosActionPerformed
        //verificar que el usuario tenga los privilegios para ejecutar la acción
        if(UserHome.getUsuario().getPrivilegio() != 1){
            JOptionPane.showMessageDialog(null, "El usuario activo no posee los privilegios\n"
                    + "necesarios para ejecutar la acción.", "Privilegios insuficientes", JOptionPane.ERROR_MESSAGE);
            return;
        }
        SeleccionarCargoDirectoExtemporaneo se = new SeleccionarCargoDirectoExtemporaneo();
        se.setLocationRelativeTo(null);
        se.setControlFacturas(this);
        se.setVisible(true);
    }//GEN-LAST:event_jMICargosDirectosExtemporaneosActionPerformed

    private void jMITrabajosExternosExtemporaneosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMITrabajosExternosExtemporaneosActionPerformed
        //verificar que el usuario tenga los privilegios para ejecutar la acción
        if(UserHome.getUsuario().getPrivilegio() != 1){
            JOptionPane.showMessageDialog(null, "El usuario activo no posee los privilegios\n"
                    + "necesarios para ejecutar la acción.", "Privilegios insuficientes", JOptionPane.ERROR_MESSAGE);
            return;
        }
        TrabajoExternoExtemporaneo te = new TrabajoExternoExtemporaneo();
        te.setLocationRelativeTo(null);
        te.mostrarValores();
        te.setControlFacturas(this);
        te.setVisible(true);
    }//GEN-LAST:event_jMITrabajosExternosExtemporaneosActionPerformed

    private void agregarFacturaCredito(){
        try{
            this.agregar = true;
            this.factura = new FacturaDTO();
            FacturaDAO acceso = new FacturaDAO();
            ProveedorDTO proveedor = new ProveedorDTO();
            ProveedorDAO accesoProveedor = new ProveedorDAO();
        
            proveedor = accesoProveedor.obtenerProveedor(Integer.parseInt(this.jTFIdProveedor.getText()), true, true);

            if(!proveedor.isStatus()){
                JOptionPane.showMessageDialog(null, "El proveedor ingresado está dado de baja o no\n"
                        + "ha sido dado de alta en la base de datos.", "Advertencia!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            factura.setFolio(this.jTFFolioFactura.getText());
            factura.setIva(Double.parseDouble(this.jTFIVA.getText()));
            factura.setPagada(false);
            factura.setProveedor(proveedor);
            factura.setStatus(true);
            factura.setSubtotal(Double.parseDouble(this.jTFSubtotal.getText()));
            factura.setTotal(Double.parseDouble(this.jTFTotal.getText()));
            factura.setUsuario(UserHome.getUsuario());

            acceso.agregarFacturaCredito(factura);
            this.estadoBotonesAgregar();
            this.actualizarTablas();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 820\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(factura.toString(), 820, UserHome.getUsuario(), ex);
            this.estadoBotonesInicio();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 821\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(factura.toString(), 821, UserHome.getUsuario(), ex);
            this.estadoBotonesInicio();
        }
    }
    
    private void modificarFactura(){
        try{
            ProveedorCreditoDAO accesoCredito = new ProveedorCreditoDAO();
            ProveedorCreditoDTO proveedorCredito = accesoCredito.obtenerProveedorCredito(factura.getProveedor().getIdProveedor());
            if(this.agregar && proveedorCredito == null){
                JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                        + "solicitada, el proveedor indicado\nno cuenta con crédito.",
                    "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            this.factura = new FacturaDTO();
            FacturaDAO acceso = new FacturaDAO();
            ProveedorDTO proveedor = new ProveedorDTO();
            ProveedorDAO accesoProveedor = new ProveedorDAO();
        
            proveedor = accesoProveedor.obtenerProveedor(Integer.parseInt(this.jTFIdProveedor.getText()), true, true);

            factura = acceso.obtenerFactura(this.jTFFolioFactura.getText(), 
                    Integer.parseInt(this.jTFIdProveedor.getText()), true, true, true);
            
            factura.setFolio(factura.getFolio());
            factura.setIva(Double.parseDouble(this.jTFIVA.getText()));
            factura.setPagada(factura.isPagada());
            factura.setProveedor(factura.getProveedor());
            factura.setStatus(factura.isStatus());
            factura.setSubtotal(Double.parseDouble(this.jTFSubtotal.getText()));
            factura.setTotal(Double.parseDouble(this.jTFTotal.getText()));
            factura.setUsuario(factura.getUsuario());

            acceso.modificarFactura(factura);
            this.estadoBotonesInicio();
            this.actualizarTablas();
            
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 822\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(factura.toString(), 822, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 823\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(factura.toString(), 823, UserHome.getUsuario(), ex);
        }
        this.agregar = false;
        this.limpiar();
    }
    
    private void pagarFactura(boolean guardarCambios){
        try{
            
            this.factura = new FacturaDTO();
            FacturaDAO acceso = new FacturaDAO();
            ProveedorDTO proveedor = new ProveedorDTO();
            ProveedorDAO accesoProveedor = new ProveedorDAO();
        
            proveedor = accesoProveedor.obtenerProveedorIncCancelado(Integer.parseInt(this.jTFIdProveedor.getText()), true, true);

            factura = acceso.obtenerFactura(this.jTFFolioFactura.getText(), 
                    Integer.parseInt(this.jTFIdProveedor.getText()), true, true, true);
            
            factura.setFolio(factura.getFolio());
            factura.setIva(factura.getIva());
            factura.setPagada(true);
            factura.setProveedor(factura.getProveedor());
            factura.setStatus(factura.isStatus());
            factura.setSubtotal(factura.getSubtotal());
            factura.setTotal(factura.getTotal());
            factura.setUsuario(factura.getUsuario());
            
            if(guardarCambios){
                String folioF = ((this.jTFFolioFactura != null && !"".equals(this.jTFFolioFactura.getText())) ? this.jTFFolioFactura.getText() : "");
                double ivaF = Double.parseDouble(((this.jTFIVA != null && !"".equals(this.jTFIVA.getText())) ? this.jTFIVA.getText() : "0.00"));
                boolean pagadaF = true;
                ProveedorDTO proveedorF = this.factura.getProveedor();
                boolean statusF = this.factura.isStatus();
                double subtotalF = Double.parseDouble(((this.jTFSubtotal != null && !"".equals(this.jTFSubtotal.getText())) ? this.jTFSubtotal.getText() : "0.00"));
                double totalF = Double.parseDouble(((this.jTFTotal != null && !"".equals(this.jTFTotal.getText())) ? this.jTFTotal.getText() : "0.00"));
                UsuarioDTO usuarioF = this.factura.getUsuario();
                this.factura.setFolio(folioF);
                this.factura.setIva(ivaF);
                this.factura.setPagada(pagadaF);
                this.factura.setProveedor(proveedorF);
                this.factura.setStatus(statusF);
                this.factura.setSubtotal(subtotalF);
                this.factura.setTotal(totalF);
                this.factura.setUsuario(usuarioF);
                acceso.modificarFactura(factura);
            }
            acceso.pagarFactura(factura);
            this.estadoBotonesInicio();
            this.actualizarTablas();
            
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 824\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(factura.toString(), 824, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 825\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(factura.toString(), 825, UserHome.getUsuario(), ex);
        }
        this.agregar = false;
    }
    
    private void cancelarFactura(){
        try{
            this.factura = new FacturaDTO();
            FacturaDAO acceso = new FacturaDAO();
            ProveedorDTO proveedor = new ProveedorDTO();
            ProveedorDAO accesoProveedor = new ProveedorDAO();
            proveedor = accesoProveedor.obtenerProveedorIncCancelado(Integer.parseInt(this.jTFIdProveedor.getText()), true, true);
            
            
            factura = acceso.obtenerFactura(this.jTFFolioFactura.getText(), 
                    Integer.parseInt(this.jTFIdProveedor.getText()), true, true, true);
            
            
            factura.setFolio(factura.getFolio());
            factura.setIva(factura.getIva());
            factura.setPagada(true);
            factura.setProveedor(factura.getProveedor());
            factura.setStatus(factura.isStatus());
            factura.setSubtotal(factura.getSubtotal());
            factura.setTotal(factura.getTotal());
            factura.setUsuario(factura.getUsuario());

            //verificar que los elementos de la factura no tengan problemas al eliminarse
            int rowNumberTable = this.jTConceptosFactura.getRowCount();
            for(int tableIndex = 0; tableIndex < rowNumberTable; tableIndex++){
                try {
                    String tipo = this.jTConceptosFactura.getValueAt(tableIndex, 8).toString();
                    switch (tipo) {
                        case "E. Almacén":
                            SalidaAlmacenDTO ultimaSalidaAlmacen = new SalidaAlmacenDTO();
                            SalidaAlmacenDAO accesoSalidaAlmacen = new SalidaAlmacenDAO();
                            EntradaAlmacenDTO tempEntradaAlmacen = new EntradaAlmacenDTO();
                            EntradaAlmacenDAO accesoEntradaAlmacen = new EntradaAlmacenDAO();
                            int idEntrada = Integer.parseInt(this.jTConceptosFactura.getValueAt(tableIndex, 0).toString());
                            tempEntradaAlmacen = accesoEntradaAlmacen.obtenerEntradaAlmacen(idEntrada, true);
                            int idUltimaSalidaAlmacen = accesoSalidaAlmacen.obtenerUltimoNSalidaAlmacenPRefaccion(tempEntradaAlmacen.getRefaccion(), true, false);
                            ultimaSalidaAlmacen = accesoSalidaAlmacen.obtenerSalidaAlmacen(idUltimaSalidaAlmacen, true, false, true);
                            if(tempEntradaAlmacen.getFechaRegistro().before(ultimaSalidaAlmacen.getFechaRegistro()) && ultimaSalidaAlmacen.isStatus()){
                                JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                                    + "solicitada, ya existen salidas de\nalmacén de esta parte después de\nde la fecha de registro de\nentrada de almacén.",
                                    "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                                return;
                            }
                            break;
                        case "T. Externo":
                            TrabajoExternoDTO tempTrabajoExterno = new TrabajoExternoDTO();
                            TrabajoExternoDAO accesoTrabajoExterno = new TrabajoExternoDAO();
                            int idTrabajoExterno = Integer.parseInt(this.jTConceptosFactura.getValueAt(tableIndex, 0).toString());
                            tempTrabajoExterno = accesoTrabajoExterno.obtenerTrabajoExterno(idTrabajoExterno, true);
                            if(tempTrabajoExterno.getOrdenReparacion().getFechaSalida() != null){
                                JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                                    + "solicitada, la orden de\nreparación asociada a esta\nTrabajo Externo se ha finalizado.",
                                    "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                                return;
                            }
                            break;
                        case "C. Especial":
                            CargoEspecialDTO tempCargoEspecial = new CargoEspecialDTO();
                            CargoEspecialDAO accesoCargoEspecial = new CargoEspecialDAO();
                            int idCargoEspecial = Integer.parseInt(this.jTConceptosFactura.getValueAt(tableIndex, 0).toString());
                            tempCargoEspecial = accesoCargoEspecial.obtenerCargoEspecial(idCargoEspecial);
                            if(tempCargoEspecial.getOrdenReparacion().getFechaSalida() != null){
                                JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                                    + "solicitada, la orden de\nreparación asociada a este\nCargo Especial se ha finalizado.",
                                    "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                                return;
                            }
                            break;
                        case "C. Operador":
                            CargoOperadorDTO tempCargoOperador = new CargoOperadorDTO();
                            CargoOperadorDAO accesoCargoOperador = new CargoOperadorDAO();
                            int idCargoOperador = Integer.parseInt(this.jTConceptosFactura.getValueAt(tableIndex, 0).toString());
                            tempCargoOperador = accesoCargoOperador.obtenerCargoOperador(idCargoOperador);
                            if(tempCargoOperador.getOrdenReparacion().getFechaSalida() != null){
                                JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                                    + "solicitada, la orden de\nreparación asociada a este\nCargo a Operador se ha finalizado.",
                                    "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                                return;
                            }
                            break;
                        case "C. Unidad":
                            CargoUnidadDTO tempCargoUnidad = new CargoUnidadDTO();
                            CargoUnidadDAO accesoCargoUnidad = new CargoUnidadDAO();
                            int idCargoUnidad = Integer.parseInt(this.jTConceptosFactura.getValueAt(tableIndex, 0).toString());
                            tempCargoUnidad = accesoCargoUnidad.obtenerCargoUnidad(idCargoUnidad);
                            if(tempCargoUnidad.getOrdenReparacion().getFechaSalida() != null){
                                JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                                    + "solicitada, la orden de\nreparación asociada a este\nCargo a Unidad de Transporte\nse ha finalizado.",
                                    "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                                return;
                            }
                            break;
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 826\n" + ex.getMessage()
                        + "\nError al acceder los datos de la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                    ErrorLogger.scribirLog("ControlFacturasProveedor mostrarValores()", 826, UserHome.getUsuario(), ex);
                } catch (Exception ex) {
                   JOptionPane.showMessageDialog(null, "Código error: 827\n" + ex.getMessage()
                        + "\nError al intentar mostrar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE);  
                   ErrorLogger.scribirLog("ControlFacturasProveedor mostrarValores()", 827, UserHome.getUsuario(), ex);
                }
            }
            
            //eliminar cada detalle de la factura
            for(int tableIndex = 0; tableIndex < rowNumberTable; tableIndex++){
                try {
                    String tipo = this.jTConceptosFactura.getValueAt(tableIndex, 8).toString();
                    switch (tipo) {
                        case "E. Almacén":
                            EntradaAlmacenDAO accesoEntradas = new EntradaAlmacenDAO();
                            EntradaAlmacenDTO tempEntradaAlmacen = new EntradaAlmacenDTO();
                            int idEntradaAlmacen = Integer.parseInt(this.jTConceptosFactura.getValueAt(tableIndex, 0).toString());
                            
                            tempEntradaAlmacen = accesoEntradas.obtenerEntradaAlmacen(idEntradaAlmacen, false);
                            accesoEntradas.eliminarEntradaAlmacen(tempEntradaAlmacen);
                            break;
                        case "T. Externo":
                            TrabajoExternoDAO accesoTrabajos = new TrabajoExternoDAO();
                            TrabajoExternoDTO tempTrabajoExterno = new TrabajoExternoDTO();
                            int idTrabajoExterno = Integer.parseInt(this.jTConceptosFactura.getValueAt(tableIndex, 0).toString());
                            
                            tempTrabajoExterno = accesoTrabajos.obtenerTrabajoExterno(idTrabajoExterno, false);
                            accesoTrabajos.eliminarTrabajoExterno(tempTrabajoExterno);
                            break;
                        case "C. Especial":
                            CargoEspecialDAO accesoCEspecial = new CargoEspecialDAO();
                            CargoEspecialDTO tempCargoEspecial = new CargoEspecialDTO();
                            int idCargoEspecial = Integer.parseInt(this.jTConceptosFactura.getValueAt(tableIndex, 0).toString());
                            
                            tempCargoEspecial = accesoCEspecial.obtenerCargoEspecial(idCargoEspecial);
                            accesoCEspecial.eliminarCargoEspecial(tempCargoEspecial);
                            break;
                        case "C. Operador":
                            CargoOperadorDAO accesoCOperador = new CargoOperadorDAO();
                            CargoOperadorDTO tempCargoOperador = new CargoOperadorDTO();
                            int idCargoOperador = Integer.parseInt(this.jTConceptosFactura.getValueAt(tableIndex, 0).toString());
                            
                            tempCargoOperador = accesoCOperador.obtenerCargoOperador(idCargoOperador);
                            accesoCOperador.eliminarCargoOperador(tempCargoOperador);
                            break;
                        case "C. Unidad":
                            CargoUnidadDAO accesoCUnidad = new CargoUnidadDAO();
                            CargoUnidadDTO tempCargoUnidad = new CargoUnidadDTO();
                            int idCargoUnidad = Integer.parseInt(this.jTConceptosFactura.getValueAt(tableIndex, 0).toString());
                            
                            tempCargoUnidad = accesoCUnidad.obtenerCargoUnidad(idCargoUnidad);
                            accesoCUnidad.eliminarCargoUnidad(tempCargoUnidad);
                            break;
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 828\n" + ex.getMessage()
                        + "\nError al acceder los datos de la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                    ErrorLogger.scribirLog(factura.toString(), 828, UserHome.getUsuario(), ex);
                    
                } catch (Exception ex) {
                   JOptionPane.showMessageDialog(null, "Código error: 829\n" + ex.getMessage()
                        + "\nError al intentar mostrar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE);
                   ErrorLogger.scribirLog(factura.toString(), 829, UserHome.getUsuario(), ex);
                }
            }
            
            acceso.eliminarFactura(factura);
            this.limpiar();
            this.estadoBotonesInicio();
            this.actualizarTablas();
            
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 830\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(factura.toString(), 830, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 831\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(factura.toString(), 831, UserHome.getUsuario(), ex);
        }
    }
    
    private void agregarPagarFactura(){
        try{
            this.factura = new FacturaDTO();
            FacturaDAO acceso = new FacturaDAO();
            ProveedorDTO proveedor = new ProveedorDTO();
            ProveedorDAO accesoProveedor = new ProveedorDAO();
        
            proveedor = accesoProveedor.obtenerProveedor(Integer.parseInt(this.jTFIdProveedor.getText()), true, true);

            if(!proveedor.isStatus()){
                JOptionPane.showMessageDialog(null, "El proveedor ingresado está dado de baja o no\n"
                        + "ha sido dado de alta en la base de datos.", "Advertencia!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            factura.setFolio(this.jTFFolioFactura.getText());
            factura.setIva(Double.parseDouble(this.jTFIVA.getText()));
            factura.setPagada(true);
            factura.setProveedor(proveedor);
            factura.setStatus(true);
            factura.setSubtotal(Double.parseDouble(this.jTFSubtotal.getText()));
            factura.setTotal(Double.parseDouble(this.jTFTotal.getText()));
            factura.setUsuario(UserHome.getUsuario());

            acceso.agregarFacturaContado(factura);
            //no manipula el estado de los botones
            this.actualizarTablas();
            
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 832\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(factura.toString(), 832, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 833\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(factura.toString(), 833, UserHome.getUsuario(), ex);
        }
    }
    
    private void agregarEntradaAlmacen(){
        EntradaAlmacen entrada = new EntradaAlmacen();
        try{
            entrada.setFactura(this.factura);
            entrada.setControlFacturas(this);
            entrada.mostrarDatos();
            entrada.setVisible(true);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 834\n" + ex.getMessage()
                    + "\nError al ejecutar la acción.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(entrada.toString(), 834, UserHome.getUsuario(), ex);
        }
    }
    
    private void agregarTrabajoExterno(){
        TrabajoExterno trabajo = new TrabajoExterno();
        try{
            trabajo.setFactura(factura);
            trabajo.setControlFacturas(this);
            trabajo.mostrarValores();
            trabajo.setVisible(true);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 835\n" + ex.getMessage()
                    + "\nError al ejecutar la acción.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(trabajo.toString(), 835, UserHome.getUsuario(), ex);
        }
    }

    private void agregarCargoDirecto(){
        SeleccionarCargoDirecto seleccionar = new SeleccionarCargoDirecto();
        try{
            seleccionar.setFactura(factura);
            seleccionar.setControlFacturas(this);
            seleccionar.setVisible(true);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 836\n" + ex.getMessage()
                    + "\nError al ejecutar la acción.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(seleccionar.toString(), 836, UserHome.getUsuario(), ex);
        }
    }
    
    private void eliminarDetalleFactura(){
        int index = this.jTConceptosFactura.getSelectedRow();
        String tipo = null;
        int key = 0;
        String detalleError = "";
        
        if(index > -1){
            try {
                tipo = this.jTConceptosFactura.getValueAt(index, 8).toString();
                switch (tipo) {
                    case "E. Almacén":
                        SalidaAlmacenDTO ultimaSalidaAlmacen = new SalidaAlmacenDTO();
                        SalidaAlmacenDAO accesoSalidaAlmacen = new SalidaAlmacenDAO();
                        EntradaAlmacenDAO accesoEntradas = new EntradaAlmacenDAO();
                        int idUltimaSalidaAlmacen = accesoSalidaAlmacen.obtenerUltimoNSalidaAlmacenPRefaccion(this.entradaAlmacen.getRefaccion(), true, false);
                        ultimaSalidaAlmacen = accesoSalidaAlmacen.obtenerSalidaAlmacen(idUltimaSalidaAlmacen, true, false, true);
                        
                        if(ultimaSalidaAlmacen != null && (this.entradaAlmacen.getFechaRegistro().before(ultimaSalidaAlmacen.getFechaRegistro()) && ultimaSalidaAlmacen.isStatus())){
                            JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                                + "solicitada, ya existen salidas de\nalmacén de esta parte después de\nde la fecha de registro de\nentrada de almacén.",
                                "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        detalleError = entradaAlmacen.toString();
                        accesoEntradas.eliminarEntradaAlmacen(this.entradaAlmacen);
                        break;
                    case "T. Externo":
                        TrabajoExternoDAO accesoTrabajos = new TrabajoExternoDAO();
                        if(this.trabajoEspecial.getOrdenReparacion().getFechaSalida() != null){
                            JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                                + "solicitada, la orden de\nreparación asociada a esta\nTrabajo Externo se ha finalizado.",
                                "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        detalleError = trabajoEspecial.toString();
                        accesoTrabajos.eliminarTrabajoExterno(this.trabajoEspecial);
                        break;
                    case "C. Especial":
                        CargoEspecialDAO accesoCEspecial = new CargoEspecialDAO();
                        if(this.cargoEspecial.getOrdenReparacion().getFechaSalida() != null){
                            JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                                + "solicitada, la orden de\nreparación asociada a este\nCargo Especial se ha finalizado.",
                                "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        detalleError = cargoEspecial.toString();
                        accesoCEspecial.eliminarCargoEspecial(this.cargoEspecial);
                        break;
                    case "C. Operador":
                        CargoOperadorDAO accesoCOperador = new CargoOperadorDAO();
                        if(this.cargoOperador.getOrdenReparacion().getFechaSalida() != null){
                            JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                                + "solicitada, la orden de\nreparación asociada a este\nCargo a Operador se ha finalizado.",
                                "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        detalleError = cargoOperador.toString();
                        accesoCOperador.eliminarCargoOperador(this.cargoOperador);
                        break;
                    case "C. Unidad":
                        CargoUnidadDAO accesoCUnidad = new CargoUnidadDAO();
                        if(this.cargoUnidad.getOrdenReparacion().getFechaSalida() != null){
                            JOptionPane.showMessageDialog(null, "\nNo se puede realizar la operación\n"
                                + "solicitada, la orden de\nreparación asociada a este\nCargo a Unidad de Transporte\nse ha finalizado.",
                                "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                        detalleError = cargoUnidad.toString();
                        accesoCUnidad.eliminarCargoUnidad(this.cargoUnidad);
                        break;
                }
                this.actualizarTablas();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 837\n" + ex.getMessage()
                    + "\nError al acceder los datos de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(detalleError, 837, UserHome.getUsuario(), ex);
            } catch (Exception ex) {
               JOptionPane.showMessageDialog(null, "Código error: 838\n" + ex.getMessage()
                    + "\nError al intentar mostrar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);  
               ErrorLogger.scribirLog(detalleError, 838, UserHome.getUsuario(), ex);
            }
        }
    }
    
    public void limpiar(){
        try{
            this.jTFFechaPago.setText(null);
            this.jTFFechaRegistro.setText(null);
            this.jTFFolioFactura.setText(null);
            this.jTFIVA.setText(null);
            this.jTFIdProveedor.setText(null);
            this.jTFPorcentajeIVA.setText(null);
            this.jTFSubtotal.setText(null);
            this.jTFTotal.setText(null);
            this.jTFUsuario.setText(null);

            //Variables de Apoyo para manipulacion de detalles factura
            this.cargoEspecial = null;
            this.cargoOperador = null;
            this.cargoUnidad = null;
            this.entradaAlmacen = null;
            this.trabajoEspecial = null;
            this.factura = null; //esta variable se iguala a nulo para limpiar detalles de factura
            //Terminan variables de Apoyo

            this.mostrarValores();
            /* Segmento removido ya que se efectua en la actulizacion de tablas
            DefaultTableModel modelo = (DefaultTableModel) this.jTConceptosFactura.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }

            DefaultTableModel modelo2 = (DefaultTableModel) this.jTFacturas.getModel();
            while(modelo2.getRowCount() > 0){
                modelo2.removeRow(modelo2.getRowCount() - 1);
            }
            */
            this.actualizarTablas();
            this.estadoBotonesInicio();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 839\n" + ex.getMessage()
                    + "\nError al limpiar los datos",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlFacturasProveedor limpiar()", 839, UserHome.getUsuario(), ex);
        }
    }

    public void actualizarTablas(){
        try{
        /*
          Segmento removido ya que se efectua en la actulizacion de conceptos de facturas
        DefaultTableModel modelo = (DefaultTableModel) this.jTConceptosFactura.getModel();
        while(modelo.getRowCount() > 0){
            modelo.removeRow(modelo.getRowCount() - 1);
        }
         Segmento removido ya que se efectua en la actulizacion de facturas
        DefaultTableModel modelo2 = (DefaultTableModel) this.jTFacturas.getModel();
        while(modelo2.getRowCount() > 0){
            modelo2.removeRow(modelo2.getRowCount() - 1);
        }
        */
        this.obtenerFacturas();
        this.obtenerDetallesFactura();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 840\n" + ex.getMessage()
                    + "\nError al actualizar las tablas.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlFacturasProveedor actualizarTablas()", 840, UserHome.getUsuario(), ex);
        }
    }
    
    public void obtenerFacturas(){
        try {
            DefaultTableModel modelo = (DefaultTableModel) this.jTFacturas.getModel();
            List<FacturaDTO> facturas = null;
            DecimalFormat formatD = new DecimalFormat("0.00");
            int limite = 200;
                facturas = new FacturaDAO().obtenerFacturas(true);
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            for(FacturaDTO facturaP : facturas){
                Object datos[] = {facturaP.getFolio(), facturaP.getFechaRegistro(), facturaP.getFechaPago(),
                facturaP.getProveedor().getIdProveedor(), facturaP.getProveedor().getNombre(),
                formatD.format(facturaP.getTotal()), ((facturaP.isStatus()) ? "Vigente" : "Cancelada")};
                modelo.addRow(datos);
                if(limite-- <= 0){
                    break;
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 841\n" + ex.getMessage()
                + "\nError al acceder los datos de la BD.",
                "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlFacturasProveedor obtenerFacturas()", 841, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
           JOptionPane.showMessageDialog(null, "Código error: 842\n" + ex.getMessage()
                + "\nError al intentar mostrar los datos.",
                "Error!!!", JOptionPane.ERROR_MESSAGE);  
           ErrorLogger.scribirLog("ControlFacturasProveedor obtenerFacturas()", 842, UserHome.getUsuario(), ex);
        }
    }
    
    public void obtenerFactura(){
      
        int index = this.jTFacturas.getSelectedRow();
        String idProveedor = null;
        String folio = null;
        DecimalFormat formatoD = new DecimalFormat("0.00");
        
        if(index >= 0 && this.jTFacturas.isEnabled()){
            try {
                
                idProveedor = ((this.jTFacturas.getValueAt(index, 3) != null) ? this.jTFacturas.getValueAt(index, 3).toString() : "");
                folio = ((this.jTFacturas.getValueAt(index, 0) != null) ? this.jTFacturas.getValueAt(index, 0).toString() : "");
                
                this.factura = new FacturaDAO().obtenerFactura(folio, Integer.parseInt(idProveedor), true, true, true);
                this.jTFFechaPago.setText(((factura.getFechaPago() != null) ? factura.getFechaPago().toString() : ""));
                this.jTFFechaRegistro.setText(factura.getFechaRegistro().toString());
                this.jTFFolioFactura.setText(factura.getFolio());
                this.jTFIVA.setText(Double.toString(factura.getIva()));
                this.jTFIdProveedor.setText(Integer.toString(factura.getProveedor().getIdProveedor()));
                this.jTFPorcentajeIVA.setText("16.00");
                this.jTFSubtotal.setText(Double.toString(factura.getSubtotal()));
                this.jTFTotal.setText(Double.toString(factura.getTotal()));
                this.jTFUsuario.setText(factura.getUsuario().getNombre() + " " + factura.getUsuario().getApellidos());
                
                this.estadoBotonesClicFactura();
                
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 843\n" + ex.getMessage()
                    + "\nError al acceder los datos de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog("ControlFacturasProveedor obtenerFactura()", 843, UserHome.getUsuario(), ex);
            } catch (Exception ex) {
               JOptionPane.showMessageDialog(null, "Código error: 844\n" + ex.getMessage()
                    + "\nError al intentar mostrar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);  
               ErrorLogger.scribirLog("ControlFacturasProveedor obtenerFactura()", 844, UserHome.getUsuario(), ex);
            }
        }
        if(this.jTFacturas.isEnabled()){
            this.jBEliminar.setEnabled(false);
        }
    }
    
    public void obtenerDetallesFactura(){
        DecimalFormat formatD = new DecimalFormat("0.00");
        LazyQueryBO lazyQ = new LazyQueryBO();
        
        //Variables de Apoyo para manipulacion de detalles factura
        this.cargoEspecial = null;
        this.cargoOperador = null;
        this.cargoUnidad = null;
        this.entradaAlmacen = null;
        this.trabajoEspecial = null;
        //Terminan variables de Apoyo
        
        //Entradas Almacen
        
        DefaultTableModel modelo = (DefaultTableModel) this.jTConceptosFactura.getModel();
        List<EntradaAlmacenDTO> entradas = null;
        while(modelo.getRowCount() > 0){
            modelo.removeRow(modelo.getRowCount() - 1);
        }
        if(this.factura != null){
            lazyQ.startLazyQuery();
            try {
                entradas = new EntradaAlmacenDAO().obtenerEntradasAlmacenPFactura(factura, true, false, false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 845\n" + ex.getMessage(),
                        "Error al acceder a los detalles de la factura!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog("ControlFacturasProveedor obtenerFactura()", 845, UserHome.getUsuario(), ex);
            }
            
            for(EntradaAlmacenDTO entrada : entradas){
                Object datos[] = {entrada.getNumeroEntrada(), entrada.getRefaccion().getClaveRefaccion(),
                                    entrada.getRefaccion().getNombre(), entrada.getCantidad(), 
                                    formatD.format(entrada.getPrecioUnitario()),
                                    formatD.format(entrada.getSubtotal()), formatD.format(entrada.getIva()), 
                                    formatD.format(entrada.getMonto()), "E. Almacén"};
                modelo.addRow(datos);
            }

            //Trabajos Externos

            List<TrabajoExternoDTO> trabajos = null;
            try {
                trabajos = new TrabajoExternoDAO().obtenerTrabajosExternosPFactura(factura, true, false, false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 846\n" + ex.getMessage(),
                        "Error al acceder a los detalles de la factura!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog("ControlFacturasProveedor obtenerDetallesFactura()", 846, UserHome.getUsuario(), ex);
            }

            for(TrabajoExternoDTO trabajo : trabajos){
                Object datos[] = {trabajo.getNumeroTrabajoExterno(), "N/A",
                                    trabajo.getDescripcion(), trabajo.getCantidad(), 
                                    formatD.format(trabajo.getPrecioUnitario()),
                                    formatD.format(trabajo.getSubtotal()), formatD.format(trabajo.getIva()), 
                                    formatD.format(trabajo.getMonto()), "T. Externo"};
                modelo.addRow(datos);
            }

            

            //Cargos Especiales

            List<CargoEspecialDTO> cargosEspecial = null;
            try {
                cargosEspecial = new CargoEspecialDAO().obtenerCargosEspecialesPFactura(factura, false, false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 848\n" + ex.getMessage(),
                        "Error al acceder a los detalles de la factura!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog("ControlFacturasProveedor obtenerDetallesFactura()", 848, UserHome.getUsuario(), ex);
            }

            for(CargoEspecialDTO cargoEspecial : cargosEspecial){
                Object datos[] = {cargoEspecial.getIdCargoEspecial(), cargoEspecial.getRefaccion().getClaveRefaccion(),
                                    cargoEspecial.getRefaccion().getNombre(), cargoEspecial.getCantidad(), 
                                    formatD.format(cargoEspecial.getPrecioUnitario()),
                                    formatD.format(cargoEspecial.getSubtotal()), formatD.format(cargoEspecial.getIva()), 
                                    formatD.format(cargoEspecial.getTotal()), "C. Especial"};
                modelo.addRow(datos);
            }

            //Cargos Operadores

            List<CargoOperadorDTO> cargosOperador = null;
            try {
                cargosOperador = new CargoOperadorDAO().obtenerCargosOperadoresPFactura(factura, false, false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 849\n" + ex.getMessage(),
                        "Error al acceder a los detalles de la factura!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog("ControlFacturasProveedor mostrarValores()", 849, UserHome.getUsuario(), ex);
            }

            for(CargoOperadorDTO cargoOperador : cargosOperador){
                Object datos[] = {cargoOperador.getIdCargoOperador(), cargoOperador.getRefaccion().getClaveRefaccion(),
                                    cargoOperador.getRefaccion().getNombre(), cargoOperador.getCantidad(), 
                                    formatD.format(cargoOperador.getPrecioUnitario()),
                                    formatD.format(cargoOperador.getSubtotal()), formatD.format(cargoOperador.getIva()), 
                                    formatD.format(cargoOperador.getTotal()), "C. Operador"};
                modelo.addRow(datos);
            }

            //Cargos Unidades

            List<CargoUnidadDTO> cargosUnidad = null;
            try {
                cargosUnidad = new CargoUnidadDAO().obtenerCargosUnidadesPFactura(factura, false, false);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 850\n" + ex.getMessage(),
                        "Error al acceder a los detalles de la factura!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog("ControlFacturasProveedor obtenerDetallesFactura()", 850, UserHome.getUsuario(), ex);
            }

            for(CargoUnidadDTO cargoUnidad : cargosUnidad){
                Object datos[] = {cargoUnidad.getIdCargoUnidad(), cargoUnidad.getRefaccion().getClaveRefaccion(),
                                    cargoUnidad.getRefaccion().getNombre(), cargoUnidad.getCantidad(), 
                                    formatD.format(cargoUnidad.getPrecioUnitario()),
                                    formatD.format(cargoUnidad.getSubtotal()), formatD.format(cargoUnidad.getIva()), 
                                    formatD.format(cargoUnidad.getTotal()), "C. Unidad"};
                modelo.addRow(datos);
            }
            lazyQ.endLazyQuery();
        }
        this.actualizarCamposTotalFactura();
    }
    
    public void obtenerDetalleFactura(){
        int index = this.jTConceptosFactura.getSelectedRow();
        String tipo = null;
        int key = 0;
        
        if(index > -1){
            try {
                tipo = this.jTConceptosFactura.getValueAt(index, 8).toString();
                switch (tipo) {
                    case "E. Almacén":
                        EntradaAlmacenDAO accesoEntradas = new EntradaAlmacenDAO();
                        key = Integer.parseInt(this.jTConceptosFactura.getValueAt(index, 0).toString());
                        this.entradaAlmacen = accesoEntradas.obtenerEntradaAlmacen(key, true);
                        break;
                    case "T. Externo":
                        TrabajoExternoDAO accesoTrabajos = new TrabajoExternoDAO();
                        key = Integer.parseInt(this.jTConceptosFactura.getValueAt(index, 0).toString());
                        this.trabajoEspecial = accesoTrabajos.obtenerTrabajoExterno(key, true);
                        break;
                    case "C. Especial":
                        CargoEspecialDAO accesoCEspecial = new CargoEspecialDAO();
                        key = Integer.parseInt(this.jTConceptosFactura.getValueAt(index, 0).toString());
                        this.cargoEspecial = accesoCEspecial.obtenerCargoEspecial(key);
                        break;
                    case "C. Operador":
                        CargoOperadorDAO accesoCOperador = new CargoOperadorDAO();
                        key = Integer.parseInt(this.jTConceptosFactura.getValueAt(index, 0).toString());
                        this.cargoOperador = accesoCOperador.obtenerCargoOperador(key);
                        break;
                    case "C. Unidad":
                        CargoUnidadDAO accesoCUnidad = new CargoUnidadDAO();
                        key = Integer.parseInt(this.jTConceptosFactura.getValueAt(index, 0).toString());
                        this.cargoUnidad = accesoCUnidad.obtenerCargoUnidad(key);
                        break;
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 851\n" + ex.getMessage()
                    + "\nError al acceder los datos de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog("ControlFacturasProveedor obtenerDetalleFactura()", 851, UserHome.getUsuario(), ex);
            } catch (Exception ex) {
               JOptionPane.showMessageDialog(null, "Código error: 852\n" + ex.getMessage()
                    + "\nError al intentar mostrar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);  
               ErrorLogger.scribirLog("ControlFacturasProveedor obtenerDetalleFactura()", 852, UserHome.getUsuario(), ex);
            }
        }
    }
    
    private void onFormatErrorSetValue(javax.swing.JTextField campo, double value){
        DecimalFormat formatD  = new DecimalFormat("0.00");
        try{
            double n = Double.parseDouble(campo.getText());
            campo.setText(formatD.format(n));
        } catch (Exception ex) {
            campo.setText(formatD.format(value));
        }
    }
    
    private void onFormatErrorSetValue(javax.swing.JTextField campo, int value){
        try{
            int n = (int)(Double.parseDouble(campo.getText()));
            campo.setText(Integer.toString(n));
        } catch (Exception ex) {
            campo.setText(Integer.toString(value));
        }
    }
    
    private void estadoBotonesInicio(){
        try{
            //habilitar/deshabilitar botones
            this.jBAgregar.setEnabled(true);
            this.jBCancelar.setEnabled(false);
            this.jBCargoDirecto.setEnabled(false);
            this.jBEliminar.setEnabled(false);
            this.jBEntradaAlmacen.setEnabled(false);
            this.jBFinalizar.setEnabled(false);
            this.jBModificar.setEnabled(false);
            this.jBPagar.setEnabled(false);
            this.jBTrabajoExterno.setEnabled(false);
            //habilitar/deshabilitar menus
            this.jMIAgregar.setEnabled(true);
            this.jMICancelar.setEnabled(false);
            this.jMICargoDirecto.setEnabled(false);
            this.jMIEliminarConcepto.setEnabled(false);
            this.jMIEntradaAlmacen.setEnabled(false);
            this.jMIFinalizar.setEnabled(false);
            this.jMIModificar.setEnabled(false);
            this.jMIPagar.setEnabled(false);
            this.jMITrabajoExterno.setEnabled(false);
            this.jMILimpiar.setEnabled(true);
            this.jMISalir.setEnabled(true);
            //habilitar tabla facturas
            this.jTFacturas.setEnabled(true);
        } catch (Exception ex) {
           JOptionPane.showMessageDialog(null, "Código error: 853\n" + ex.getMessage(),
                "Error!!!", JOptionPane.ERROR_MESSAGE);  
           ErrorLogger.scribirLog("ControlFacturasProveedor estadoBotonesInicio()", 853, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesAgregar(){
        try{
            //Habilitar/Deshabilitar botones
            this.jBAgregar.setEnabled(false);
            this.jBCancelar.setEnabled(false);
            this.jBCargoDirecto.setEnabled(true);
            this.jBEliminar.setEnabled(true);
            this.jBEntradaAlmacen.setEnabled(true);
            this.jBFinalizar.setEnabled(true);
            this.jBModificar.setEnabled(false);
            this.jBPagar.setEnabled(true);
            this.jBTrabajoExterno.setEnabled(true);
            //Habilitar/Deshabilitar menus
            this.jMIAgregar.setEnabled(false);
            this.jMICancelar.setEnabled(false);
            this.jMICargoDirecto.setEnabled(true);
            this.jMIEliminarConcepto.setEnabled(true);
            this.jMIEntradaAlmacen.setEnabled(true);
            this.jMIFinalizar.setEnabled(true);
            this.jMIModificar.setEnabled(false);
            this.jMIPagar.setEnabled(true);
            this.jMITrabajoExterno.setEnabled(true);
            this.jMILimpiar.setEnabled(false);
            this.jMISalir.setEnabled(false);
            //Deshabilitar tabla facturas
            this.jTFacturas.setEnabled(false);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 854\n" + ex.getMessage(),
                "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlFacturasProveedor estadoBotonesInicio()", 854, UserHome.getUsuario(), ex);
        }
    }
    
    public void estadoBotonesClicFactura(){
        try{
            //Habilitar/Deshabilitar botones
            this.jBAgregar.setEnabled(false);
            this.jBFinalizar.setEnabled(false);
            this.jBCancelar.setEnabled(this.factura.isStatus());
            this.jBPagar.setEnabled(!this.factura.isPagada() && this.factura.isStatus());
            this.jBModificar.setEnabled(factura.isStatus());
            this.jBEntradaAlmacen.setEnabled(false);
            this.jBTrabajoExterno.setEnabled(false);
            this.jBCargoDirecto.setEnabled(false);
            this.jBEliminar.setEnabled(false);
            //Habilitar/Deshabilitar menus
            this.jMIAgregar.setEnabled(false);
            this.jMIFinalizar.setEnabled(false);
            this.jMICancelar.setEnabled(this.factura.isStatus());
            this.jMIPagar.setEnabled(!this.factura.isPagada() && this.factura.isStatus());
            this.jMIModificar.setEnabled(factura.isStatus());
            this.jMIEntradaAlmacen.setEnabled(false);
            this.jMITrabajoExterno.setEnabled(false);
            this.jMICargoDirecto.setEnabled(false);
            this.jMIEliminarConcepto.setEnabled(false);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 855\n" + ex.getMessage(),
                "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlFacturasProveedor estadoBotonesClicFactura()", 855, UserHome.getUsuario(), ex);
        }
    }
    
    public void deshabilitarTodosBotonesMenus(){
        try{
            //Habilitar/Deshabilitar botones
            this.jBAgregar.setEnabled(false);
            this.jBFinalizar.setEnabled(false);
            this.jBCancelar.setEnabled(false);
            this.jBPagar.setEnabled(false);
            this.jBModificar.setEnabled(false);
            this.jBEntradaAlmacen.setEnabled(false);
            this.jBTrabajoExterno.setEnabled(false);
            this.jBCargoDirecto.setEnabled(false);
            //Habilitar/Deshabilitar menus
            this.jMIAgregar.setEnabled(false);
            this.jMIFinalizar.setEnabled(false);
            this.jMICancelar.setEnabled(false);
            this.jMIPagar.setEnabled(false);
            this.jMIModificar.setEnabled(false);
            this.jMIEntradaAlmacen.setEnabled(false);
            this.jMITrabajoExterno.setEnabled(false);
            this.jMICargoDirecto.setEnabled(false);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 856\n" + ex.getMessage(),
                "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlFacturasProveedor deshabilitarTodosBotonesMenus()", 856, UserHome.getUsuario(), ex);
        }
    }
    
    public void accionModificar(){
        try{
            this.estadoBotonesAgregar();
            this.jBPagar.setEnabled(!this.factura.isPagada());
            this.jMIPagar.setEnabled(!this.factura.isPagada());
            this.actualizarTablas();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 857\n" + ex.getMessage(),
                "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlFacturasProveedor accionModificar()", 857, UserHome.getUsuario(), ex);
        }
    }

    public void sumarDetallesFacturas(){
        
        try{
            this.subtotal = 0.0;
            this.iva = 0.0;
            this.total = 0.0;
            int rowCount = this.jTConceptosFactura.getRowCount();

            for(int rowIndex = 0; rowIndex < rowCount; rowIndex++){
                this.subtotal += Double.parseDouble(this.jTConceptosFactura.getValueAt(rowIndex, 5).toString());//obtener subtotal
                this.iva += Double.parseDouble(this.jTConceptosFactura.getValueAt(rowIndex, 6).toString());//obtener iva
                this.total += Double.parseDouble(this.jTConceptosFactura.getValueAt(rowIndex, 7).toString());//obtener total
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 858\n" + ex.getMessage()
                    + "\nError al intentar sumar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);  
            ErrorLogger.scribirLog("ControlFacturasProveedor sumarDetallesFacturas()", 858, UserHome.getUsuario(), ex);
        }
        
    }
    
    public void actualizarCamposTotalFactura(){
        try{
            DecimalFormat formatD = new DecimalFormat("0.00");
            this.sumarDetallesFacturas();
            this.jTFSubtotal.setText(formatD.format(this.subtotal));
            this.jTFIVA.setText(formatD.format(this.iva));
            this.jTFTotal.setText(formatD.format(this.total));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 859\n" + ex.getMessage()
                    + "\nError al intentar mostrar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlFacturasProveedor actualizarCamposTotalFactura()", 859, UserHome.getUsuario(), ex);
        }
    }
    
    public void buscar(){
        try{
            DecimalFormat formatD = new DecimalFormat("0.00");
            FacturaDAO accesoFactura = new FacturaDAO();
            ProveedorDAO accesoProveedor = new ProveedorDAO();
            FacturaDTO facturaBuscar = new FacturaDTO();
            FacturaDTO factura = new FacturaDTO();
            ProveedorDTO proveedor = new ProveedorDTO();
            int idProveedor = Integer.parseInt(this.jTFIdProveedor.getText());
            String folioFactura = this.jTFFolioFactura.getText();

            proveedor = accesoProveedor.obtenerProveedor(idProveedor, true, true);
            facturaBuscar.setFolio(folioFactura);
            facturaBuscar.setProveedor(proveedor);

            factura = accesoFactura.buscarFactura(facturaBuscar, true);
            this.factura = factura;
            
            if(factura != null){
                this.deshabilitarTodosBotonesMenus();
                this.jTFFechaPago.setText(((factura.getFechaPago() != null) ? factura.getFechaPago().toString() : ""));
                this.jTFFechaRegistro.setText(((factura.getFechaRegistro() != null) ? factura.getFechaRegistro().toString() : ""));
                this.jTFFolioFactura.setText(((factura.getFolio() != null) ? factura.getFolio() : ""));
                this.jTFIVA.setText(formatD.format(factura.getIva()));
                this.jTFIdProveedor.setText(Integer.toString(factura.getProveedor().getIdProveedor()));
                this.jTFPorcentajeIVA.setText("16.00");
                this.jTFSubtotal.setText(formatD.format(factura.getSubtotal()));
                this.jTFTotal.setText(formatD.format(factura.getTotal()));
                this.jTFUsuario.setText(((factura.getUsuario() != null && factura.getUsuario().getNombre() != null) ? 
                        factura.getUsuario().getNombre() : "") + " " + ((factura.getUsuario() != null && 
                        factura.getUsuario().getApellidos() != null) ? factura.getUsuario().getApellidos() : ""));
                this.obtenerDetallesFactura();
            } else {
                JOptionPane.showMessageDialog(null, "Los criterios de busqueda\n"
                        + "no devolvieron resultados.", "No se encontraron resultados!!!", 
                        JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 860\n" + ex.getMessage()
                + "\nError al acceder a la BD para buscar los datos.",
                "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlFacturasProveedor buscar()", 860, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
           JOptionPane.showMessageDialog(null, "Código error: 861\n" + ex.getMessage()
                + "\nError al intentar mostrar los datos de la factura buscada.",
                "Error!!!", JOptionPane.ERROR_MESSAGE);  
           ErrorLogger.scribirLog("ControlFacturasProveedor buscar()", 861, UserHome.getUsuario(), ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlFacturasProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlFacturasProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlFacturasProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlFacturasProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlFacturasProveedor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBCargoDirecto;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBEntradaAlmacen;
    private javax.swing.JButton jBFinalizar;
    private javax.swing.JButton jBModificar;
    private javax.swing.JButton jBPagar;
    private javax.swing.JButton jBTrabajoExterno;
    private javax.swing.JLabel jLFechaPago;
    private javax.swing.JLabel jLFechaRegistro;
    private javax.swing.JLabel jLFolio;
    private javax.swing.JLabel jLIVA;
    private javax.swing.JLabel jLIdProveedor;
    private javax.swing.JLabel jLPorcentajeIVA;
    private javax.swing.JLabel jLSubtotal;
    private javax.swing.JLabel jLTotal;
    private javax.swing.JLabel jLUsuario;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMConceptosFactura;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIAgregar;
    private javax.swing.JMenuItem jMIBuscar;
    private javax.swing.JMenuItem jMICancelar;
    private javax.swing.JMenuItem jMICargoDirecto;
    private javax.swing.JMenuItem jMICargosDirectosExtemporaneos;
    private javax.swing.JMenuItem jMIEliminarConcepto;
    private javax.swing.JMenuItem jMIEntradaAlmacen;
    private javax.swing.JMenuItem jMIFinalizar;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMIModificar;
    private javax.swing.JMenuItem jMIPagar;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMITrabajoExterno;
    private javax.swing.JMenuItem jMITrabajosExternosExtemporaneos;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JMenu jMMovimientosExtemporaneos;
    private javax.swing.JPanel jPConceptosFactura;
    private javax.swing.JPanel jPFacturas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTConceptosFactura;
    private javax.swing.JTextField jTFFechaPago;
    private javax.swing.JTextField jTFFechaRegistro;
    private javax.swing.JTextField jTFFolioFactura;
    private javax.swing.JTextField jTFIVA;
    private javax.swing.JTextField jTFIdProveedor;
    private javax.swing.JTextField jTFPorcentajeIVA;
    private javax.swing.JTextField jTFSubtotal;
    private javax.swing.JTextField jTFTotal;
    private javax.swing.JTextField jTFUsuario;
    private javax.swing.JTable jTFacturas;
    // End of variables declaration//GEN-END:variables
}
