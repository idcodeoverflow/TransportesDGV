/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.CargoUnidadDTO;
import beans.OrdenReparacionDTO;
import beans.SalidaUnidadDTO;
import beans.TrabajoExternoDTO;
import beans.TransporteReparacionDTO;
import beans.UnidadTransporteDTO;
import data.CargoUnidadDAO;
import data.OrdenReparacionDAO;
import data.SalidaUnidadDAO;
import data.TrabajoExternoDAO;
import data.TransporteReparacionDAO;
import data.UnidadTransporteDAO;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import logger.ErrorLogger;

/**
 *
 * @author David Israel
 */
public class CambiosOrdenesReparacion extends javax.swing.JFrame {

    private ControlOrdenesReparacion controlOrdenesReparacion;
    
    /**
     * Creates new form CambiosOrdenesReparacion
     */
    public CambiosOrdenesReparacion() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error: 1224, error al construir "
                    + "la interfaz de usuario", "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor CambiosOrdenesReparacion()", 1224, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    public ControlOrdenesReparacion getControlOrdenesReparacion(){
        return this.controlOrdenesReparacion;
    }
    
    public void setControlOrdenesReparacion(ControlOrdenesReparacion controlOrdenesReparacion){
        this.controlOrdenesReparacion = controlOrdenesReparacion;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLNumeroOrdenReparacion = new javax.swing.JLabel();
        jTFNumeroOrdenReparacion = new javax.swing.JTextField();
        jLClaveUnidad = new javax.swing.JLabel();
        jTFClaveUnidad = new javax.swing.JTextField();
        jLTipoMovimiento = new javax.swing.JLabel();
        jCBTipoMovimiento = new javax.swing.JComboBox();
        jBCancelar = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jLKilometraje = new javax.swing.JLabel();
        jTFKilometraje = new javax.swing.JTextField();
        jMBMenu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMIGuardar = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cambiar Orden de Reparación");
        setResizable(false);

        jLNumeroOrdenReparacion.setText("N° Orden de Reparación");

        jLClaveUnidad.setText("Clave de Unidad");

        jLTipoMovimiento.setText("Tipo de Movimiento:");

        jCBTipoMovimiento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Alta", "Baja" }));
        jCBTipoMovimiento.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBTipoMovimientoItemStateChanged(evt);
            }
        });

        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jBGuardar.setText("Guardar");
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jLKilometraje.setText("Kilometraje:");

        jMenu1.setText("Archivo");

        jMIGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIGuardar.setText("Guardar");
        jMIGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(jMIGuardar);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMenu1.add(jMISalir);

        jMBMenu.add(jMenu1);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMBMenu.add(jMEditar);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLTipoMovimiento)
                            .addComponent(jLClaveUnidad)
                            .addComponent(jLNumeroOrdenReparacion)
                            .addComponent(jLKilometraje))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFNumeroOrdenReparacion)
                            .addComponent(jTFClaveUnidad)
                            .addComponent(jCBTipoMovimiento, 0, 159, Short.MAX_VALUE)
                            .addComponent(jTFKilometraje)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(jBCancelar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNumeroOrdenReparacion)
                    .addComponent(jTFNumeroOrdenReparacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLClaveUnidad)
                    .addComponent(jTFClaveUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTipoMovimiento)
                    .addComponent(jCBTipoMovimiento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLKilometraje)
                    .addComponent(jTFKilometraje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBCancelar)
                    .addComponent(jBGuardar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIGuardarActionPerformed
        this.guardar();
    }//GEN-LAST:event_jMIGuardarActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.cancelar();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        this.verManual();
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
        this.guardar();
    }//GEN-LAST:event_jBGuardarActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        this.cancelar();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void jCBTipoMovimientoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBTipoMovimientoItemStateChanged
        if(this.jCBTipoMovimiento.getSelectedIndex() == 1){
            this.jTFKilometraje.setEnabled(false);
        } else {
            this.jTFKilometraje.setEnabled(true);
        }
    }//GEN-LAST:event_jCBTipoMovimientoItemStateChanged

    private void guardar(){
        OrdenReparacionDTO ordenReparacion = null;
        try{
            int tipoOperacion = this.jCBTipoMovimiento.getSelectedIndex();// 0 para altas, 1 para bajas.
            String claveTransporte = ((!"".equals(this.jTFClaveUnidad.getText()) && this.jTFClaveUnidad.getText() != null) ? this.jTFClaveUnidad.getText() : "");
            String numeroOrden = ((!"".equals(this.jTFNumeroOrdenReparacion.getText()) && this.jTFNumeroOrdenReparacion.getText() != null) ? this.jTFNumeroOrdenReparacion.getText() : "");
            String km = ((!"".equals(this.jTFKilometraje.getText()) && this.jTFKilometraje.getText() != null) ? this.jTFKilometraje.getText() : "");
            int numeroOrdenReparacion = Integer.parseInt(numeroOrden);
            int idTipoUnidadExistente = 0;
            int idTipoUnidadAlta = 0;
            int kilometraje = 0;//Integer.parseInt(km);
            TransporteReparacionDTO transporteReparacionAlta = new TransporteReparacionDTO();
            UnidadTransporteDTO unidadTransporte = new UnidadTransporteDTO();
            List<TransporteReparacionDTO> unidadesTransporte = new ArrayList<TransporteReparacionDTO>();
            List<SalidaUnidadDTO> salidasUnidades = new ArrayList<SalidaUnidadDTO>();
            List<CargoUnidadDTO> cargosUnidades = new ArrayList<CargoUnidadDTO>();
            List<TrabajoExternoDTO> trabajosExternos = new ArrayList<TrabajoExternoDTO>();
            ordenReparacion = new OrdenReparacionDTO();
            UnidadTransporteDAO accesoTransporte = new UnidadTransporteDAO();
            OrdenReparacionDAO accesoOrdenReparacion = new OrdenReparacionDAO();
            SalidaUnidadDAO accesoSalidaAlmacenUnidad = new SalidaUnidadDAO();
            CargoUnidadDAO accesoCargoUnidad = new CargoUnidadDAO();
            TrabajoExternoDAO accesoTrabajoExterno = new TrabajoExternoDAO();
            TransporteReparacionDAO accesoTransporteReparacion = new TransporteReparacionDAO();
            
            //verificar que el usuario tenga los privilegios para ejecutar la acción
            if(UserHome.getUsuario().getPrivilegio() != 1){
                JOptionPane.showMessageDialog(null, "El usuario activo no posee los privilegios\n"
                        + "necesarios para ejecutar la acción.", "Privilegios insuficientes", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            switch (tipoOperacion){
                case 0://alta de transporte
                    unidadTransporte = accesoTransporte.obtenerUnidad(claveTransporte, true, true, false);
                    ordenReparacion = accesoOrdenReparacion.obtenerOrdenReparacion(numeroOrdenReparacion, true, false, false);
                    unidadesTransporte = accesoTransporteReparacion.obtenerTransportesPReparacion(ordenReparacion, true, true, false, true);
                    idTipoUnidadAlta = unidadTransporte.getTipoUnidad().getIdTipo();
                    //ver el tipo de transporte a dar de alta
                    //si es plataforma ver que no existe otra plataforma en la orden de reparacion
                    //si es tracto ver que no existe otro tracto en la orden de reparacion
                    for(TransporteReparacionDTO transporte : unidadesTransporte){
                        idTipoUnidadExistente = transporte.getTransporte().getTipoUnidad().getIdTipo();
                        if(idTipoUnidadExistente == idTipoUnidadAlta && idTipoUnidadAlta == 2){
                            JOptionPane.showMessageDialog(null, "Actualmente se encuentra activa\nuna "
                                    + "plana en la orden de\nreparación.", "Ya existe una plana!!!", JOptionPane.WARNING_MESSAGE);
                            return;
                        } else if(idTipoUnidadExistente != 2 && idTipoUnidadAlta != 2) {
                            JOptionPane.showMessageDialog(null, "Actualmente se encuentra activo\nun "
                                    + "tracto o unidad en la orden de\nreparación.", "Ya existe un tracto/unidad!!!", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                    }
                    //validar que el numero de transportes activos no exceda a 2 en la orden de reparacion
                    if(unidadesTransporte.size() >= 2){
                        JOptionPane.showMessageDialog(null, "Se ha alcanzado el límite de 2\n"
                                + "unidades de transporte por orden\nde reparación.", 
                                "No se aceptan mas unidades.", JOptionPane.WARNING_MESSAGE);
                            return;
                    }
                    //validar que el transporte que se va a dar de alta no este dado de baja
                    if(!unidadTransporte.isStatus()){
                        JOptionPane.showMessageDialog(null, "La unidad de transporte que ha ingresado esta dada de baja.", 
                                "El transporte esta dado de baja.", JOptionPane.WARNING_MESSAGE);
                            return;
                    }
                    //validar que la orden de reparacion no este cancelada o finalizada
                    if(!ordenReparacion.isStatus() || ordenReparacion.getFechaSalida() != null){
                        JOptionPane.showMessageDialog(null, "La orden de reparación se encuentra\ncerrada o cancelada.", 
                                "Orden de reparación inválidad.", JOptionPane.WARNING_MESSAGE);
                            return;
                    }
                    //validar que el campo del kilometraje no este vacio
                    if(!"".equals(km)){
                        kilometraje = Integer.parseInt(km);
                    } else {
                        JOptionPane.showMessageDialog(null, "El campo de kilometraje no contiene datos.", 
                                "Faltan datos.", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    //validar que el campo del kilometraje no tenga valores negativos
                    if(kilometraje < 0){
                        JOptionPane.showMessageDialog(null, "El kilometraje no puede contener valores negativos.", 
                                "Datos inválidos.", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                    
                    transporteReparacionAlta.setTransporte(unidadTransporte);
                    transporteReparacionAlta.setKilometraje(kilometraje);
                    transporteReparacionAlta.setStatus(true);
                    transporteReparacionAlta.setOrdenReparacion(ordenReparacion);
                    transporteReparacionAlta.setUsuario(UserHome.getUsuario());
                    accesoTransporteReparacion.agregarTransporteAReparacion(transporteReparacionAlta);
                    
                    break;
                case 1://baja de transporte
                    unidadTransporte = accesoTransporte.obtenerUnidad(claveTransporte, true, true, false);
                    ordenReparacion = accesoOrdenReparacion.obtenerOrdenReparacion(numeroOrdenReparacion, true, false, true);
                    //validar que la orden de reparacion no este finalizada
                    //validar que la orden de reparacion no este cancelada o finalizada
                    //validar que la orden de reparacion no este cancelada
                    if(!ordenReparacion.isStatus() || ordenReparacion.getFechaSalida() != null){
                        JOptionPane.showMessageDialog(null, "La orden de reparación se encuentra\ncerrada o cancelada.", 
                                "Orden de reparación inválidad.", JOptionPane.WARNING_MESSAGE);
                            return;
                    }
                    
                    //validar que no haya salidas de almacen activas a esa unidad
                    salidasUnidades = accesoSalidaAlmacenUnidad.obtenerSalidasUnidadPReparacion(ordenReparacion, true, true, true);
                    for(SalidaUnidadDTO salidaUnidad : salidasUnidades){
                        if(salidaUnidad.getTransporte().getClave().equals(unidadTransporte.getClave())){
                            JOptionPane.showMessageDialog(null, "La unidad de transporte especificada\ntiene salidas de almacén "
                                    + "activas\nen la base de datos no se puede\nrealizar la operación.", 
                                "La unidad tiene salidas de almacén.", JOptionPane.WARNING_MESSAGE);
                            return;
                        } 
                    }
                    
                    //validar que no haya cargos directos activos a esa unidad
                    cargosUnidades = accesoCargoUnidad.obtenerCargosUnidadesPReparacion(ordenReparacion,true, true, true);
                    for(CargoUnidadDTO cargoUnidad : cargosUnidades){
                        if(cargoUnidad.getUnidad().getClave().equals(unidadTransporte.getClave())){
                            JOptionPane.showMessageDialog(null, "La unidad de transporte especificada\ntiene cargos directos "
                                    + "activos\nen la base de datos no se puede\nrealizar la operación.", 
                                "La unidad tiene cargos directos.", JOptionPane.WARNING_MESSAGE);
                            return;
                        } 
                    }
                    
                    //validar que no haya trabajos externos activos a esa unidad
                    trabajosExternos = accesoTrabajoExterno.obtenerTrabajosExternosPReparacion(ordenReparacion, true, true, true);
                    for(TrabajoExternoDTO trabajoExterno : trabajosExternos){
                        if(trabajoExterno.getUnidadTransporte().getClave().equals(unidadTransporte.getClave())){
                            JOptionPane.showMessageDialog(null, "La unidad de transporte especificada\ntiene trabajos externos "
                                    + "activos\nen la base de datos no se puede\nrealizar la operación.", 
                                "La unidad tiene trabajos externos.", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                    }
                    
                    //dar de baja el transporte si se pasaron todas las validaciones exitosamente
                    accesoTransporteReparacion.eliminarUnidadTransporteReparacion(unidadTransporte.getClave(), ordenReparacion.getNumeroOrden(), UserHome.getUsuario(), true, true);
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "La operación seleccionada no esta soportada.", 
                                "Operación no identificada.", JOptionPane.WARNING_MESSAGE);
                   
            }
            this.controlOrdenesReparacion.actualizarTablas();
            this.dispose();
            
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1225\n" + ex.getMessage(),
                            "Error al modificar la orden de reparación, enb la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(ordenReparacion.toString(), 1225, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1226\n" + ex.getMessage(),
                            "Error al modificar la orden de reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(ordenReparacion.toString(), 1226, UserHome.getUsuario(), ex);
        }
    }
    
    private void limpiar(){
        try{
            this.jTFClaveUnidad.setText(null);
            this.jTFNumeroOrdenReparacion.setText(null);
            this.jTFKilometraje.setText(null);
            this.jCBTipoMovimiento.setSelectedIndex(0);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1347\n" + ex.getMessage(),
                            "Error al modificar la orden de reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("CambiosOrdenesReparacion limpiar()", 1347, UserHome.getUsuario(), ex);
        }
    }
    
    private void verManual(){
                
    }
    
    private void cancelar(){
        this.dispose();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CambiosOrdenesReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CambiosOrdenesReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CambiosOrdenesReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CambiosOrdenesReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CambiosOrdenesReparacion().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JComboBox jCBTipoMovimiento;
    private javax.swing.JLabel jLClaveUnidad;
    private javax.swing.JLabel jLKilometraje;
    private javax.swing.JLabel jLNumeroOrdenReparacion;
    private javax.swing.JLabel jLTipoMovimiento;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIGuardar;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JTextField jTFClaveUnidad;
    private javax.swing.JTextField jTFKilometraje;
    private javax.swing.JTextField jTFNumeroOrdenReparacion;
    // End of variables declaration//GEN-END:variables
}
