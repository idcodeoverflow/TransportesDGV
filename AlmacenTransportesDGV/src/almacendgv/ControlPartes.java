/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.FamiliaRefaccionDTO;
import beans.RefaccionDTO;
import bussines.InventaryReport;
import data.FamiliaRefaccionDAO;
import data.LazyQueryDAO;
import data.RefaccionDAO;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import support.DBConnection;

/**
 *
 * @author David Israel
 */
public class ControlPartes extends javax.swing.JFrame {

    /**
     * Creates new form ControlPartes
     */
    public ControlPartes() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.estadoBotonesInicio();
            this.obtenerFamilias();
            this.obtenerRefacciones();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 947\n" + ex.getMessage(),
                    "Error al iniciar ventana de Control de Partes!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlPartes()", 947, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    /**
     * Change the default icon image in the JFrame.
     * 
     * @return an icon for the JFrame.
     */
    @Override
    public Image getIconImage() {
        try{
            Image retValue = Toolkit.getDefaultToolkit().
                    getImage(ClassLoader.getSystemResource("icons/Tools-32.png"));
            return retValue;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 948\n" + ex.getMessage(),
                    "Error al obtener ícono de la ventana!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlPartes getIconImage()", 948, UserHome.getUsuario(), ex);
        }
        return null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jLNumeroParte = new javax.swing.JLabel();
        jTFNumeroParte = new javax.swing.JTextField();
        jTFNombreParte = new javax.swing.JTextField();
        jLGrupo = new javax.swing.JLabel();
        jCBGrupoPartes = new javax.swing.JComboBox<String>();
        jLPuntoReorden = new javax.swing.JLabel();
        jTFPuntoReorden = new javax.swing.JTextField();
        jLMaximo = new javax.swing.JLabel();
        jLMinimo = new javax.swing.JLabel();
        jTFMinimo = new javax.swing.JTextField();
        jBEliminar = new javax.swing.JButton();
        jBAgregar = new javax.swing.JButton();
        jBModificar = new javax.swing.JButton();
        jPCatalogoPartes = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTPartes = new javax.swing.JTable();
        jLNombre = new javax.swing.JLabel();
        jTFMaximo = new javax.swing.JTextField();
        jCBNotificarBajoStock = new javax.swing.JCheckBox();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAgregar = new javax.swing.JMenuItem();
        jMIModificar = new javax.swing.JMenuItem();
        jMIEliminar = new javax.swing.JMenuItem();
        JMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMIBuscarNombre = new javax.swing.JMenuItem();
        jMIBuscarClave = new javax.swing.JMenuItem();
        jMILimpiar = new javax.swing.JMenuItem();
        jMReportes = new javax.swing.JMenu();
        jMICatalogoRefacciones = new javax.swing.JMenuItem();
        jMIReporteInventario = new javax.swing.JMenuItem();
        jMIReportePiezasBajoStock = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Control de Refacciones");
        setIconImage(getIconImage());

        jLNumeroParte.setText("Número de Parte:");

        jLGrupo.setText("Familia de Partes:");

        jLPuntoReorden.setText("Punto de Reorden:");

        jLMaximo.setText("Máximo:");

        jLMinimo.setText("Mínimo:");

        jBEliminar.setText("Eliminar");
        jBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarActionPerformed(evt);
            }
        });

        jBAgregar.setText("Agregar");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });

        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jPCatalogoPartes.setBorder(javax.swing.BorderFactory.createTitledBorder("Catálogo de Partes"));

        jTPartes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N° Parte", "Nombre", "Grupo", "Familia", "Punto Reorden", "Mín.", "Max."
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTPartes.getTableHeader().setReorderingAllowed(false);
        jTPartes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTPartesMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTPartes);
        if (jTPartes.getColumnModel().getColumnCount() > 0) {
            jTPartes.getColumnModel().getColumn(0).setMinWidth(120);
            jTPartes.getColumnModel().getColumn(0).setPreferredWidth(120);
            jTPartes.getColumnModel().getColumn(0).setMaxWidth(120);
            jTPartes.getColumnModel().getColumn(4).setMinWidth(100);
            jTPartes.getColumnModel().getColumn(4).setPreferredWidth(100);
            jTPartes.getColumnModel().getColumn(4).setMaxWidth(100);
            jTPartes.getColumnModel().getColumn(5).setMinWidth(80);
            jTPartes.getColumnModel().getColumn(5).setPreferredWidth(80);
            jTPartes.getColumnModel().getColumn(5).setMaxWidth(80);
            jTPartes.getColumnModel().getColumn(6).setMinWidth(80);
            jTPartes.getColumnModel().getColumn(6).setPreferredWidth(80);
            jTPartes.getColumnModel().getColumn(6).setMaxWidth(80);
        }

        javax.swing.GroupLayout jPCatalogoPartesLayout = new javax.swing.GroupLayout(jPCatalogoPartes);
        jPCatalogoPartes.setLayout(jPCatalogoPartesLayout);
        jPCatalogoPartesLayout.setHorizontalGroup(
            jPCatalogoPartesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCatalogoPartesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 792, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPCatalogoPartesLayout.setVerticalGroup(
            jPCatalogoPartesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCatalogoPartesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLNombre.setText("Nombre:");

        jCBNotificarBajoStock.setSelected(true);
        jCBNotificarBajoStock.setText("Notificar Bajo Stock");

        jMArchivo.setText("Archivo");

        jMIAgregar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIAgregar.setText("Agregar");
        jMIAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregar);

        jMIModificar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMIModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Modify-16.png"))); // NOI18N
        jMIModificar.setText("Modificar");
        jMIModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIModificarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIModificar);

        jMIEliminar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMIEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Trash-16.png"))); // NOI18N
        jMIEliminar.setText("Eliminar");
        jMIEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIEliminarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIEliminar);

        JMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        JMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        JMISalir.setText("Salir");
        JMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(JMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMIBuscarNombre.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMIBuscarNombre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Search-16.png"))); // NOI18N
        jMIBuscarNombre.setText("Buscar Nombre");
        jMIBuscarNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIBuscarNombreActionPerformed(evt);
            }
        });
        jMEditar.add(jMIBuscarNombre);

        jMIBuscarClave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMIBuscarClave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Search-16.png"))); // NOI18N
        jMIBuscarClave.setText("Buscar Clave");
        jMIBuscarClave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIBuscarClaveActionPerformed(evt);
            }
        });
        jMEditar.add(jMIBuscarClave);

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMBMenu.add(jMEditar);

        jMReportes.setText("Reportes");

        jMICatalogoRefacciones.setText("Catálogo de Refacciones");
        jMICatalogoRefacciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICatalogoRefaccionesActionPerformed(evt);
            }
        });
        jMReportes.add(jMICatalogoRefacciones);

        jMIReporteInventario.setText("Reporte de Inventario");
        jMIReporteInventario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIReporteInventarioActionPerformed(evt);
            }
        });
        jMReportes.add(jMIReporteInventario);

        jMIReportePiezasBajoStock.setText("Reporte Piezas c / Bajo Stock");
        jMIReportePiezasBajoStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIReportePiezasBajoStockActionPerformed(evt);
            }
        });
        jMReportes.add(jMIReportePiezasBajoStock);

        jMBMenu.add(jMReportes);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPCatalogoPartes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLNombre)
                            .addComponent(jLNumeroParte)
                            .addComponent(jLPuntoReorden)
                            .addComponent(jLMinimo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTFNumeroParte, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFNombreParte)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jCBNotificarBajoStock, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTFMinimo, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                                    .addComponent(jTFPuntoReorden, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLGrupo)
                                            .addComponent(jLMaximo))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jCBGrupoPartes, 0, 197, Short.MAX_VALUE)
                                            .addComponent(jTFMaximo)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jBAgregar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jBModificar)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jBEliminar)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAgregar, jBEliminar, jBModificar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNumeroParte)
                    .addComponent(jTFNumeroParte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNombre)
                    .addComponent(jTFNombreParte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLPuntoReorden)
                    .addComponent(jTFPuntoReorden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLMaximo)
                    .addComponent(jTFMaximo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLMinimo)
                    .addComponent(jTFMinimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLGrupo)
                    .addComponent(jCBGrupoPartes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBEliminar)
                    .addComponent(jBAgregar)
                    .addComponent(jBModificar)
                    .addComponent(jCBNotificarBajoStock))
                .addGap(18, 18, 18)
                .addComponent(jPCatalogoPartes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jMIAgregarActionPerformed

    private void jMIModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jMIModificarActionPerformed

    private void jMIEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jMIEliminarActionPerformed

    private void JMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_JMISalirActionPerformed

    private void jMIBuscarNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIBuscarNombreActionPerformed
        this.buscarNombre(null);
    }//GEN-LAST:event_jMIBuscarNombreActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jBEliminarActionPerformed

    private void jTPartesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTPartesMouseClicked
        this.obtenerRefaccion();
    }//GEN-LAST:event_jTPartesMouseClicked

    private void jMIBuscarClaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIBuscarClaveActionPerformed
        this.buscarClave(null);
    }//GEN-LAST:event_jMIBuscarClaveActionPerformed

    private void jMICatalogoRefaccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICatalogoRefaccionesActionPerformed
        this.generarCatalogoRefacciones();
    }//GEN-LAST:event_jMICatalogoRefaccionesActionPerformed

    private void jMIReporteInventarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIReporteInventarioActionPerformed
        this.generarReporteInventario();
    }//GEN-LAST:event_jMIReporteInventarioActionPerformed

    private void jMIReportePiezasBajoStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIReportePiezasBajoStockActionPerformed
        this.generarReporteInventarioBajoStock();
    }//GEN-LAST:event_jMIReportePiezasBajoStockActionPerformed

    private void agregar(){
        
        RefaccionDTO refaccion = new RefaccionDTO();
        try {
            if("".equals(this.jTFNombreParte.getText()) || this.jTFNombreParte == null){
                JOptionPane.showMessageDialog(this, "No se ha escrito un nombre de refacción.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if("".equals(this.jTFNumeroParte.getText()) || this.jTFNumeroParte == null){
                JOptionPane.showMessageDialog(this, "No se ha escrito una clave de refacción.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if(!this.validarLimitesStock()){
                JOptionPane.showMessageDialog(null, "Los límites de stock ingresados\nno son válidos.",
                        "Límites de stock no válidos!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            RefaccionDAO acceso = new RefaccionDAO();
            String gr[] = this.jCBGrupoPartes.getSelectedItem().toString().split("#");
            int familia = Integer.parseInt(gr[0]);
            refaccion.setClaveRefaccion(this.jTFNumeroParte.getText());
            refaccion.setMaximo(Integer.parseInt(this.jTFMaximo.getText()));
            refaccion.setMinimo(Integer.parseInt(this.jTFMinimo.getText()));
            refaccion.setPuntoReorden(Integer.parseInt(this.jTFPuntoReorden.getText()));
            refaccion.setNombre(this.jTFNombreParte.getText());
            refaccion.setNotificacion(this.jCBNotificarBajoStock.isSelected());
            refaccion.setStatus(true);
            refaccion.setFamilia(new FamiliaRefaccionDAO().obtenerFamilia(familia, true, true));
            acceso.agregarRefaccion(refaccion);
            this.limpiar();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 949\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(refaccion.toString(), 949, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 950\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(refaccion.toString(), 950, UserHome.getUsuario(), ex);
        }
    }
    
    private void modificar(){
        try {
            if(!this.validarLimitesStock()){
                JOptionPane.showMessageDialog(null, "Los límites de stock ingresados\nno son válidos.",
                        "Límites de stock no válidos!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            RefaccionDTO refaccion = new RefaccionDTO();
            RefaccionDAO acceso = new RefaccionDAO();
            String gr[] = this.jCBGrupoPartes.getSelectedItem().toString().split("#");
            int familia = Integer.parseInt(gr[0]);
            refaccion.setClaveRefaccion(this.jTFNumeroParte.getText());
            refaccion.setMaximo(Integer.parseInt(this.jTFMaximo.getText()));
            refaccion.setMinimo(Integer.parseInt(this.jTFMinimo.getText()));
            refaccion.setPuntoReorden(Integer.parseInt(this.jTFPuntoReorden.getText()));
            refaccion.setNombre(this.jTFNombreParte.getText());
            refaccion.setNotificacion(this.jCBNotificarBajoStock.isSelected());
            refaccion.setStatus(true);
            refaccion.setFamilia(new FamiliaRefaccionDAO().obtenerFamilia(familia, true, true));
            acceso.modificarRefaccion(refaccion);
            this.limpiar();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 951\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes getIconImage()", 951, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 952\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes getIconImage()", 952, UserHome.getUsuario(), ex);
        }
    }
    
    private void eliminar(){
        RefaccionDTO refaccion = new RefaccionDTO();
        try {
            RefaccionDAO acceso = new RefaccionDAO();
            String gr[] = this.jCBGrupoPartes.getSelectedItem().toString().split("#");
            int familia = Integer.parseInt(gr[0]);
            refaccion.setClaveRefaccion(this.jTFNumeroParte.getText());
            refaccion.setMaximo(Integer.parseInt(this.jTFMaximo.getText()));
            refaccion.setMinimo(Integer.parseInt(this.jTFMinimo.getText()));
            refaccion.setPuntoReorden(Integer.parseInt(this.jTFPuntoReorden.getText()));
            refaccion.setNombre(this.jTFNombreParte.getText());
            refaccion.setStatus(true);
            if(acceso.obtenerExistenciaRefaccion(refaccion.getClaveRefaccion(), true, true) > 0){
                JOptionPane.showMessageDialog(null, "La refacción que intenta dar de baja\ncuenta aún con stock en el almacén.",
                    "No se puede realizar la operación!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            refaccion.setFamilia(new FamiliaRefaccionDAO().obtenerFamilia(familia, true, true));
            acceso.eliminarRefaccion(refaccion);
            this.limpiar();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 953\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(refaccion.toString(), 953, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 954\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(refaccion.toString(), 954, UserHome.getUsuario(), ex);
        }
    }
    
    private void limpiar(){
        try{
            this.jTFMaximo.setText(null);
            this.jTFMinimo.setText(null);
            this.jTFNombreParte.setText(null);
            this.jTFNumeroParte.setText(null);
            this.jTFPuntoReorden.setText(null);
            this.jCBNotificarBajoStock.setSelected(true);
            DefaultTableModel modelo = (DefaultTableModel) this.jTPartes.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            this.jCBGrupoPartes.setSelectedIndex(-1);
            this.estadoBotonesInicio();
            this.obtenerFamilias();
            this.obtenerRefacciones();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 955\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes limpiar()", 955, UserHome.getUsuario(), ex);
        }
    }
    
    private void buscarNombre(RefaccionDTO refaccion){
        BuscarCampoSimple buscarCampo = new BuscarCampoSimple();
        buscarCampo.setTipoRespuesta(1);
        buscarCampo.setRecibirTexto(this.jTFNumeroParte);
        buscarCampo.setLocationRelativeTo(null);
        buscarCampo.setVisible(true);
    }
    
    private void buscarClave(RefaccionDTO refaccion){
        try {
            if("".equals(this.jTFNumeroParte.getText()) || this.jTFNumeroParte == null){
                JOptionPane.showMessageDialog(this, "No se ha escrito aún una clave de refacción.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            RefaccionDAO accesoRefaccion = new RefaccionDAO();
            RefaccionDTO buscarRefaccion = new RefaccionDTO();
            RefaccionDTO refaccionEncontrada = new RefaccionDTO();
            buscarRefaccion.setClaveRefaccion(((this.jTFNumeroParte != null) ? this.jTFNumeroParte.getText() : ""));
            refaccionEncontrada = accesoRefaccion.obtenerRefaccion(buscarRefaccion.getClaveRefaccion(), true, true);
            int indexGrupo = 0;
            String grupo = null;
            String gr[];
            int maximo = refaccionEncontrada.getMaximo();
            int minimo = refaccionEncontrada.getMinimo();
            int puntoReorden = refaccionEncontrada.getPuntoReorden();
            boolean notificar = refaccionEncontrada.isNotificacion();
            String numeroParte = ((refaccionEncontrada != null && refaccionEncontrada.getClaveRefaccion() != null) ? 
                    refaccionEncontrada.getClaveRefaccion() : "");
            String nombreParte = ((refaccionEncontrada != null && refaccionEncontrada.getNombre() != null) ? 
                    refaccionEncontrada.getNombre() : "");
            
            if(refaccionEncontrada != null){
                this.jTFMaximo.setText(Integer.toString(maximo));
                this.jTFMinimo.setText(Integer.toString(minimo));
                this.jTFNombreParte.setText(nombreParte);
                this.jTFNumeroParte.setText(numeroParte);
                this.jTFPuntoReorden.setText(Integer.toString(puntoReorden));
                this.jCBNotificarBajoStock.setSelected(notificar);
                //seleccionar la familia de refaccion adecuada
                do{
                    gr = this.jCBGrupoPartes.getItemAt(indexGrupo).toString().split("#");
                    grupo = gr[1];
                    indexGrupo++;
                } while(grupo == null ? refaccionEncontrada.getFamilia().getNombre() != null : !grupo.equals(refaccionEncontrada.getFamilia().getNombre()));
                
                if(indexGrupo > 0){
                    this.jCBGrupoPartes.setSelectedIndex(indexGrupo - 1);
                }
                
                this.estadoBotonesClicPartes();
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 956\n" + ex.getMessage()
                    + "\nError al intentar buscar la refacción en la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes buscarClave()", 956, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 957\n" + ex.getMessage()
                    + "\nError al intentar mostrar la refacción buscada.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes buscarClave()", 957, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerRefaccion(){
        try {
            int index = this.jTPartes.getSelectedRow();
            int indexGrupo = 0;
            String grupo = null;
            String numero = null;
            String gr[];
            RefaccionDTO refaccion = new RefaccionDTO();

            if(index > -1){
                numero = ((this.jTPartes.getValueAt(index, 0) != null) ? this.jTPartes.getValueAt(index, 0).toString() : "");
                if(numero != null) {
                        refaccion = new RefaccionDAO().obtenerRefaccion(numero, true, true);
                    this.jTFNumeroParte.setText(refaccion.getClaveRefaccion());
                    this.jTFNombreParte.setText(refaccion.getNombre());
                    this.jTFPuntoReorden.setText(Integer.toString(refaccion.getPuntoReorden()));
                    this.jTFMaximo.setText(Integer.toString(refaccion.getMaximo()));
                    this.jTFMinimo.setText(Integer.toString(refaccion.getMinimo()));
                    this.jCBNotificarBajoStock.setSelected(refaccion.isNotificacion());

                    do{
                        gr = this.jCBGrupoPartes.getItemAt(indexGrupo).toString().split("#");
                        grupo = gr[1];
                        indexGrupo++;
                    } while(grupo == null ? this.jTPartes.getValueAt(index, 3).toString() != null : !grupo.equals(this.jTPartes.getValueAt(index, 3).toString()) && indexGrupo < this.jCBGrupoPartes.getItemCount());
                    
                    
                    if(indexGrupo > 0){
                        this.jCBGrupoPartes.setSelectedIndex(indexGrupo - 1);
                    }
                    this.estadoBotonesClicPartes();
                }

            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 958\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes obtenerRefaccion()", 958, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 959\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes obtenerRefaccion()", 959, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerRefacciones(){
        try {
            DefaultTableModel modelo = (DefaultTableModel) this.jTPartes.getModel();
            List<RefaccionDTO> refacciones = null;
                refacciones = new RefaccionDAO().obtenerRefacciones();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            for(RefaccionDTO refaccion : refacciones){
                Object datos[] = {refaccion.getClaveRefaccion(), refaccion.getNombre(), 
                    refaccion.getFamilia().getGrupo().getNombre(), refaccion.getFamilia().getNombre(),
                    refaccion.getPuntoReorden(), refaccion.getMinimo(), refaccion.getMaximo()};
                modelo.addRow(datos);
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 960\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos en la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes obtenerRefacciones()", 960, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 961\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes obtenerRefacciones()", 961, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerFamilias(){
        try {
            List<FamiliaRefaccionDTO> familias = null;
                familias = new FamiliaRefaccionDAO().obtenerFamiliasRefacciones();
            while(this.jCBGrupoPartes.getItemCount() > 0){
                this.jCBGrupoPartes.removeItemAt(this.jCBGrupoPartes.getItemCount() - 1);
            }
            for(FamiliaRefaccionDTO familia : familias){
                String datos = Integer.toString(familia.getIdFamiliaRefaccion()) + "#" + familia.getNombre();
                this.jCBGrupoPartes.addItem(datos);
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 962\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes obtenerFamilias()", 962, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 963\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlPartes obtenerFamilias()", 963, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesInicio(){
        try{
            this.jBAgregar.setEnabled(true);
            this.jBEliminar.setEnabled(false);
            this.jBModificar.setEnabled(false);

            this.jMIAgregar.setEnabled(true);
            this.jMIEliminar.setEnabled(false);
            this.jMIModificar.setEnabled(false);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 964\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlPartes estadoBotonesInicio()", 964, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesClicPartes(){
        try{
            this.jBAgregar.setEnabled(false);
            this.jBEliminar.setEnabled(true);
            this.jBModificar.setEnabled(true);

            this.jMIAgregar.setEnabled(false);
            this.jMIEliminar.setEnabled(true);
            this.jMIModificar.setEnabled(true);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 965\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlPartes estadoBotonesClicPartes()", 965, UserHome.getUsuario(), ex);
        }
    }
    
    private boolean validarLimitesStock(){
        try{
            int minimo = Integer.parseInt(this.jTFMinimo.getText());
            int puntoReorden = Integer.parseInt(this.jTFPuntoReorden.getText());
            int maximo = Integer.parseInt(this.jTFMaximo.getText());
            if(minimo <= puntoReorden && puntoReorden < maximo && minimo >= 0 && puntoReorden >= 0 && maximo >= 0){
                return true;
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 966\n" + ex.getMessage(),
                    "Error al obtener límites de stock!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlPartes validarLimitesStock()", 966, UserHome.getUsuario(), ex);
        }
        return false;
    }
    
    private void generarCatalogoRefacciones(){
        try {
            String reportPath = "/reports/CatalogoRefaccionesRemex.jasper";
            String logoPath = "/icons/Logo Efectivo Negro.png";
            Locale locale = new Locale("en", "US");
            InputStream jasperStream = getClass().getResourceAsStream(reportPath);
            JasperReport jReport = (JasperReport)JRLoader.loadObject(jasperStream);
            JasperPrint jPrint = null;
            Map<String,Object> parameters = new HashMap<>();
            LazyQueryDAO lazyQ = new LazyQueryDAO();
            parameters.put(JRParameter.REPORT_LOCALE, locale);
            parameters.put("LOGO", this.getClass().getResourceAsStream(logoPath));
            lazyQ.startLazyQuery();
            jPrint = JasperFillManager.fillReport(jReport, parameters, DBConnection.getConn());
            JasperViewer.viewReport(jPrint, false);
            lazyQ.endLazyQuery();
        } catch(SQLException ex) { 
            JOptionPane.showMessageDialog(null, "Código error: 1190\n" + ex.getMessage(),
                            "Error al acceder a los datos en la BD de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlPartes generarCatalogoRefacciones()", 1190, UserHome.getUsuario(), ex);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1191\n" + ex.getMessage(),
                            "Error al generar el reporte de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlPartes generarCatalogoRefacciones()", 1191, UserHome.getUsuario(), ex);
            //Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1192\n" + ex.getMessage(),
                            "Error error al ver el reporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlPartes generarCatalogoRefacciones()", 1192, UserHome.getUsuario(), ex);
        }
    }
    
    private void generarReporteInventario(){
        try {
            InventaryReport report = new InventaryReport(this);
            report.generarReporte();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1198\n" + ex.getMessage(),
                            "Error error al ver el reporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlPartes generarReporteInventario()", 1198, UserHome.getUsuario(), ex);
        }
    }
    
    private void generarReporteInventarioBajoStock(){
        try {
            InventaryReport report = new InventaryReport(this);
            report.setSoloBajoStock(true);
            report.generarReporte();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1201\n" + ex.getMessage(),
                            "Error error al ver el reporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlPartes generarReporteInventarioBajoStock()", 1201, UserHome.getUsuario(), ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlPartes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlPartes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlPartes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlPartes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlPartes().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem JMISalir;
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBModificar;
    private javax.swing.JComboBox<String> jCBGrupoPartes;
    private javax.swing.JCheckBox jCBNotificarBajoStock;
    private javax.swing.JLabel jLGrupo;
    private javax.swing.JLabel jLMaximo;
    private javax.swing.JLabel jLMinimo;
    private javax.swing.JLabel jLNombre;
    private javax.swing.JLabel jLNumeroParte;
    private javax.swing.JLabel jLPuntoReorden;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIAgregar;
    private javax.swing.JMenuItem jMIBuscarClave;
    private javax.swing.JMenuItem jMIBuscarNombre;
    private javax.swing.JMenuItem jMICatalogoRefacciones;
    private javax.swing.JMenuItem jMIEliminar;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMIModificar;
    private javax.swing.JMenuItem jMIReporteInventario;
    private javax.swing.JMenuItem jMIReportePiezasBajoStock;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JMenu jMReportes;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPCatalogoPartes;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTFMaximo;
    private javax.swing.JTextField jTFMinimo;
    private javax.swing.JTextField jTFNombreParte;
    private javax.swing.JTextField jTFNumeroParte;
    private javax.swing.JTextField jTFPuntoReorden;
    private javax.swing.JTable jTPartes;
    // End of variables declaration//GEN-END:variables
}
