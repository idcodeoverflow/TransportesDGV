/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.ComunicacionContactoDTO;
import beans.ContactoProveedorDTO;
import beans.ProveedorDTO;
import data.ComunicacionContactoDAO;
import data.ContactoProveedorDAO;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;

/**
 *
 * @author David Israel
 */
public class ControlContactoProveedor extends javax.swing.JFrame {

    private ProveedorDTO proveedor;
    private ContactoProveedorDTO contacto;
    private List<ComunicacionContactoDTO> comunicaciones;
    private List<ContactoProveedorDTO> contactos;
    
    public ProveedorDTO getProveedor() {
        return proveedor;
    }

    public void setProveedor(ProveedorDTO proveedor) {
        this.proveedor = proveedor;
    }
    
    public ContactoProveedorDTO getContacto() {
        return contacto;
    }

    public void setContacto(ContactoProveedorDTO contacto) {
        this.contacto = contacto;
    }
    
    /**
     * Creates new form ControlContactoProveedor
     */
    public ControlContactoProveedor() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.estadoBotonesInicio();
            this.jTContactos.setSelectionMode(0);
            this.jTInformacionContacto.setSelectionMode(0);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 790\n" + ex.getMessage(),
                    "Error al iniciar ventana Control\nContacto Proveedor!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor ControlContactoProveedor()", 790, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLNombreProveedor = new javax.swing.JLabel();
        jTFNombreProveedor = new javax.swing.JTextField();
        jLIdContacto = new javax.swing.JLabel();
        jTFIdContacto = new javax.swing.JTextField();
        jLFechaAlta = new javax.swing.JLabel();
        jTFFechaAlta = new javax.swing.JTextField();
        jLNombreContacto = new javax.swing.JLabel();
        jTFNombreContacto = new javax.swing.JTextField();
        jLApellidos = new javax.swing.JLabel();
        jTFApellidos = new javax.swing.JTextField();
        jLPuesto = new javax.swing.JLabel();
        jTFPuesto = new javax.swing.JTextField();
        jContactosProveedor = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTContactos = new javax.swing.JTable();
        jBBorrarContacto = new javax.swing.JButton();
        jBModificarContacto = new javax.swing.JButton();
        jBAgregarContacto = new javax.swing.JButton();
        jPInformacionContacto = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTInformacionContacto = new javax.swing.JTable();
        jBBorrar = new javax.swing.JButton();
        jBNuevo = new javax.swing.JButton();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAgregarContacto = new javax.swing.JMenuItem();
        jMIModificar = new javax.swing.JMenuItem();
        jMIBorrar = new javax.swing.JMenuItem();
        jMIAgregarInformacion = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIAyuda = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Contactos de Proveedores - Sistema de Administración Mantenimiento");

        jLNombreProveedor.setText("Nombre del Proveedor:");

        jTFNombreProveedor.setEditable(false);
        jTFNombreProveedor.setFocusable(false);

        jLIdContacto.setText("Id de Contacto:");

        jTFIdContacto.setEditable(false);
        jTFIdContacto.setFocusable(false);

        jLFechaAlta.setText("Fecha de Alta:");

        jTFFechaAlta.setEditable(false);
        jTFFechaAlta.setFocusable(false);

        jLNombreContacto.setText("Nombre:");

        jLApellidos.setText("Apellidos:");

        jLPuesto.setText("Puesto:");

        jContactosProveedor.setBorder(javax.swing.BorderFactory.createTitledBorder("Contactos del Proveedor"));
        jContactosProveedor.setToolTipText("");

        jTContactos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Contacto", "Nombre", "Apellidos", "Puesto"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTContactos.getTableHeader().setReorderingAllowed(false);
        jTContactos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTContactosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTContactos);
        if (jTContactos.getColumnModel().getColumnCount() > 0) {
            jTContactos.getColumnModel().getColumn(0).setMinWidth(90);
            jTContactos.getColumnModel().getColumn(0).setPreferredWidth(90);
            jTContactos.getColumnModel().getColumn(0).setMaxWidth(90);
        }

        javax.swing.GroupLayout jContactosProveedorLayout = new javax.swing.GroupLayout(jContactosProveedor);
        jContactosProveedor.setLayout(jContactosProveedorLayout);
        jContactosProveedorLayout.setHorizontalGroup(
            jContactosProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jContactosProveedorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jContactosProveedorLayout.setVerticalGroup(
            jContactosProveedorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jContactosProveedorLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jBBorrarContacto.setText("Borrar");
        jBBorrarContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBorrarContactoActionPerformed(evt);
            }
        });

        jBModificarContacto.setText("Modificar");
        jBModificarContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarContactoActionPerformed(evt);
            }
        });

        jBAgregarContacto.setText("Agregar");
        jBAgregarContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarContactoActionPerformed(evt);
            }
        });

        jPInformacionContacto.setBorder(javax.swing.BorderFactory.createTitledBorder("Información Contacto"));

        jTInformacionContacto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Datos"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTInformacionContacto.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTInformacionContacto);

        jBBorrar.setText("Borrar");
        jBBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBorrarActionPerformed(evt);
            }
        });

        jBNuevo.setText("Nuevo");
        jBNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBNuevoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPInformacionContactoLayout = new javax.swing.GroupLayout(jPInformacionContacto);
        jPInformacionContacto.setLayout(jPInformacionContactoLayout);
        jPInformacionContactoLayout.setHorizontalGroup(
            jPInformacionContactoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPInformacionContactoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPInformacionContactoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPInformacionContactoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBBorrar)))
                .addContainerGap())
        );

        jPInformacionContactoLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBBorrar, jBNuevo});

        jPInformacionContactoLayout.setVerticalGroup(
            jPInformacionContactoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPInformacionContactoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPInformacionContactoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBBorrar)
                    .addComponent(jBNuevo))
                .addContainerGap())
        );

        jMArchivo.setText("Archivo");

        jMIAgregarContacto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregarContacto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIAgregarContacto.setText("Agregar");
        jMIAgregarContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarContactoActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregarContacto);

        jMIModificar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMIModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Modify-16.png"))); // NOI18N
        jMIModificar.setText("Modificar");
        jMIModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIModificarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIModificar);

        jMIBorrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMIBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Trash-16.png"))); // NOI18N
        jMIBorrar.setText("Borrar");
        jMIBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIBorrarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIBorrar);

        jMIAgregarInformacion.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregarInformacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Telephone-16.png"))); // NOI18N
        jMIAgregarInformacion.setText("Agregar Información");
        jMIAgregarInformacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarInformacionActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregarInformacion);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMBMenu.add(jMEditar);

        jMAyuda.setText("Ayuda");

        jMIAyuda.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIAyuda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIAyuda.setText("Ver Manual");
        jMIAyuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAyudaActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIAyuda);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLNombreContacto)
                            .addComponent(jLIdContacto)
                            .addComponent(jLNombreProveedor)
                            .addComponent(jLPuesto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFIdContacto)
                                    .addComponent(jTFNombreContacto)
                                    .addComponent(jTFPuesto, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLFechaAlta)
                                    .addComponent(jLApellidos))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jBAgregarContacto)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jBModificarContacto)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jBBorrarContacto))
                                    .addComponent(jTFFechaAlta, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jTFApellidos, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addComponent(jTFNombreProveedor))
                        .addGap(0, 153, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPInformacionContacto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jContactosProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAgregarContacto, jBBorrarContacto, jBModificarContacto});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNombreProveedor)
                    .addComponent(jTFNombreProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLIdContacto)
                    .addComponent(jTFIdContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLFechaAlta)
                    .addComponent(jTFFechaAlta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNombreContacto)
                    .addComponent(jTFNombreContacto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLApellidos)
                    .addComponent(jTFApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLPuesto)
                    .addComponent(jTFPuesto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBBorrarContacto)
                    .addComponent(jBModificarContacto)
                    .addComponent(jBAgregarContacto))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jContactosProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPInformacionContacto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIAgregarContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarContactoActionPerformed
        this.agregar();
    }//GEN-LAST:event_jMIAgregarContactoActionPerformed

    private void jMIModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jMIModificarActionPerformed

    private void jMIBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIBorrarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jMIBorrarActionPerformed

    private void jMIAgregarInformacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarInformacionActionPerformed
        this.agregarDato();
    }//GEN-LAST:event_jMIAgregarInformacionActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAyudaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIAyudaActionPerformed

    private void jBAgregarContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarContactoActionPerformed
        this.agregar();
    }//GEN-LAST:event_jBAgregarContactoActionPerformed

    private void jBModificarContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarContactoActionPerformed
        this.modificar();
    }//GEN-LAST:event_jBModificarContactoActionPerformed

    private void jBBorrarContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBorrarContactoActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jBBorrarContactoActionPerformed

    private void jBNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBNuevoActionPerformed
        this.agregarDato();
    }//GEN-LAST:event_jBNuevoActionPerformed

    private void jBBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBorrarActionPerformed
        this.eliminarDato();
    }//GEN-LAST:event_jBBorrarActionPerformed

    private void jTContactosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTContactosMouseClicked
        this.obtenerContacto();
        this.obtenerDatos(contacto.getIdContactoProveedor());
    }//GEN-LAST:event_jTContactosMouseClicked

    public void mostrarNombreProveedor(ProveedorDTO proveedor){
        this.jTFNombreProveedor.setText(proveedor.getIdProveedor() + "#" + proveedor.getNombre());
        //this.proveedor = proveedor;
    }
    
    private void agregar(){
        ContactoProveedorDTO contacto = new ContactoProveedorDTO();
        try {
            if("".equals(this.jTFNombreContacto.getText()) || this.jTFNombreContacto == null){
                JOptionPane.showMessageDialog(this, "No se ha escrito un nombre de contacto.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if("".equals(this.jTFApellidos.getText()) || this.jTFApellidos == null){
                JOptionPane.showMessageDialog(this, "Aún no se le agrega un apellido\nal contacto.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            ContactoProveedorDAO acceso = new ContactoProveedorDAO();
            contacto.setApellidos(this.jTFApellidos.getText());
            contacto.setNombre(this.jTFNombreContacto.getText());
            contacto.setPuesto(this.jTFPuesto.getText());
            acceso.agregarContactoProveedor(contacto, proveedor);
            this.limpiar();
        } catch (SQLException ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 791\n" + ex.getMessage(),
                        "Error al guardar los datos en la BD!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(contacto.toString() + proveedor.toString(), 791, UserHome.getUsuario(), ex);
                
                boolean reparacionExitosa = false;
                ContactoProveedorDAO accesoContactoProveedor = new ContactoProveedorDAO();
                reparacionExitosa = accesoContactoProveedor.repararErrorAgregarContactoProveedor();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 792\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(contacto.toString() + proveedor.toString(), 792, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(ControlContactoProveedor.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (Exception ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 793\n" + ex.getMessage(),
                        "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(contacto.toString() + proveedor.toString(), 793, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                ContactoProveedorDAO accesoContactoProveedor = new ContactoProveedorDAO();
                reparacionExitosa = accesoContactoProveedor.repararErrorAgregarContactoProveedor();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 794\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(contacto.toString() + proveedor.toString(), 794, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(ControlContactoProveedor.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }
    
    private void modificar(){
        ContactoProveedorDTO contacto = new ContactoProveedorDTO();
        try {
            ContactoProveedorDAO acceso = new ContactoProveedorDAO();
            contacto.setIdContactoProveedor(Integer.parseInt(this.jTFIdContacto.getText()));
            contacto = acceso.obtenerContactoProveedor(contacto.getIdContactoProveedor());
            contacto.setApellidos(this.jTFApellidos.getText());
            contacto.setNombre(this.jTFNombreContacto.getText());
            contacto.setPuesto(this.jTFPuesto.getText());
            contacto.setStatus(true);
            acceso.modificarContactoProveedor(contacto, proveedor);
            this.limpiar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 795\n" + ex.getMessage(),
                    "Error al guardar los datos en la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(contacto.toString() + proveedor.toString(), 795, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 796\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(contacto.toString() + proveedor.toString(), 796, UserHome.getUsuario(), ex);
        }
    }
    
    private void eliminar(){
        ContactoProveedorDTO contacto = new ContactoProveedorDTO();
        try {
            ContactoProveedorDAO acceso = new ContactoProveedorDAO();
            contacto.setIdContactoProveedor(Integer.parseInt(this.jTFIdContacto.getText()));
            contacto = acceso.obtenerContactoProveedor(contacto.getIdContactoProveedor());
            contacto.setApellidos(this.jTFApellidos.getText());
            contacto.setNombre(this.jTFNombreContacto.getText());
            contacto.setPuesto(this.jTFPuesto.getText());
            acceso.eliminarContactoProveedor(contacto, proveedor);
            this.limpiar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 797\n" + ex.getMessage(),
                    "Error al guardar los cambios en la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(contacto.toString() + proveedor.toString(), 797, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 798\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(contacto.toString() + proveedor.toString(), 798, UserHome.getUsuario(), ex);
        }
    }
    
    private void limpiar(){
        try{
            this.jTFApellidos.setText(null);
            this.jTFFechaAlta.setText(null);
            this.jTFIdContacto.setText(null);
            this.jTFNombreContacto.setText(null);
            //this.jTFNombreProveedor.setText(null);
            this.jTFPuesto.setText(null);
            DefaultTableModel modelo = (DefaultTableModel) this.jTContactos.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            DefaultTableModel model = (DefaultTableModel) this.jTInformacionContacto.getModel();
            while(model.getRowCount() > 0){
                model.removeRow(model.getRowCount() - 1);
            }
            this.obtenerContactos();
            this.estadoBotonesInicio();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 799\n" + ex.getMessage(),
                    "Error al limpiar los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor limpiar()", 799, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerContacto(){
        try{
            int index = this.jTContactos.getSelectedRow();
            int numero = 0;
            ContactoProveedorDTO contacto = new ContactoProveedorDTO();
        
            if(index > -1){
                numero = (this.contactos.get(this.jTContactos.getSelectedRow())).getIdContactoProveedor();
                if(numero > 0) {
                    contacto = new ContactoProveedorDAO().obtenerContactoProveedor(numero);
                    this.contacto = contacto;
                    this.jTFIdContacto.setText(Integer.toString(contacto.getIdContactoProveedor()));
                    this.jTFApellidos.setText(contacto.getApellidos());
                    this.jTFFechaAlta.setText(contacto.getFechaAlta().toString());
                    this.jTFNombreContacto.setText(contacto.getNombre());
                    this.jTFPuesto.setText(contacto.getPuesto());
                    this.obtenerDatos(numero);
                    this.estadoBotonesClicContacto();
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 800\n" + ex.getMessage(),
                    "Error al obtener los datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor obtenerContacto()", 800, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 801\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor obtenerContacto()", 801, UserHome.getUsuario(), ex);
        }
    }
    
    public void obtenerContactos(){
        try {
            DefaultTableModel modelo = (DefaultTableModel) this.jTContactos.getModel();
            List<ContactoProveedorDTO> contactosP = null;
                contactosP = new ContactoProveedorDAO().obtenerContactosProveedor(proveedor);
            if(contactosP != null){
                while(modelo.getRowCount() > 0){
                    modelo.removeRow(modelo.getRowCount() - 1);
                }
                for(ContactoProveedorDTO contacto : contactosP){
                    Object datos[] = {contacto.getIdContactoProveedor(), contacto.getNombre(),
                        contacto.getApellidos(), contacto.getPuesto()};
                    modelo.addRow(datos);
                }
                this.contactos = contactosP;
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 802\n" + ex.getMessage(),
                    "Error al obtener los datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor obtenerContactos()", 802, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 803\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor obtenerContactos()", 803, UserHome.getUsuario(), ex);
        }
    }
    
    public void obtenerDatos(int idContacto){
        try {
            DefaultTableModel modelo = (DefaultTableModel) this.jTInformacionContacto.getModel();
            List<ComunicacionContactoDTO> comunicacionesC = null;
                comunicacionesC = new ComunicacionContactoDAO().obtenerComunicacionesContacto(idContacto);
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            for(ComunicacionContactoDTO comunicacion : comunicacionesC){
                Object datos[] = {comunicacion.getNombre(), comunicacion.getDatos()};
                modelo.addRow(datos);
            }
            this.comunicaciones = comunicacionesC;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 804\n" + ex.getMessage(),
                    "Error al obtener los datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor obtenerDatos()", 804, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 805\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor obtenerDatos()", 805, UserHome.getUsuario(), ex);
        }
    }
    
    private void agregarDato(){
        try{
            ControlDatosContacto dato = new ControlDatosContacto();
            dato.setContactoProveedor(contacto);
            dato.setVisible(true);
            dato.setControlContactos(this);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 806\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor agregarDato()", 806, UserHome.getUsuario(), ex);
        }
    }
    
    private void eliminarDato(){
        try {
            int index = this.jTInformacionContacto.getSelectedRow();
            ComunicacionContactoDAO acceso = new ComunicacionContactoDAO();
            if(index > -1){
                acceso.eliminarComunicacion(this.comunicaciones.get(index));
            }
            this.obtenerDatos(contacto.getIdContactoProveedor());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 807\n" + ex.getMessage(),
                    "Error al guardar los cambios en la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor eliminarDato()", 807, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 808\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor eliminarDato()", 808, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesInicio(){
        try{
        
            this.jBAgregarContacto.setEnabled(true);
            this.jBBorrar.setEnabled(false);
            this.jBBorrarContacto.setEnabled(false);
            this.jBModificarContacto.setEnabled(false);
            this.jBNuevo.setEnabled(false);

            this.jMIAgregarContacto.setEnabled(true);
            this.jMIBorrar.setEnabled(false);
            this.jMIModificar.setEnabled(false);
            this.jMIAgregarInformacion.setEnabled(false);
        
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 809\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor estadoBotonesInicio()", 809, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesClicContacto(){
        try{
 
            this.jBAgregarContacto.setEnabled(false);
            this.jBBorrar.setEnabled(true);
            this.jBBorrarContacto.setEnabled(true);
            this.jBModificarContacto.setEnabled(true);
            this.jBNuevo.setEnabled(true);

            this.jMIAgregarContacto.setEnabled(false);
            this.jMIBorrar.setEnabled(true);
            this.jMIModificar.setEnabled(true);
            this.jMIAgregarInformacion.setEnabled(true);
        
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 810\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlContactoProveedor estadoBotonesClicContacto()", 810, UserHome.getUsuario(), ex);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlContactoProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlContactoProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlContactoProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlContactoProveedor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlContactoProveedor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregarContacto;
    private javax.swing.JButton jBBorrar;
    private javax.swing.JButton jBBorrarContacto;
    private javax.swing.JButton jBModificarContacto;
    private javax.swing.JButton jBNuevo;
    private javax.swing.JPanel jContactosProveedor;
    private javax.swing.JLabel jLApellidos;
    private javax.swing.JLabel jLFechaAlta;
    private javax.swing.JLabel jLIdContacto;
    private javax.swing.JLabel jLNombreContacto;
    private javax.swing.JLabel jLNombreProveedor;
    private javax.swing.JLabel jLPuesto;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIAgregarContacto;
    private javax.swing.JMenuItem jMIAgregarInformacion;
    private javax.swing.JMenuItem jMIAyuda;
    private javax.swing.JMenuItem jMIBorrar;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMIModificar;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JPanel jPInformacionContacto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTContactos;
    private javax.swing.JTextField jTFApellidos;
    private javax.swing.JTextField jTFFechaAlta;
    private javax.swing.JTextField jTFIdContacto;
    private javax.swing.JTextField jTFNombreContacto;
    private javax.swing.JTextField jTFNombreProveedor;
    private javax.swing.JTextField jTFPuesto;
    private javax.swing.JTable jTInformacionContacto;
    // End of variables declaration//GEN-END:variables

}
