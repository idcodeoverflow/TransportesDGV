/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.FamiliaRefaccionDTO;
import beans.GrupoRefaccionDTO;
import data.FamiliaRefaccionDAO;
import data.GrupoRefaccionDAO;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;

/**
 *
 * @author David Israel
 */
public class ControlFamiliaRefacciones extends javax.swing.JFrame {

    /**
     * Creates new form ControlGrupoRefacciones
     */
    public ControlFamiliaRefacciones() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.estadoBotonesInicio();
            this.jCBGrupo.setSelectedIndex(-1);
            this.jTFamiliasRefacciones.setSelectionMode(0);
            this.obtenerFamilias();
            this.obtenerGrupos();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 862\n" + ex.getMessage(),
                    "Error al iniciar ventana\nControl Familia de Refacciones!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlFamiliaRefacciones()", 862, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLIdFamilia = new javax.swing.JLabel();
        jTFIdFamilia = new javax.swing.JTextField();
        jLNombreFamilia = new javax.swing.JLabel();
        jTFNombreFamilia = new javax.swing.JTextField();
        jBDarBaja = new javax.swing.JButton();
        jBModificar = new javax.swing.JButton();
        jBAgregar = new javax.swing.JButton();
        jPFamiliaRefacciones = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTFamiliasRefacciones = new javax.swing.JTable();
        jLGrupo = new javax.swing.JLabel();
        jCBGrupo = new javax.swing.JComboBox();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAgregar = new javax.swing.JMenuItem();
        jMIModificar = new javax.swing.JMenuItem();
        jMIDarBaja = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Familias de Refacciones Sistema de Administración Mantenimiento");

        jLIdFamilia.setText("Id de Familia:");

        jTFIdFamilia.setEditable(false);
        jTFIdFamilia.setFocusable(false);

        jLNombreFamilia.setText("Nombre de Familia:");

        jBDarBaja.setText("Dar de Baja");
        jBDarBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDarBajaActionPerformed(evt);
            }
        });

        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jBAgregar.setText("Agregar");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });

        jPFamiliaRefacciones.setBorder(javax.swing.BorderFactory.createTitledBorder("Familia de Refacciones"));

        jTFamiliasRefacciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id de Familia", "Nombre", "Grupo", "Nombre Grupo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTFamiliasRefacciones.getTableHeader().setReorderingAllowed(false);
        jTFamiliasRefacciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTFamiliasRefaccionesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTFamiliasRefacciones);
        if (jTFamiliasRefacciones.getColumnModel().getColumnCount() > 0) {
            jTFamiliasRefacciones.getColumnModel().getColumn(0).setMinWidth(100);
            jTFamiliasRefacciones.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTFamiliasRefacciones.getColumnModel().getColumn(0).setMaxWidth(100);
            jTFamiliasRefacciones.getColumnModel().getColumn(2).setMinWidth(80);
            jTFamiliasRefacciones.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTFamiliasRefacciones.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        javax.swing.GroupLayout jPFamiliaRefaccionesLayout = new javax.swing.GroupLayout(jPFamiliaRefacciones);
        jPFamiliaRefacciones.setLayout(jPFamiliaRefaccionesLayout);
        jPFamiliaRefaccionesLayout.setHorizontalGroup(
            jPFamiliaRefaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPFamiliaRefaccionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPFamiliaRefaccionesLayout.setVerticalGroup(
            jPFamiliaRefaccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPFamiliaRefaccionesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLGrupo.setText("Grupo:");

        jMArchivo.setText("Archivo");

        jMIAgregar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIAgregar.setText("Agregar");
        jMIAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregar);

        jMIModificar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMIModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Modify-16.png"))); // NOI18N
        jMIModificar.setText("Modificar");
        jMIModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIModificarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIModificar);

        jMIDarBaja.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMIDarBaja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Trash-16.png"))); // NOI18N
        jMIDarBaja.setText("Dar de Baja");
        jMIDarBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIDarBajaActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIDarBaja);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMBMenu.add(jMEditar);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPFamiliaRefacciones, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLGrupo)
                            .addComponent(jLIdFamilia))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jCBGrupo, 0, 150, Short.MAX_VALUE)
                            .addComponent(jTFIdFamilia))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLNombreFamilia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTFNombreFamilia, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jBAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBDarBaja)))
                        .addGap(0, 40, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAgregar, jBDarBaja, jBModificar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLIdFamilia)
                    .addComponent(jTFIdFamilia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLNombreFamilia)
                    .addComponent(jTFNombreFamilia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBDarBaja)
                    .addComponent(jBModificar)
                    .addComponent(jBAgregar)
                    .addComponent(jLGrupo)
                    .addComponent(jCBGrupo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPFamiliaRefacciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jMIAgregarActionPerformed

    private void jMIModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jMIModificarActionPerformed

    private void jMIDarBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIDarBajaActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jMIDarBajaActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jBDarBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDarBajaActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jBDarBajaActionPerformed

    private void jTFamiliasRefaccionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTFamiliasRefaccionesMouseClicked
        this.obtenerFamilia();
    }//GEN-LAST:event_jTFamiliasRefaccionesMouseClicked

    private void agregar(){
        FamiliaRefaccionDTO familia = new FamiliaRefaccionDTO();
        try {
            if("".equals(this.jTFNombreFamilia.getText()) || this.jTFNombreFamilia == null){
                JOptionPane.showMessageDialog(this, "No se ha escrito un nombre\nde familia de refacción.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            String gr[] = this.jCBGrupo.getSelectedItem().toString().split("#");
            int grupo = Integer.parseInt(gr[0]);
            FamiliaRefaccionDAO acceso = new FamiliaRefaccionDAO();
            familia.setNombre(this.jTFNombreFamilia.getText());
            familia.setGrupo(new GrupoRefaccionDAO().obtenerGrupoRefaccion(grupo, true, true));
            acceso.agregarFamiliaRefaccion(familia);
            this.limpiar();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 863\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(familia.toString(), 863, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 864\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(familia.toString(), 864, UserHome.getUsuario(), ex);
        }
    }
    
    private void modificar(){
        FamiliaRefaccionDTO familia = new FamiliaRefaccionDTO();
        try {
            String gr[] = this.jCBGrupo.getSelectedItem().toString().split("#");
            int grupo = Integer.parseInt(gr[0]);
            FamiliaRefaccionDAO acceso = new FamiliaRefaccionDAO();
            familia.setIdFamiliaRefaccion(Integer.parseInt(this.jTFIdFamilia.getText()));
            familia.setNombre(this.jTFNombreFamilia.getText());
            familia.setGrupo(new GrupoRefaccionDAO().obtenerGrupoRefaccion(grupo, true, true));
            acceso.modificarFamiliaRefaccion(familia);
            this.limpiar();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 865\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(familia.toString(), 865, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 866\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(familia.toString(), 866, UserHome.getUsuario(), ex);
        }
    }
    
    private void eliminar(){
        FamiliaRefaccionDTO familia = new FamiliaRefaccionDTO();
        try {
            String gr[] = this.jCBGrupo.getSelectedItem().toString().split("#");
            int grupo = Integer.parseInt(gr[0]);
            FamiliaRefaccionDAO acceso = new FamiliaRefaccionDAO();
            familia.setIdFamiliaRefaccion(Integer.parseInt(this.jTFIdFamilia.getText()));
            familia.setNombre(this.jTFNombreFamilia.getText());
            familia.setGrupo(new GrupoRefaccionDAO().obtenerGrupoRefaccion(grupo, true, true));
            acceso.eliminarFamiliaRefaccion(familia);
            this.limpiar();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 867\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(familia.toString(), 867, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 868\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(familia.toString(), 868, UserHome.getUsuario(), ex);
        }
    }
    
    private void limpiar(){
        try{
            this.jTFIdFamilia.setText(null);
            this.jTFNombreFamilia.setText(null);
            this.jCBGrupo.setSelectedIndex(0);
            DefaultTableModel modelo = (DefaultTableModel) this.jTFamiliasRefacciones.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            this.obtenerFamilias();
            this.estadoBotonesInicio();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 869\n" + ex.getMessage()
                    + "\nError al intentar limpiar los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlFamiliaRefacciones limpiar()", 869, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerFamilia(){
        FamiliaRefaccionDTO familia = new FamiliaRefaccionDTO();
        try {
            int index = this.jTFamiliasRefacciones.getSelectedRow();
            int indexGrupo = 0, grupo = 0;
            String gr[];

            if(index > -1){
                String numero = ((this.jTFamiliasRefacciones.getValueAt(index, 0) != null) ? this.jTFamiliasRefacciones.getValueAt(index, 0).toString() : "");
                if(numero != null) {
                        familia = new FamiliaRefaccionDAO().obtenerFamilia(Integer.parseInt(numero), true, true);
                    this.jTFIdFamilia.setText(Integer.toString(familia.getIdFamiliaRefaccion()));
                    this.jTFNombreFamilia.setText(familia.getNombre());
                    do{
                        gr = this.jCBGrupo.getItemAt(indexGrupo).toString().split("#");
                        grupo = Integer.parseInt(gr[0]);
                        indexGrupo++;
                    } while(grupo != Integer.parseInt(this.jTFamiliasRefacciones.getValueAt(index, 2).toString()));
                    if(indexGrupo > 0){
                        this.jCBGrupo.setSelectedIndex(indexGrupo - 1);
                    }
                    this.estadoBotonesClicFamilias();
                }
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 870\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos de la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(familia.toString(), 870, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 871\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(familia.toString(), 871, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerFamilias(){
        String mensajeError = "";
        try {
            DefaultTableModel modelo = (DefaultTableModel) this.jTFamiliasRefacciones.getModel();
            List<FamiliaRefaccionDTO> familias = null;
                familias = new FamiliaRefaccionDAO().obtenerFamiliasRefacciones();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            for(FamiliaRefaccionDTO familia : familias){
                mensajeError = familia.toString();
                Object datos[] = {familia.getIdFamiliaRefaccion(), familia.getNombre(), 
                    familia.getGrupo().getIdGrupoRefaccion(), familia.getGrupo().getNombre()};
                modelo.addRow(datos);
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 872\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos de la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 872, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 873\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 873, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerGrupos(){
        String mensajeError = "";
        try {
            List<GrupoRefaccionDTO> grupos = null;
                grupos = new GrupoRefaccionDAO().obtenerGrupoRefacciones();
            while(this.jCBGrupo.getItemCount() > 0){
                this.jCBGrupo.removeItemAt(this.jCBGrupo.getItemCount() - 1);
            }
            for(GrupoRefaccionDTO grupo : grupos){
                mensajeError = "";
                Object datos = Integer.toString(grupo.getIdGrupoRefaccion()) + "#" + grupo.getNombre();
                this.jCBGrupo.addItem(datos);
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 874\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos de la BD",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 874, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 875\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 875, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesInicio(){
        try{
            this.jBAgregar.setEnabled(true);
            this.jBDarBaja.setEnabled(false);
            this.jBModificar.setEnabled(false);

            this.jMIAgregar.setEnabled(true);
            this.jMIDarBaja.setEnabled(false);
            this.jMIModificar.setEnabled(false);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 876\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlFamiliaRefacciones estadoBotonesInicio()", 876, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesClicFamilias(){
        try{
            this.jBAgregar.setEnabled(false);
            this.jBDarBaja.setEnabled(true);
            this.jBModificar.setEnabled(true);

            this.jMIAgregar.setEnabled(false);
            this.jMIDarBaja.setEnabled(true);
            this.jMIModificar.setEnabled(true);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 877\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlFamiliaRefacciones estadoBotonesClicFamilias()", 877, UserHome.getUsuario(), ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlFamiliaRefacciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlFamiliaRefacciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlFamiliaRefacciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlFamiliaRefacciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlFamiliaRefacciones().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBDarBaja;
    private javax.swing.JButton jBModificar;
    private javax.swing.JComboBox jCBGrupo;
    private javax.swing.JLabel jLGrupo;
    private javax.swing.JLabel jLIdFamilia;
    private javax.swing.JLabel jLNombreFamilia;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIAgregar;
    private javax.swing.JMenuItem jMIDarBaja;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMIModificar;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JPanel jPFamiliaRefacciones;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFIdFamilia;
    private javax.swing.JTextField jTFNombreFamilia;
    private javax.swing.JTable jTFamiliasRefacciones;
    // End of variables declaration//GEN-END:variables
}
