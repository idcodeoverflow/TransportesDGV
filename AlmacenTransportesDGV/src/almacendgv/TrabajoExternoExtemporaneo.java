/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.FacturaDTO;
import beans.OrdenReparacionDTO;
import beans.TrabajoExternoDTO;
import beans.TransporteReparacionDTO;
import beans.UnidadTransporteDTO;
import data.FacturaDAO;
import data.OrdenReparacionDAO;
import data.TrabajoExternoDAO;
import data.TransporteReparacionDAO;
import data.UnidadTransporteDAO;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JOptionPane;
import logger.ErrorLogger;

/**
 *
 * @author David Israel
 */
public class TrabajoExternoExtemporaneo extends javax.swing.JFrame {

    private FacturaDTO factura;
    private ControlFacturasProveedor controlFacturas;
    private String valorOriginal;
    
    /**
     * Creates new form TrabajoExterno
     */
    public TrabajoExternoExtemporaneo() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.mostrarValores();
            //verificar que el usuario tenga los privilegios para ejecutar la acción
            if(UserHome.getUsuario().getPrivilegio() != 1){
                JOptionPane.showMessageDialog(null, "El usuario activo no posee los privilegios\n"
                        + "necesarios para ejecutar la acción.", "Privilegios insuficientes", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1323\n" + ex.getMessage(),
                    "Error al iniciar ventana de Trabajo Externo!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor TrabajoExternoExtemporaneo()", 1323, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }
    
    public FacturaDTO getFactura(){
        return this.factura;
    }
    
    public void setFactura(FacturaDTO factura){
        this.factura = factura;
    }
    
    public ControlFacturasProveedor getControlFacturas(){
        return this.controlFacturas;
    }
    
    public void setControlFacturas(ControlFacturasProveedor controlFacturas){
        this.controlFacturas = controlFacturas;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLProveedor = new javax.swing.JLabel();
        jTFProveedor = new javax.swing.JTextField();
        jLFolioFactura = new javax.swing.JLabel();
        jTFFolioFactura = new javax.swing.JTextField();
        jLNumeroTrabajo = new javax.swing.JLabel();
        jTFNumeroTrabajo = new javax.swing.JTextField();
        jLDescripcion = new javax.swing.JLabel();
        jTFDescripcion = new javax.swing.JTextField();
        jLCantidad = new javax.swing.JLabel();
        jTFCantidad = new javax.swing.JTextField();
        jLPrecioUnitario = new javax.swing.JLabel();
        jTFPrecioUnitario = new javax.swing.JTextField();
        jLTotal = new javax.swing.JLabel();
        jTFTotal = new javax.swing.JTextField();
        jBAgregarTrabajo = new javax.swing.JButton();
        jLLogo = new javax.swing.JLabel();
        jLOrdenReparacion = new javax.swing.JLabel();
        jLClaveUnidad = new javax.swing.JLabel();
        jLUsuario = new javax.swing.JLabel();
        jTFUsuario = new javax.swing.JTextField();
        jCBClaveUnidad = new javax.swing.JComboBox();
        jTFOrdenReparacion = new javax.swing.JTextField();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAgregar = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMIBuscarProveedor = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Trabajo Externo Extemporaneo - Sistema de Administración Mantenimiento");
        setResizable(false);

        jLProveedor.setText("Número Proveedor:");

        jLFolioFactura.setText("Folio Factura:");

        jLNumeroTrabajo.setText("# Trabajo Externo:");

        jTFNumeroTrabajo.setEditable(false);
        jTFNumeroTrabajo.setFocusable(false);

        jLDescripcion.setText("Descripción:");

        jLCantidad.setText("Cantidad:");

        jTFCantidad.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTFCantidadCaretUpdate(evt);
            }
        });
        jTFCantidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTFCantidadFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFCantidadFocusLost(evt);
            }
        });

        jLPrecioUnitario.setText("Precio Unitario:");

        jTFPrecioUnitario.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTFPrecioUnitarioCaretUpdate(evt);
            }
        });
        jTFPrecioUnitario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTFPrecioUnitarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFPrecioUnitarioFocusLost(evt);
            }
        });

        jLTotal.setText("Total:");

        jBAgregarTrabajo.setText("Agregar Trabajo Externo");
        jBAgregarTrabajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarTrabajoActionPerformed(evt);
            }
        });

        jLLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Logo Efectivo Negro chico.png"))); // NOI18N

        jLOrdenReparacion.setText("Orden de Reparación:");

        jLClaveUnidad.setText("Clave Unidad:");

        jLUsuario.setText("Usuario:");

        jTFUsuario.setEditable(false);
        jTFUsuario.setFocusable(false);

        jTFOrdenReparacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFOrdenReparacionFocusLost(evt);
            }
        });

        jMArchivo.setText("Archivo");

        jMIAgregar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIAgregar.setText("Agregar");
        jMIAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregar);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMIBuscarProveedor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMIBuscarProveedor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Search-16.png"))); // NOI18N
        jMIBuscarProveedor.setText("Buscar Proveedor");
        jMIBuscarProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIBuscarProveedorActionPerformed(evt);
            }
        });
        jMEditar.add(jMIBuscarProveedor);

        jMBMenu.add(jMEditar);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLTotal)
                    .addComponent(jLCantidad)
                    .addComponent(jLOrdenReparacion)
                    .addComponent(jLFolioFactura)
                    .addComponent(jLUsuario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBAgregarTrabajo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTFCantidad, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                        .addComponent(jTFUsuario)
                                        .addComponent(jTFOrdenReparacion))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(37, 37, 37)
                                                .addComponent(jLPrecioUnitario))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLDescripcion)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLProveedor, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLClaveUnidad, javax.swing.GroupLayout.Alignment.TRAILING)))))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jTFFolioFactura, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                    .addComponent(jLNumeroTrabajo)))
                            .addComponent(jTFTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFNumeroTrabajo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCBClaveUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(27, 27, 27)
                .addComponent(jLLogo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLProveedor)
                            .addComponent(jTFProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLUsuario)
                            .addComponent(jTFUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLNumeroTrabajo)
                            .addComponent(jTFNumeroTrabajo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLFolioFactura)
                            .addComponent(jTFFolioFactura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLDescripcion)
                            .addComponent(jTFDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLOrdenReparacion)
                            .addComponent(jTFOrdenReparacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLLogo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLPrecioUnitario)
                    .addComponent(jTFPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLCantidad)
                    .addComponent(jTFCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTotal)
                    .addComponent(jTFTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLClaveUnidad)
                    .addComponent(jCBClaveUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jBAgregarTrabajo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBAgregarTrabajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarTrabajoActionPerformed
        this.agregar();
    }//GEN-LAST:event_jBAgregarTrabajoActionPerformed

    private void jMIAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jMIAgregarActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jTFCantidadCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTFCantidadCaretUpdate
        DecimalFormat format = new DecimalFormat("0.000");
        try{
            
            if(!"".equals(this.jTFCantidad.getText()) && 
                    !"".equals(this.jTFTotal.getText()) && 
                    !"".equals(this.jTFPrecioUnitario.getText())){
            
                double total = Double.parseDouble(this.jTFCantidad.getText()) +
                        Double.parseDouble(this.jTFPrecioUnitario.getText());
                this.jTFTotal.setText(format.format(total));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1324\n" + ex.getMessage(),
                    "Error en el calculo de los valores!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("TrabajoExternoExtemporaneo jTFCantidadCaretUpdate()", 1324, UserHome.getUsuario(), ex);
        }
    }//GEN-LAST:event_jTFCantidadCaretUpdate

    private void jTFPrecioUnitarioCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTFPrecioUnitarioCaretUpdate
        DecimalFormat format = new DecimalFormat("0.000");
        try{
            
            if(!"".equals(this.jTFCantidad.getText()) && 
                    !"".equals(this.jTFTotal.getText()) && 
                    !"".equals(this.jTFPrecioUnitario.getText())){
            
                double total = Double.parseDouble(this.jTFCantidad.getText()) +
                        Double.parseDouble(this.jTFPrecioUnitario.getText());
                this.jTFTotal.setText(format.format(total));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1325\n" + ex.getMessage(),
                    "Error en el calculo de los valores!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("TrabajoExternoExtemporaneo jTFPrecioUnitarioCaretUpdate()", 1325, UserHome.getUsuario(), ex);
        }
    }//GEN-LAST:event_jTFPrecioUnitarioCaretUpdate

    private void jTFCantidadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCantidadFocusLost
        double cant = 0.00;
        try{
            cant = Double.parseDouble(this.valorOriginal);
        } catch(Exception ex) {
            cant = 0.00;
        }
        this.onFormatErrorSetValue(this.jTFCantidad, cant);
    }//GEN-LAST:event_jTFCantidadFocusLost

    private void jTFPrecioUnitarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFPrecioUnitarioFocusLost
        double cant = 0.00;
        try{
            cant = Double.parseDouble(this.valorOriginal);
        } catch(Exception ex) {
            cant = 0.00;
        }
        this.onFormatErrorSetValue(this.jTFPrecioUnitario, cant);
    }//GEN-LAST:event_jTFPrecioUnitarioFocusLost

    private void jTFCantidadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCantidadFocusGained
        this.prepararCaptura(this.jTFCantidad);
    }//GEN-LAST:event_jTFCantidadFocusGained

    private void jTFPrecioUnitarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFPrecioUnitarioFocusGained
        this.prepararCaptura(this.jTFPrecioUnitario);
    }//GEN-LAST:event_jTFPrecioUnitarioFocusGained

    private void jTFOrdenReparacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFOrdenReparacionFocusLost
        if(this.jTFOrdenReparacion != null && !"".equals(this.jTFOrdenReparacion.getText())){
            this.mostrarUnidadesTransportePReparacion();
        } else if(this.jCBClaveUnidad != null) {
            this.jCBClaveUnidad.removeAllItems();
        }
    }//GEN-LAST:event_jTFOrdenReparacionFocusLost

    private void jMIBuscarProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIBuscarProveedorActionPerformed
        this.buscarProveedor();
    }//GEN-LAST:event_jMIBuscarProveedorActionPerformed

    private void agregar(){
        TrabajoExternoDTO trabajoExterno = new TrabajoExternoDTO();
        try {
            TrabajoExternoDAO acceso = new TrabajoExternoDAO();
            OrdenReparacionDAO accesoReparacion = new OrdenReparacionDAO();
            String claveUnidad = ((this.jCBClaveUnidad.getSelectedItem() != null && !"".equals(this.jCBClaveUnidad.getSelectedItem().toString())) ? this.jCBClaveUnidad.getSelectedItem().toString() : "");
            String nOrdenReparacion = ((this.jTFOrdenReparacion.getText() != null && !"".equals(this.jTFOrdenReparacion.getText())) ? this.jTFOrdenReparacion.getText() : "0");
            String folioFactura = ((this.jTFFolioFactura.getText() != null && !"".equals(this.jTFFolioFactura.getText())) ? this.jTFFolioFactura.getText() : "");
            String nProveedor = ((this.jTFProveedor.getText() != null && !"".equals(this.jTFProveedor.getText())) ? this.jTFProveedor.getText() : "0");
            OrdenReparacionDTO ordenReparacion = accesoReparacion.obtenerOrdenReparacion(Integer.parseInt(nOrdenReparacion), true, true, true);
            UnidadTransporteDAO accesoTransporte = new UnidadTransporteDAO();
            UnidadTransporteDTO unidadTransporte = accesoTransporte.obtenerUnidad(claveUnidad, true, true, true);
            FacturaDAO accesoFactura = new FacturaDAO();
            int numeroProveedor = Integer.parseInt(nProveedor);
            
            //obtener factura
            factura = accesoFactura.obtenerFactura(folioFactura, numeroProveedor, true, true, true);
            
            //verificar que la factura exista
            if(factura == null){
                JOptionPane.showMessageDialog(null, "La factura ingresada no existe\n", 
                        "Factura inexistente", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            //verificar que el usuario tenga los privilegios para ejecutar la acción
            if(UserHome.getUsuario().getPrivilegio() != 1){
                JOptionPane.showMessageDialog(null, "El usuario activo no posee los privilegios\n"
                        + "necesarios para ejecutar la acción.", "Privilegios insuficientes", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //validar que la orden de reparacion exista
            if(ordenReparacion == null){
                JOptionPane.showMessageDialog(null, "La orden de reparación seleccionada\n"
                        + "no existe.", "Operación no válida", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //validar que la orden de reparacion no este cancelada
            if(!ordenReparacion.isStatus()){
                JOptionPane.showMessageDialog(null, "La orden de reparación seleccionada\n"
                        + "se encuentra cancelada.", "Operación no válida", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //validar que el campo de orden de reparación no se encuentre vacío
            if(this.jTFOrdenReparacion.getText() == null || "".equals(this.jTFOrdenReparacion.getText())){
                JOptionPane.showMessageDialog(null, "El campo de número de orden\nde reparación no contiene datos.", 
                        "Faltan datos", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            //validar que el campo de folio de factura no se encuentre vacío
            if(this.jTFFolioFactura.getText() == null || "".equals(this.jTFFolioFactura.getText())){
                JOptionPane.showMessageDialog(null, "El campo de folio de factura no contiene datos.", 
                        "Faltan datos", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            if(!this.validarTransportesPReparacion(this.jCBClaveUnidad.getSelectedItem().toString(), ordenReparacion)){
                JOptionPane.showMessageDialog(null, "La clave de Unidad de Transporte\nno pertenece "
                        + "a la orden de\nreparación indicada.\nVerifique los datos e inténtelo\notra vez."
                        , "Datos Erroneos!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            trabajoExterno.setCantidad(Double.parseDouble(this.jTFCantidad.getText()));
            trabajoExterno.setDescripcion(this.jTFDescripcion.getText());
            trabajoExterno.setFactura(factura);
            trabajoExterno.setIva(0.0);
            trabajoExterno.setMonto(Double.parseDouble(this.jTFTotal.getText()));
            trabajoExterno.setPrecioUnitario(Double.parseDouble(this.jTFPrecioUnitario.getText()));
            trabajoExterno.setStatus(true);
            trabajoExterno.setSubtotal(0.0);
            trabajoExterno.setOrdenReparacion(ordenReparacion);
            trabajoExterno.setUnidadTransporte(unidadTransporte);
            trabajoExterno.setUsuario(UserHome.getUsuario());
            
            //Validar que la cantidad sea un valor válido
            if(trabajoExterno.getCantidad() < 1){
                JOptionPane.showMessageDialog(null, "La cantidad ingresada no es válida",
                    "Cantidad inválida!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            acceso.agregarTrabajoExterno(trabajoExterno);
            controlFacturas.actualizarTablas();
            this.limpiar();
        } catch (SQLException ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 1329\n" + ex.getMessage(),
                        "Error al guardar los datos!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(trabajoExterno.toString(), 1329, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                TrabajoExternoDAO accesoTrabajoExterno = new TrabajoExternoDAO();
                reparacionExitosa = accesoTrabajoExterno.repararErrorAgregarTrabajoExterno();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 1330\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(trabajoExterno.toString(), 1330, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(TrabajoExterno.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (Exception ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 1331\n" + ex.getMessage(),
                        "Error al obtener los datos ingresados!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(trabajoExterno.toString(), 1331, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                TrabajoExternoDAO accesoTrabajoExterno = new TrabajoExternoDAO();
                reparacionExitosa = accesoTrabajoExterno.repararErrorAgregarTrabajoExterno();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 1332\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(trabajoExterno.toString(), 1332, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(TrabajoExterno.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }
    
    private void limpiar(){
        try{
            this.mostrarValores();
            this.jTFDescripcion.setText(null);
            this.jCBClaveUnidad.removeAllItems();
            this.jTFOrdenReparacion.getText();
            this.jTFFolioFactura.setText(null);
            this.jTFProveedor.setText(null);
            this.jTFOrdenReparacion.setText(null);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1333\n" + ex.getMessage(),
                    "Error al limpiar los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("TrabajoExternoExtemporaneo limpiar()", 1333, UserHome.getUsuario(), ex);
        }
    }
    
    public void mostrarValores(){
        try{
            this.jTFCantidad.setText("0.000");
            this.jTFPrecioUnitario.setText("0.000");
            this.jTFTotal.setText("0.000");
            this.jTFUsuario.setText(UserHome.getUsuario().getNombre() + " " + UserHome.getUsuario().getApellidos());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1334\n" + ex.getMessage(),
                    "Error al mostrar los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("TrabajoExternoExtemporaneo mostrarValores()", 1334, UserHome.getUsuario(), ex);
        }
    }
    
    private boolean validarTransportesPReparacion(String claveTransporte, OrdenReparacionDTO reparacion){
        try{
            TransporteReparacionDAO accesoTransporteReparacion = new TransporteReparacionDAO();
            List<TransporteReparacionDTO> transportes = accesoTransporteReparacion.
                    obtenerTransportesPReparacion(reparacion, true, true, true, true);

            for(TransporteReparacionDTO transporte : transportes){
                if(claveTransporte.equals(transporte.getTransporte().getClave())){
                    return true;
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1335\n" + ex.getMessage(),
                    "Error al obtener datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("TrabajoExternoExtemporaneo validarTransportesPReparacion()", 1335, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1336\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("TrabajoExternoExtemporaneo validarTransportesPReparacion()", 1336, UserHome.getUsuario(), ex);
        }
        return false;
    }
    
    private void onFormatErrorSetValue(javax.swing.JTextField campo, double value){
        DecimalFormat formatD  = new DecimalFormat("0.000");
        try{
            double n = Double.parseDouble(campo.getText());
            campo.setText(formatD.format(n));
        } catch (Exception ex) {
            campo.setText(formatD.format(value));
        }
    }
    
    private void onFormatErrorSetValue(javax.swing.JTextField campo, int value){
        try{
            int n = (int)(Double.parseDouble(campo.getText()));
            campo.setText(Integer.toString(n));
        } catch (Exception ex) {
            campo.setText(Integer.toString(value));
        }
    }
    
    private void prepararCaptura(javax.swing.JTextField campo){
        try{
            this.valorOriginal = ((campo != null && !"".equals(campo.getText())) ? campo.getText() : "");
            campo.setText(null);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1337\n" + ex.getMessage(),
                    "Error al preparar captura!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("TrabajoExternoExtemporaneo prepararCaptura()", 1337, UserHome.getUsuario(), ex);
        }
    }
    
    private void mostrarUnidadesTransportePReparacion(){
        try{
            String nOrdenReparacion = ((this.jTFOrdenReparacion.getText() != null && !"".equals(this.jTFOrdenReparacion.getText())) ? this.jTFOrdenReparacion.getText() : "0");
            int numeroOrden = Integer.parseInt(nOrdenReparacion);
            OrdenReparacionDTO ordenReparacion = new OrdenReparacionDTO();
            OrdenReparacionDAO accesoReparacion = new OrdenReparacionDAO();
            TransporteReparacionDAO accesoTReparacion = new TransporteReparacionDAO();
            ordenReparacion = accesoReparacion.obtenerOrdenReparacion(numeroOrden, true, true, true);
            List<TransporteReparacionDTO> transportes;
            
            if(ordenReparacion == null){
                JOptionPane.showMessageDialog(null, "No existe la orden de reparación especificada.",
                        "No existe la orden de reparación", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            transportes = accesoTReparacion.obtenerTransportesPReparacion(ordenReparacion, true, true, true, true);
            
            this.jCBClaveUnidad.removeAllItems();
            
            if(transportes == null){
                JOptionPane.showMessageDialog(null, "No se encontraron unidades\nde transporte asociadas\na la orden de reparación.",
                        "No se encontraron unidades de transporte", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            for(TransporteReparacionDTO transporte : transportes){
                this.jCBClaveUnidad.addItem(transporte.getTransporte().getClave());
            }
            
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1338\n" + ex.getMessage(),
                        "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("TrabajoExternoExtemporaneo mostrarUnidadesTransportePReparacion()", 1338, UserHome.getUsuario(), ex);
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1339\n" + ex.getMessage(),
                        "Error al obtener los datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("TrabajoExternoExtemporaneo mostrarUnidadesPReparacion()", 1339, UserHome.getUsuario(), ex);
        }
    }
    
    private void buscarProveedor(){
        try{
            BuscarCampoSimple buscarCampo = new BuscarCampoSimple();
            buscarCampo.setTipoRespuesta(3);
            buscarCampo.setRecibirTexto(this.jTFProveedor);
            buscarCampo.setLocationRelativeTo(null);
            buscarCampo.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1340\n" + ex.getMessage(),
                        "Error al abrir la interfaz!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("TrabajoExternoExtemporaneo buscarProveedor()", 1340, UserHome.getUsuario(), ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TrabajoExternoExtemporaneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TrabajoExternoExtemporaneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TrabajoExternoExtemporaneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TrabajoExternoExtemporaneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TrabajoExternoExtemporaneo().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregarTrabajo;
    private javax.swing.JComboBox jCBClaveUnidad;
    private javax.swing.JLabel jLCantidad;
    private javax.swing.JLabel jLClaveUnidad;
    private javax.swing.JLabel jLDescripcion;
    private javax.swing.JLabel jLFolioFactura;
    private javax.swing.JLabel jLLogo;
    private javax.swing.JLabel jLNumeroTrabajo;
    private javax.swing.JLabel jLOrdenReparacion;
    private javax.swing.JLabel jLPrecioUnitario;
    private javax.swing.JLabel jLProveedor;
    private javax.swing.JLabel jLTotal;
    private javax.swing.JLabel jLUsuario;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIAgregar;
    private javax.swing.JMenuItem jMIBuscarProveedor;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JTextField jTFCantidad;
    private javax.swing.JTextField jTFDescripcion;
    private javax.swing.JTextField jTFFolioFactura;
    private javax.swing.JTextField jTFNumeroTrabajo;
    private javax.swing.JTextField jTFOrdenReparacion;
    private javax.swing.JTextField jTFPrecioUnitario;
    private javax.swing.JTextField jTFProveedor;
    private javax.swing.JTextField jTFTotal;
    private javax.swing.JTextField jTFUsuario;
    // End of variables declaration//GEN-END:variables
}
