/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.RefaccionDTO;
import bussines.LazyQueryBO;
import data.RefaccionDAO;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;

/**
 *
 * @author David Israel
 */
public class ControlInventarios extends javax.swing.JFrame {

    /**
     * Creates new form ControlInventarios
     */
    public ControlInventarios() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.actualizarInventarios();
            this.jTInventario.setSelectionMode(0);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 892\n" + ex.getMessage(),
                    "Error al iniciar ventana Control de Inventarios!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlInventarios()", 892, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPInventario = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTInventario = new javax.swing.JTable();
        jMBMenuBar = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIActualizar = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMVer = new javax.swing.JMenu();
        jMIMostrarTodos = new javax.swing.JMenuItem();
        jMIMostrarBajos = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Control Inventario de Refacciones - Sistema de Administración Mantenimiento");

        jPInventario.setBorder(javax.swing.BorderFactory.createTitledBorder("Inventario Refacciones"));

        jTInventario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clave Refacción", "Nombre", "Máximo", "Mínimo", "Punto Reorden", "Existencia", "Precio Unitario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTInventario.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTInventario);
        if (jTInventario.getColumnModel().getColumnCount() > 0) {
            jTInventario.getColumnModel().getColumn(0).setMinWidth(120);
            jTInventario.getColumnModel().getColumn(0).setPreferredWidth(120);
            jTInventario.getColumnModel().getColumn(0).setMaxWidth(120);
            jTInventario.getColumnModel().getColumn(2).setMinWidth(100);
            jTInventario.getColumnModel().getColumn(2).setPreferredWidth(100);
            jTInventario.getColumnModel().getColumn(2).setMaxWidth(100);
            jTInventario.getColumnModel().getColumn(3).setMinWidth(100);
            jTInventario.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTInventario.getColumnModel().getColumn(3).setMaxWidth(100);
            jTInventario.getColumnModel().getColumn(4).setMinWidth(100);
            jTInventario.getColumnModel().getColumn(4).setPreferredWidth(100);
            jTInventario.getColumnModel().getColumn(4).setMaxWidth(100);
            jTInventario.getColumnModel().getColumn(5).setMinWidth(100);
            jTInventario.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTInventario.getColumnModel().getColumn(5).setMaxWidth(100);
            jTInventario.getColumnModel().getColumn(6).setMinWidth(100);
            jTInventario.getColumnModel().getColumn(6).setPreferredWidth(100);
            jTInventario.getColumnModel().getColumn(6).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPInventarioLayout = new javax.swing.GroupLayout(jPInventario);
        jPInventario.setLayout(jPInventarioLayout);
        jPInventarioLayout.setHorizontalGroup(
            jPInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPInventarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 983, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPInventarioLayout.setVerticalGroup(
            jPInventarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPInventarioLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMArchivo.setText("Archivo");

        jMIActualizar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMIActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIActualizar.setText("Actualizar");
        jMIActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIActualizarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIActualizar);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenuBar.add(jMArchivo);

        jMVer.setText("Ver");

        jMIMostrarTodos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMIMostrarTodos.setText("Mostrar Todos");
        jMIMostrarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIMostrarTodosActionPerformed(evt);
            }
        });
        jMVer.add(jMIMostrarTodos);

        jMIMostrarBajos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMIMostrarBajos.setText("Mostrar Bajos en Inventario");
        jMIMostrarBajos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIMostrarBajosActionPerformed(evt);
            }
        });
        jMVer.add(jMIMostrarBajos);

        jMBMenuBar.add(jMVer);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenuBar.add(jMAyuda);

        setJMenuBar(jMBMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPInventario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPInventario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIActualizarActionPerformed
        this.actualizarInventarios();
    }//GEN-LAST:event_jMIActualizarActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMIMostrarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIMostrarTodosActionPerformed
        this.mostrarTodos();
    }//GEN-LAST:event_jMIMostrarTodosActionPerformed

    private void jMIMostrarBajosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIMostrarBajosActionPerformed
        this.mostrarBajos();
    }//GEN-LAST:event_jMIMostrarBajosActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void actualizarInventarios(){
        String mensajeError = "";
        try {
            this.limpiar();
            DefaultTableModel modelo = (DefaultTableModel) this.jTInventario.getModel();
            DecimalFormat formatD = new DecimalFormat("0.00");
            List<RefaccionDTO> refacciones = null;
            RefaccionDAO accesoRefaccion = new RefaccionDAO();
            LazyQueryBO lazyQ = new LazyQueryBO();
            refacciones = accesoRefaccion.obtenerRefacciones();
            lazyQ.startLazyQuery();
            for(RefaccionDTO refaccion : refacciones){
                Object datos[] = {refaccion.getClaveRefaccion(), refaccion.getNombre(), 
                    refaccion.getMaximo(), refaccion.getMinimo(), refaccion.getPuntoReorden(), 
                    accesoRefaccion.obtenerExistenciaRefaccion(refaccion.getClaveRefaccion(), false, false),
                    formatD.format(accesoRefaccion.obtenerPrecioRefaccion(refaccion.getClaveRefaccion(), false, false))};
                modelo.addRow(datos);
            }
            lazyQ.endLazyQuery();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 893\n" + ex.getMessage(),
                    "Error al obtener inventarios de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(mensajeError, 893, UserHome.getUsuario(), ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 894\n" + ex.getMessage(),
                    "Error al obtener inventarios!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(mensajeError, 894, UserHome.getUsuario(), ex);
        }
    }
    
    private void mostrarTodos(){
        this.actualizarInventarios();
    }
    
    private void mostrarBajos(){
        String mensajeError = "";
        try {
            this.limpiar();
            DefaultTableModel modelo = (DefaultTableModel) this.jTInventario.getModel();
            DecimalFormat formatD = new DecimalFormat("0.00");
            List<RefaccionDTO> refacciones = null;
            RefaccionDAO accesoRefaccion = new RefaccionDAO();
            LazyQueryBO lazyQ = new LazyQueryBO();
            double existencia = 0.00;
            refacciones = accesoRefaccion.obtenerRefacciones();
            lazyQ.startLazyQuery();
            for(RefaccionDTO refaccion : refacciones){
                existencia = accesoRefaccion.obtenerExistenciaRefaccion(refaccion.getClaveRefaccion(), false, false);
                mensajeError = refaccion.toString() + "_existencia_" + existencia;
                if(existencia <= refaccion.getPuntoReorden()){
                    Object datos[] = {refaccion.getClaveRefaccion(), refaccion.getNombre(), 
                        refaccion.getMaximo(), refaccion.getMinimo(), refaccion.getPuntoReorden(), 
                        existencia, formatD.format(accesoRefaccion.obtenerPrecioRefaccion(refaccion.getClaveRefaccion(), false, false))};
                    modelo.addRow(datos);
                }
            }
            lazyQ.endLazyQuery();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 895\n" + ex.getMessage(),
                    "Error al obtener inventarios de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(mensajeError, 895, UserHome.getUsuario(), ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 896\n" + ex.getMessage(),
                    "Error al obtener inventarios!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(mensajeError, 896, UserHome.getUsuario(), ex);
        }
    }
    
    private void limpiar(){
        try{
            DefaultTableModel modelo = (DefaultTableModel) this.jTInventario.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 897\n" + ex.getMessage(),
                    "Error al limpiar los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlInventarios limpiar()", 897, UserHome.getUsuario(), ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlInventarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlInventarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlInventarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlInventarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlInventarios().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenuBar;
    private javax.swing.JMenuItem jMIActualizar;
    private javax.swing.JMenuItem jMIMostrarBajos;
    private javax.swing.JMenuItem jMIMostrarTodos;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JMenu jMVer;
    private javax.swing.JPanel jPInventario;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTInventario;
    // End of variables declaration//GEN-END:variables
}
