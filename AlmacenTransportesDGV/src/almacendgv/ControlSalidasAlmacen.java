/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.SalidaAlmacenDTO;
import beans.SalidaEspecialDTO;
import beans.SalidaOperadorDTO;
import beans.SalidaTallerDTO;
import beans.SalidaUnidadDTO;
import data.SalidaAlmacenDAO;
import data.SalidaEspecialDAO;
import data.SalidaOperadorDAO;
import data.SalidaTallerDAO;
import data.SalidaUnidadDAO;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;

/**
 *
 * @author David Israel
 */
public class ControlSalidasAlmacen extends javax.swing.JFrame {

    private SalidaAlmacenDTO salidaAlmacenActual;
    
    /**
     * Creates new form ControlSalidasAlmacen
     */
    public ControlSalidasAlmacen() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.jTSalidasAlmacen.setSelectionMode(0);
            this.obtenerSalidas();
            this.estadoBotonesInicio();
            this.salidaAlmacenActual = null;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 998\n" + ex.getMessage(),
                    "Error al iniciar ventana Control Salidas de Almacen!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlSalidasAlmacen()", 998, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLUsuario = new javax.swing.JLabel();
        jTFUsuario = new javax.swing.JTextField();
        jLFecha = new javax.swing.JLabel();
        jTFFecha = new javax.swing.JTextField();
        jLNumeroSalida = new javax.swing.JLabel();
        jTFNumeroSalida = new javax.swing.JTextField();
        jLIdTipoSalida = new javax.swing.JLabel();
        jTFIdTipoSalida = new javax.swing.JTextField();
        jLClaveRefaccion = new javax.swing.JLabel();
        jTFClaveRefaccion = new javax.swing.JTextField();
        jLCantidad = new javax.swing.JLabel();
        jTFCantidad = new javax.swing.JTextField();
        jLPrecioUnitario = new javax.swing.JLabel();
        jTFPrecioUnitario = new javax.swing.JTextField();
        jLTotal = new javax.swing.JLabel();
        jTFTotal = new javax.swing.JTextField();
        jLTipoSalida = new javax.swing.JLabel();
        jTFTipoSalida = new javax.swing.JTextField();
        jLReceptor = new javax.swing.JLabel();
        jTFReceptor = new javax.swing.JTextField();
        jBCancelarSalida = new javax.swing.JButton();
        jBSalidaTransporte = new javax.swing.JButton();
        jBSalidaOperador = new javax.swing.JButton();
        jBSalidaEspecial = new javax.swing.JButton();
        jPSalidasAlmacen = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTSalidasAlmacen = new javax.swing.JTable();
        jLLogo = new javax.swing.JLabel();
        jLNumeroOrden = new javax.swing.JLabel();
        jLCancelada = new javax.swing.JLabel();
        jBSalidaTaller = new javax.swing.JButton();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMSalidasAlmacén = new javax.swing.JMenu();
        jMISalidaEspecial = new javax.swing.JMenuItem();
        jMISalidaOperador = new javax.swing.JMenuItem();
        jMISalidaTransporte = new javax.swing.JMenuItem();
        jMICancelarSalida = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMIBuscar = new javax.swing.JMenuItem();
        jMReportes = new javax.swing.JMenu();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Salidas de Almacén - Sistema de Administración Mantenimiento");

        jLUsuario.setText("Usuario:");

        jTFUsuario.setEditable(false);
        jTFUsuario.setFocusable(false);

        jLFecha.setText("Fecha:");

        jTFFecha.setEditable(false);
        jTFFecha.setFocusable(false);

        jLNumeroSalida.setText("Número de Salida:");

        jTFNumeroSalida.setEditable(false);
        jTFNumeroSalida.setFocusable(false);

        jLIdTipoSalida.setText("ID Tipo de Salida:");

        jTFIdTipoSalida.setEditable(false);
        jTFIdTipoSalida.setFocusable(false);

        jLClaveRefaccion.setText("Clave de Refacción:");

        jTFClaveRefaccion.setEditable(false);
        jTFClaveRefaccion.setFocusable(false);

        jLCantidad.setText("Cantidad:");

        jTFCantidad.setEditable(false);
        jTFCantidad.setFocusable(false);

        jLPrecioUnitario.setText("Precio Unitario:");

        jTFPrecioUnitario.setEditable(false);
        jTFPrecioUnitario.setFocusable(false);

        jLTotal.setText("Total:");

        jTFTotal.setEditable(false);
        jTFTotal.setFocusable(false);

        jLTipoSalida.setText("Tipo de Salida:");

        jTFTipoSalida.setEditable(false);
        jTFTipoSalida.setFocusable(false);

        jLReceptor.setText("Receptor:");

        jTFReceptor.setEditable(false);
        jTFReceptor.setFocusable(false);

        jBCancelarSalida.setText("Cancelar Salida");
        jBCancelarSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarSalidaActionPerformed(evt);
            }
        });

        jBSalidaTransporte.setText("Salida Transporte");
        jBSalidaTransporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalidaTransporteActionPerformed(evt);
            }
        });

        jBSalidaOperador.setText("Salida Operador");
        jBSalidaOperador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalidaOperadorActionPerformed(evt);
            }
        });

        jBSalidaEspecial.setText("Salida Especial");
        jBSalidaEspecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalidaEspecialActionPerformed(evt);
            }
        });

        jPSalidasAlmacen.setBorder(javax.swing.BorderFactory.createTitledBorder("Salidas de Almacén"));

        jTSalidasAlmacen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# Salida", "Orden de Reparación", "Fecha", "Clave Refacción", "Refacción", "Cantidad", "Total", "Tipo", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTSalidasAlmacen.getTableHeader().setReorderingAllowed(false);
        jTSalidasAlmacen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTSalidasAlmacenMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTSalidasAlmacen);
        if (jTSalidasAlmacen.getColumnModel().getColumnCount() > 0) {
            jTSalidasAlmacen.getColumnModel().getColumn(0).setMinWidth(90);
            jTSalidasAlmacen.getColumnModel().getColumn(0).setPreferredWidth(90);
            jTSalidasAlmacen.getColumnModel().getColumn(0).setMaxWidth(90);
            jTSalidasAlmacen.getColumnModel().getColumn(1).setMinWidth(130);
            jTSalidasAlmacen.getColumnModel().getColumn(1).setPreferredWidth(130);
            jTSalidasAlmacen.getColumnModel().getColumn(1).setMaxWidth(130);
            jTSalidasAlmacen.getColumnModel().getColumn(2).setMinWidth(200);
            jTSalidasAlmacen.getColumnModel().getColumn(2).setPreferredWidth(200);
            jTSalidasAlmacen.getColumnModel().getColumn(2).setMaxWidth(200);
            jTSalidasAlmacen.getColumnModel().getColumn(3).setMinWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(3).setPreferredWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(3).setMaxWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(5).setMinWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(5).setPreferredWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(5).setMaxWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(6).setMinWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(6).setPreferredWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(6).setMaxWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(7).setMinWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(7).setPreferredWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(7).setMaxWidth(110);
            jTSalidasAlmacen.getColumnModel().getColumn(8).setMinWidth(90);
            jTSalidasAlmacen.getColumnModel().getColumn(8).setPreferredWidth(90);
            jTSalidasAlmacen.getColumnModel().getColumn(8).setMaxWidth(90);
        }

        javax.swing.GroupLayout jPSalidasAlmacenLayout = new javax.swing.GroupLayout(jPSalidasAlmacen);
        jPSalidasAlmacen.setLayout(jPSalidasAlmacenLayout);
        jPSalidasAlmacenLayout.setHorizontalGroup(
            jPSalidasAlmacenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSalidasAlmacenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPSalidasAlmacenLayout.setVerticalGroup(
            jPSalidasAlmacenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSalidasAlmacenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Logo Efectivo Negro mediano.png"))); // NOI18N

        jLNumeroOrden.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLNumeroOrden.setText("Orden de Reparación:");

        jLCancelada.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLCancelada.setForeground(new java.awt.Color(255, 0, 0));

        jBSalidaTaller.setText("Salida Taller");
        jBSalidaTaller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalidaTallerActionPerformed(evt);
            }
        });

        jMArchivo.setText("Archivo");

        jMSalidasAlmacén.setText("Salidas de Almacén");

        jMISalidaEspecial.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMISalidaEspecial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMISalidaEspecial.setText("Agregar Salida Especial");
        jMISalidaEspecial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalidaEspecialActionPerformed(evt);
            }
        });
        jMSalidasAlmacén.add(jMISalidaEspecial);

        jMISalidaOperador.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMISalidaOperador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMISalidaOperador.setText("Agregar Salida Operador");
        jMISalidaOperador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalidaOperadorActionPerformed(evt);
            }
        });
        jMSalidasAlmacén.add(jMISalidaOperador);

        jMISalidaTransporte.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMISalidaTransporte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMISalidaTransporte.setText("Agregar Salida Transporte");
        jMISalidaTransporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalidaTransporteActionPerformed(evt);
            }
        });
        jMSalidasAlmacén.add(jMISalidaTransporte);

        jMArchivo.add(jMSalidasAlmacén);

        jMICancelarSalida.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMICancelarSalida.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Trash-16.png"))); // NOI18N
        jMICancelarSalida.setText("Cancelar Salida");
        jMICancelarSalida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICancelarSalidaActionPerformed(evt);
            }
        });
        jMArchivo.add(jMICancelarSalida);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMIBuscar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMIBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Search-16.png"))); // NOI18N
        jMIBuscar.setText("Buscar");
        jMIBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIBuscarActionPerformed(evt);
            }
        });
        jMEditar.add(jMIBuscar);

        jMBMenu.add(jMEditar);

        jMReportes.setText("Reportes");
        jMBMenu.add(jMReportes);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPSalidasAlmacen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBSalidaTaller)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBSalidaEspecial)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBSalidaOperador)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBSalidaTransporte)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBCancelarSalida))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLTipoSalida)
                                    .addComponent(jLPrecioUnitario)
                                    .addComponent(jLClaveRefaccion)
                                    .addComponent(jLNumeroSalida)
                                    .addComponent(jLUsuario))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFUsuario)
                                    .addComponent(jTFNumeroSalida)
                                    .addComponent(jTFClaveRefaccion)
                                    .addComponent(jTFPrecioUnitario)
                                    .addComponent(jTFTipoSalida, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLFecha)
                                    .addComponent(jLIdTipoSalida)
                                    .addComponent(jLCantidad)
                                    .addComponent(jLTotal)
                                    .addComponent(jLReceptor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFFecha)
                                    .addComponent(jTFIdTipoSalida)
                                    .addComponent(jTFCantidad)
                                    .addComponent(jTFTotal)
                                    .addComponent(jTFReceptor, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLNumeroOrden)
                            .addComponent(jLCancelada))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                        .addComponent(jLLogo)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBCancelarSalida, jBSalidaEspecial, jBSalidaOperador, jBSalidaTaller, jBSalidaTransporte});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLUsuario)
                            .addComponent(jTFUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLFecha)
                            .addComponent(jTFFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLNumeroOrden))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLNumeroSalida)
                            .addComponent(jTFNumeroSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLIdTipoSalida)
                            .addComponent(jTFIdTipoSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLCancelada))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLClaveRefaccion)
                            .addComponent(jTFClaveRefaccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLCantidad)
                            .addComponent(jTFCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLPrecioUnitario)
                            .addComponent(jTFPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLTotal)
                            .addComponent(jTFTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTipoSalida)
                    .addComponent(jTFTipoSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLReceptor)
                    .addComponent(jTFReceptor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBCancelarSalida)
                    .addComponent(jBSalidaTransporte)
                    .addComponent(jBSalidaOperador)
                    .addComponent(jBSalidaEspecial)
                    .addComponent(jBSalidaTaller))
                .addGap(18, 18, 18)
                .addComponent(jPSalidasAlmacen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMICancelarSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICancelarSalidaActionPerformed
        this.cancelarSalida();
    }//GEN-LAST:event_jMICancelarSalidaActionPerformed

    private void jMISalidaEspecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalidaEspecialActionPerformed
        this.agregarSalidaEspecial();
    }//GEN-LAST:event_jMISalidaEspecialActionPerformed

    private void jMISalidaOperadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalidaOperadorActionPerformed
        this.agregarSalidaOperador();
    }//GEN-LAST:event_jMISalidaOperadorActionPerformed

    private void jMISalidaTransporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalidaTransporteActionPerformed
        this.agregarSalidaUnidad();
    }//GEN-LAST:event_jMISalidaTransporteActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIBuscarActionPerformed
        this.buscar();
    }//GEN-LAST:event_jMIBuscarActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jBSalidaEspecialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalidaEspecialActionPerformed
        this.agregarSalidaEspecial();
    }//GEN-LAST:event_jBSalidaEspecialActionPerformed

    private void jBSalidaOperadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalidaOperadorActionPerformed
        this.agregarSalidaOperador();
    }//GEN-LAST:event_jBSalidaOperadorActionPerformed

    private void jBSalidaTransporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalidaTransporteActionPerformed
        this.agregarSalidaUnidad();
    }//GEN-LAST:event_jBSalidaTransporteActionPerformed

    private void jBCancelarSalidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarSalidaActionPerformed
        this.cancelarSalida();
    }//GEN-LAST:event_jBCancelarSalidaActionPerformed

    private void jTSalidasAlmacenMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTSalidasAlmacenMouseReleased
        this.obtenerSalida();
    }//GEN-LAST:event_jTSalidasAlmacenMouseReleased

    private void jBSalidaTallerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalidaTallerActionPerformed
        this.agregarSalidaTaller();
    }//GEN-LAST:event_jBSalidaTallerActionPerformed

    private void agregarSalidaEspecial(){
        try{
            SalidaEspecial salidaEspecial = new SalidaEspecial();
            salidaEspecial.mostrarValores();
            salidaEspecial.setControlSalidas(this);
            salidaEspecial.setLocationRelativeTo(null);
            salidaEspecial.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1000\n" + ex.getMessage()
                        + "\nError al intentar abrir Salida Especial.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlSalidasAlmacen agregarSalidaEspecial()", 1000, UserHome.getUsuario(), ex);
        }
    }
    
    private void agregarSalidaOperador(){
        try{
            SalidaOperador salidaOperador = new SalidaOperador();
            salidaOperador.mostrarValores();
            salidaOperador.setControlSalidas(this);
            salidaOperador.setLocationRelativeTo(null);
            salidaOperador.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1001\n" + ex.getMessage()
                        + "\nError al intentar abrir Salida a Operador.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen agregarSalidaOperador()", 1001, UserHome.getUsuario(), ex);
        }
    }
    
    private void agregarSalidaUnidad(){
        try{
            SalidaUnidad salidaUnidad = new SalidaUnidad();
            salidaUnidad.mostrarValores();
            salidaUnidad.setControlSalidas(this);
            salidaUnidad.setLocationRelativeTo(null);
            salidaUnidad.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1002\n" + ex.getMessage()
                        + "\nError al intentar abrir Salida a Unidad.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen agregarSalidaUnidad()", 1002, UserHome.getUsuario(), ex);
        }
    }
    
    private void agregarSalidaTaller(){
        try{
            SalidaTaller salidaTaller = new SalidaTaller();
            salidaTaller.mostrarValores();
            salidaTaller.setControlSalidas(this);
            salidaTaller.setLocationRelativeTo(null);
            salidaTaller.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 2050\n" + ex.getMessage()
                        + "\nError al intentar abrir Salida a Unidad.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen agregarSalidaUnidad()", 2050, UserHome.getUsuario(), ex);
        }
    }
    
    private void cancelarSalida(){
        try {
            int rowIndex = this.jTSalidasAlmacen.getSelectedRow();
            int numeroSalida = 0;
            
            SalidaEspecialDTO salidaEspecial = new SalidaEspecialDTO();
            SalidaOperadorDTO salidaOperador = new SalidaOperadorDTO();
            SalidaUnidadDTO salidaUnidad = new SalidaUnidadDTO();
            SalidaTallerDTO salidaTaller = new SalidaTallerDTO();
            
            SalidaEspecialDAO accesoEspecial = new SalidaEspecialDAO();
            SalidaOperadorDAO accesoOperador = new SalidaOperadorDAO();
            SalidaUnidadDAO accesoUnidad = new SalidaUnidadDAO();
            SalidaTallerDAO accesoTaller = new SalidaTallerDAO();
            
            if(rowIndex > -1){
        
                numeroSalida = Integer.parseInt(this.jTSalidasAlmacen.getValueAt(rowIndex, 0).toString());
                    
                
                switch(this.jTSalidasAlmacen.getValueAt(rowIndex, 7).toString()){
                    case "":
                        break;
                    case "S. Bodega"://(Eliminado)
                        break;
                    case "S. Especial":
                        //Salidas Especiales
                        salidaEspecial = accesoEspecial.obtenerSalidaEspecial(numeroSalida, true, true, true);
                        accesoEspecial.eliminarSalidaEspecial(salidaEspecial);
                        break;
                    case "S. Operador":
                        //Salidas a Operador
                        salidaOperador = accesoOperador.obtenerSalidaOperador(numeroSalida, true, true, true);
                        accesoOperador.eliminarSalidaOperador(salidaOperador);
                        break;
                    case "S. Unidad":
                        //Salidas a Unidad
                        salidaUnidad = accesoUnidad.obtenerSalidaUnidad(numeroSalida, true, true, true);
                        accesoUnidad.eliminarSalidaUnidad(salidaUnidad);
                    case "S. Taller":
                        //Salidas a Taller
                        salidaTaller = accesoTaller.obtenerSalidaTaller(numeroSalida, true, true, true);
                        accesoTaller.eliminarSalidaTaller(salidaTaller);
                        break;
                }
                this.limpiar();
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1003\n" + ex.getMessage()
                    + "\nError al intentar modificar los datos de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen cancelarSalida()", 1003, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1004\n" + ex.getMessage()
                    + "\nError al intentar convertir los datos de la tabla.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen cancelarSalida()", 1004, UserHome.getUsuario(), ex);
        }
    }

    public void obtenerSalidas(){
        try{
            SalidaEspecialDAO accesoSalidaEspecial = new SalidaEspecialDAO();
            SalidaOperadorDAO accesoSalidaOperador = new SalidaOperadorDAO();
            SalidaUnidadDAO accesoSalidaUnidad = new SalidaUnidadDAO();
            SalidaTallerDAO accesoSalidaTaller = new SalidaTallerDAO();
            List<SalidaAlmacenDTO> salidasAlmacen = new ArrayList<SalidaAlmacenDTO>();
            List<SalidaEspecialDTO> salidasEspeciales = new ArrayList<SalidaEspecialDTO>();
            List<SalidaOperadorDTO> salidasOperadores = new ArrayList<SalidaOperadorDTO>();
            List<SalidaUnidadDTO> salidasUnidades = new ArrayList<SalidaUnidadDTO>();
            List<SalidaTallerDTO> salidasTaller = new ArrayList<SalidaTallerDTO>();
            String tiposSalidas[] = {"", "S. Bodega", "S. Especial", "S. Operador", "S. Unidad", "S. Taller"};
            int limite = 500;

            DecimalFormat formatD = new DecimalFormat("0.00");

            DefaultTableModel modelo = (DefaultTableModel) this.jTSalidasAlmacen.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }

            try {

                salidasEspeciales = accesoSalidaEspecial.obtenerSalidasEspeciales(true, true, false);
                salidasOperadores = accesoSalidaOperador.obtenerSalidasOperadores(true, false, false);
                salidasTaller = accesoSalidaTaller.obtenerSalidasTaller(true, false, false);
                salidasUnidades = accesoSalidaUnidad.obtenerSalidasUnidad(true, false, true);

            } catch(SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 1005\n" + ex.getMessage()
                        + "\nError al intentar obtener los datos de la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog("ControlSalidasAlmacen obtenerSalidas()", 1005, UserHome.getUsuario(), ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Código error: 1006\n" + ex.getMessage()
                        + "\nError al intentar obtener los datos ingresados.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog("ControlSalidasAlmacen obtenerSalidas()", 1006, UserHome.getUsuario(), ex);
            }

            
            try{
                salidasAlmacen.addAll(salidasEspeciales);
                salidasAlmacen.addAll(salidasUnidades);
                salidasAlmacen.addAll(salidasOperadores);
                salidasAlmacen.addAll(salidasTaller);
                Collections.sort(salidasAlmacen);
                for(SalidaAlmacenDTO salidaAlmacen : salidasAlmacen){
                    Object datos[] = {salidaAlmacen.getNumeroSalida(), salidaAlmacen.getOrdenReparacion().getNumeroOrden(), 
                        salidaAlmacen.getFechaRegistro(), salidaAlmacen.getRefaccion().getClaveRefaccion(), 
                        salidaAlmacen.getRefaccion().getNombre(), salidaAlmacen.getCantidad(),
                        formatD.format(salidaAlmacen.getCosto()), tiposSalidas[salidaAlmacen.getTipo()],((salidaAlmacen.isStatus()) ? "Vigente" : "Cancelada")};
                    modelo.addRow(datos);

                    if(limite-- <= 0){
                        break;
                    }
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Código error: 1007\n" + ex.getMessage()
                        + "\nError al intentar obtener los datos ingresados.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog("ControlSalidasAlmacen obtenerSalidas()", 1007, UserHome.getUsuario(), ex);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1008\n" + ex.getMessage()
                        + "\nError al intentar obtener las Salidas de Almacén.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen obtenerSalidas()", 1008, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerSalida(){
        try {
            int rowIndex = this.jTSalidasAlmacen.getSelectedRow();
            int numeroSalida = 0;
            String tiposSalidas[] = {"", "Salida Bodega", "Salida Especial", "Salida Operador", "Salida Unidad", "Salida Taller"};
            DecimalFormat formatD = new DecimalFormat("0.00");
            
            SalidaAlmacenDTO salidaAlmacen = new SalidaAlmacenDTO();
            SalidaEspecialDTO salidaEspecial = new SalidaEspecialDTO();
            SalidaOperadorDTO salidaOperador = new SalidaOperadorDTO();
            SalidaUnidadDTO salidaUnidad = new SalidaUnidadDTO();
            SalidaTallerDTO salidaTaller = new SalidaTallerDTO();
            
            SalidaEspecialDAO accesoEspecial = new SalidaEspecialDAO();
            SalidaOperadorDAO accesoOperador = new SalidaOperadorDAO();
            SalidaUnidadDAO accesoUnidad = new SalidaUnidadDAO();
            SalidaTallerDAO accesoTaller = new SalidaTallerDAO();
            
            if(rowIndex > -1){
        
                numeroSalida = Integer.parseInt(this.jTSalidasAlmacen.getValueAt(rowIndex, 0).toString());
                
                
                switch(this.jTSalidasAlmacen.getValueAt(rowIndex, 7).toString()){
                    case "":
                        break;
                    case "S. Bodega"://(Eliminado)
                        //Salidas de Bodega
                        break;
                    case "S. Especial":
                        //Salidas Especiales
                        salidaEspecial = accesoEspecial.obtenerSalidaEspecial(numeroSalida, true, true, true);
                        this.jTFReceptor.setText(((salidaEspecial.getNombreBeneficiario() != null) ? salidaEspecial.getNombreBeneficiario() : "" ));
                        this.jTFIdTipoSalida.setText(Integer.toString(salidaEspecial.getIdSalidaEspecial()));
                        
                        salidaAlmacen = salidaEspecial;
                        this.salidaAlmacenActual = salidaEspecial;

                        break;
                    case "S. Operador":
                        //Salidas a Operador
                        salidaOperador = accesoOperador.obtenerSalidaOperador(numeroSalida, true, true, true);
                        this.jTFReceptor.setText(Integer.toString(salidaOperador.getOperador().getNumeroOperador()) + "# " + 
                                ((salidaOperador.getOperador().getNombre() != null) ? salidaOperador.getOperador().getNombre() : "" ) + " " +
                                ((salidaOperador.getOperador().getApellidos() != null) ? salidaOperador.getOperador().getApellidos() : "" ));
                        this.jTFIdTipoSalida.setText(Integer.toString(salidaOperador.getIdSalidaOperador()));
                        salidaAlmacen = salidaOperador;
                        this.salidaAlmacenActual = salidaAlmacen;

                        break;
                    case "S. Unidad":
                        //Salidas a Unidad
                        salidaUnidad = accesoUnidad.obtenerSalidaUnidad(numeroSalida, true, true, true);
                        this.jTFReceptor.setText(((salidaUnidad.getTransporte().getClave() != null) ? salidaUnidad.getTransporte().getClave() : ""));
                        this.jTFIdTipoSalida.setText(Integer.toString(salidaUnidad.getIdSalidaUnidad()));
                        salidaAlmacen = salidaUnidad;
                        this.salidaAlmacenActual = salidaAlmacen;
                        break;
                    case "S. Taller":
                        //Salidas a Taller
                        salidaTaller = accesoTaller.obtenerSalidaTaller(numeroSalida, true, true, true);
                        this.jTFReceptor.setText(((salidaTaller.getUnidadTransporte().getClave() != null) ? salidaTaller.getUnidadTransporte().getClave() : ""));
                        this.jTFIdTipoSalida.setText(Integer.toString(salidaTaller.getIdSalidaTaller()));
                        salidaAlmacen = salidaTaller;
                        this.salidaAlmacenActual = salidaTaller;
                }
                this.jTFCantidad.setText(Double.toString(salidaAlmacen.getCantidad()));
                this.jTFClaveRefaccion.setText(((salidaAlmacen.getRefaccion().getClaveRefaccion() != null) ? salidaAlmacen.getRefaccion().getClaveRefaccion() : "" ));
                this.jTFFecha.setText(((salidaAlmacen.getFechaRegistro() != null) ? salidaAlmacen.getFechaRegistro().toString() : "" ));
                this.jTFNumeroSalida.setText(Integer.toString(salidaAlmacen.getNumeroSalida()));
                this.jTFPrecioUnitario.setText(((salidaAlmacen.getCantidad() != 0) ? formatD.format((double)(salidaAlmacen.getCosto() / salidaAlmacen.getCantidad())) : "0.00"));
                this.jTFTipoSalida.setText(tiposSalidas[salidaAlmacen.getTipo()]);
                this.jTFTotal.setText(formatD.format(salidaAlmacen.getCosto()));
                this.jTFUsuario.setText(((salidaAlmacen.getUsuario().getNombre() != null) ? salidaAlmacen.getUsuario().getNombre() : "" ) + " " + 
                        ((salidaAlmacen.getUsuario().getApellidos() != null) ? salidaAlmacen.getUsuario().getApellidos() : "" ));
                this.jLNumeroOrden.setText("Orden de Reparación: " + Integer.toString(salidaAlmacen.getOrdenReparacion().getNumeroOrden()));
                this.jLCancelada.setText(((salidaAlmacen.isStatus()) ? "" : "Cancelada"));
                this.estadoBotonesClicSalidas();
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1009\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen obtenerSalida()", 1009, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1010\n" + ex.getMessage()
                    + "\nError al intentar convertir los datos de la tabla.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen obtenerSalida()", 1010, UserHome.getUsuario(), ex);
        }
    }
    
    private void limpiar(){
        try{
            this.jTFCantidad.setText(null);
            this.jTFClaveRefaccion.setText(null);
            this.jTFFecha.setText(null);
            this.jTFIdTipoSalida.setText(null);
            this.jTFNumeroSalida.setText(null);
            this.jTFPrecioUnitario.setText(null);
            this.jTFReceptor.setText(null);
            this.jTFTipoSalida.setText(null);
            this.jTFTotal.setText(null);
            this.jTFUsuario.setText(null);
            this.jLNumeroOrden.setText("Orden de Reparación: ");
            this.jLCancelada.setText(null);
            this.obtenerSalidas();
            this.estadoBotonesInicio();

            this.salidaAlmacenActual = null;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1011\n" + ex.getMessage()
                        + "\nError al intentar limpiar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen limpiar()", 1011, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesInicio(){
        try{
            this.jBCancelarSalida.setEnabled(false);
            this.jBSalidaEspecial.setEnabled(true);
            this.jBSalidaOperador.setEnabled(true);
            this.jBSalidaTransporte.setEnabled(true);

            this.jMICancelarSalida.setEnabled(false);
            this.jMISalidaEspecial.setEnabled(true);
            this.jMISalidaOperador.setEnabled(true);
            this.jMISalidaTransporte.setEnabled(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1012\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen limpiar()", 1012, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesClicSalidas(){
        try{
            this.jBCancelarSalida.setEnabled(this.salidaAlmacenActual.isStatus());
            this.jBSalidaEspecial.setEnabled(true);
            this.jBSalidaOperador.setEnabled(true);
            this.jBSalidaTransporte.setEnabled(true);

            this.jMICancelarSalida.setEnabled(this.salidaAlmacenActual.isStatus());
            this.jMISalidaEspecial.setEnabled(true);
            this.jMISalidaOperador.setEnabled(true);
            this.jMISalidaTransporte.setEnabled(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1013\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlSalidasAlmacen estadoBotonesClicSalidas()", 1013, UserHome.getUsuario(), ex);
        }
    }
    
    private void buscar(){
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlSalidasAlmacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlSalidasAlmacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlSalidasAlmacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlSalidasAlmacen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlSalidasAlmacen().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCancelarSalida;
    private javax.swing.JButton jBSalidaEspecial;
    private javax.swing.JButton jBSalidaOperador;
    private javax.swing.JButton jBSalidaTaller;
    private javax.swing.JButton jBSalidaTransporte;
    private javax.swing.JLabel jLCancelada;
    private javax.swing.JLabel jLCantidad;
    private javax.swing.JLabel jLClaveRefaccion;
    private javax.swing.JLabel jLFecha;
    private javax.swing.JLabel jLIdTipoSalida;
    private javax.swing.JLabel jLLogo;
    private javax.swing.JLabel jLNumeroOrden;
    private javax.swing.JLabel jLNumeroSalida;
    private javax.swing.JLabel jLPrecioUnitario;
    private javax.swing.JLabel jLReceptor;
    private javax.swing.JLabel jLTipoSalida;
    private javax.swing.JLabel jLTotal;
    private javax.swing.JLabel jLUsuario;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIBuscar;
    private javax.swing.JMenuItem jMICancelarSalida;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMISalidaEspecial;
    private javax.swing.JMenuItem jMISalidaOperador;
    private javax.swing.JMenuItem jMISalidaTransporte;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JMenu jMReportes;
    private javax.swing.JMenu jMSalidasAlmacén;
    private javax.swing.JPanel jPSalidasAlmacen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFCantidad;
    private javax.swing.JTextField jTFClaveRefaccion;
    private javax.swing.JTextField jTFFecha;
    private javax.swing.JTextField jTFIdTipoSalida;
    private javax.swing.JTextField jTFNumeroSalida;
    private javax.swing.JTextField jTFPrecioUnitario;
    private javax.swing.JTextField jTFReceptor;
    private javax.swing.JTextField jTFTipoSalida;
    private javax.swing.JTextField jTFTotal;
    private javax.swing.JTextField jTFUsuario;
    private javax.swing.JTable jTSalidasAlmacen;
    // End of variables declaration//GEN-END:variables
}
