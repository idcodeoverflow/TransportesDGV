/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.CargoDirectoDTO;
import beans.CargoUnidadDTO;
import beans.FacturaDTO;
import beans.OrdenReparacionDTO;
import beans.RefaccionDTO;
import beans.TransporteReparacionDTO;
import beans.UnidadTransporteDTO;
import beans.UsuarioDTO;
import data.CargoDirectoDAO;
import data.CargoUnidadDAO;
import data.FacturaDAO;
import data.OrdenReparacionDAO;
import data.RefaccionDAO;
import data.TransporteReparacionDAO;
import data.UnidadTransporteDAO;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.JOptionPane;
import logger.ErrorLogger;

/**
 *
 * @author David Israel
 */
public class CargoUnidadExtemporaneo extends javax.swing.JFrame {

    private FacturaDTO factura;
    private UsuarioDTO usuario;    
    private ControlFacturasProveedor controlFacturas;
    private String valorOriginal;
    
    /**
     * Creates new form CargoEspecial
     */
    public CargoUnidadExtemporaneo() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.jTFCantidad.setText("0.000");
            this.jTFPrecioUnitario.setText("0.000");
            this.jTFTotal.setText("0.000");
            
            //verificar que el usuario tenga los privilegios para ejecutar la acción
            if(UserHome.getUsuario().getPrivilegio() != 1){
                JOptionPane.showMessageDialog(null, "El usuario activo no posee los privilegios\n"
                        + "necesarios para ejecutar la acción.", "Privilegios insuficientes", JOptionPane.ERROR_MESSAGE);
                return;
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1304\n" + ex.getMessage(),
                "Error al iniciar ventana Cargo a Unidad\nde Transporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor CargoUnidadExtemporaneo()", 1304, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }
    
    public void mostrarInformacion(){
        try{
            this.jTFUsuario.setText(UserHome.getUsuario().getNombre() + " " + UserHome.getUsuario().getApellidos());
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 1305\n" + ex.getMessage(),
                    "Error al mostrar los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("CargoUnidadExtemporaneo mostrarInformacion()", 1305, UserHome.getUsuario(), ex);
        }
    }

    public FacturaDTO getFactura() {
        return factura;
    }

    public void setFactura(FacturaDTO factura) {
        this.factura = factura;
    }

    public UsuarioDTO getUsuario() {
        return usuario;
    }

    public void setUsuario(UsuarioDTO usuario) {
        this.usuario = usuario;
    }    
    
    public ControlFacturasProveedor getControlFacturas(){
        return this.controlFacturas;
    }
    
    public void setControlFacturas(ControlFacturasProveedor controlFacturas){
        this.controlFacturas = controlFacturas;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLUsuario = new javax.swing.JLabel();
        jTFUsuario = new javax.swing.JTextField();
        jLProveedor = new javax.swing.JLabel();
        jTFProveedor = new javax.swing.JTextField();
        jLFolio = new javax.swing.JLabel();
        jTFFolio = new javax.swing.JTextField();
        jLOrdenReparacion = new javax.swing.JLabel();
        jLNumeroCargoTransporte = new javax.swing.JLabel();
        jTFCargoEspecial = new javax.swing.JTextField();
        jLClaveRefaccion = new javax.swing.JLabel();
        jTFClaveRefaccion = new javax.swing.JTextField();
        jLPrecioUnitario = new javax.swing.JLabel();
        jTFPrecioUnitario = new javax.swing.JTextField();
        jLCantidad = new javax.swing.JLabel();
        jTFCantidad = new javax.swing.JTextField();
        jLTotal = new javax.swing.JLabel();
        jTFTotal = new javax.swing.JTextField();
        jLLogo = new javax.swing.JLabel();
        jBAgregarCargo = new javax.swing.JButton();
        jLClaveUnidad = new javax.swing.JLabel();
        jCBClaveUnidad = new javax.swing.JComboBox();
        jTFOrdenReparacion = new javax.swing.JTextField();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAgregar = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMIBuscarProveedor = new javax.swing.JMenuItem();
        jMIBuscarParte = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cargo a Unidad de Transporte Extemporáneo - Sistema de Administración Mantenimiento");

        jLUsuario.setText("Usuario:");

        jTFUsuario.setEditable(false);
        jTFUsuario.setFocusable(false);

        jLProveedor.setText("Proveedor:");

        jLFolio.setText("Folio:");

        jLOrdenReparacion.setText("Orden de Reparación:");

        jLNumeroCargoTransporte.setText("# Cargo Transporte:");

        jTFCargoEspecial.setEditable(false);
        jTFCargoEspecial.setFocusable(false);

        jLClaveRefaccion.setText("Clave de Refacción:");

        jLPrecioUnitario.setText("Precio Unitario:");

        jTFPrecioUnitario.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTFPrecioUnitarioCaretUpdate(evt);
            }
        });
        jTFPrecioUnitario.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTFPrecioUnitarioFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFPrecioUnitarioFocusLost(evt);
            }
        });

        jLCantidad.setText("Cantidad:");

        jTFCantidad.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTFCantidadCaretUpdate(evt);
            }
        });
        jTFCantidad.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTFCantidadFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFCantidadFocusLost(evt);
            }
        });

        jLTotal.setText("Total:");

        jLLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Logo Efectivo Negro chico.png"))); // NOI18N

        jBAgregarCargo.setText("Agregar Cargo Unidad");
        jBAgregarCargo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarCargoActionPerformed(evt);
            }
        });

        jLClaveUnidad.setText("Clave de Unidad:");

        jTFOrdenReparacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTFOrdenReparacionFocusLost(evt);
            }
        });

        jMArchivo.setText("Archivo");

        jMIAgregar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIAgregar.setText("Agregar");
        jMIAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregar);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMIBuscarProveedor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMIBuscarProveedor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Search-16.png"))); // NOI18N
        jMIBuscarProveedor.setText("Buscar Proveedor");
        jMIBuscarProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIBuscarProveedorActionPerformed(evt);
            }
        });
        jMEditar.add(jMIBuscarProveedor);

        jMIBuscarParte.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMIBuscarParte.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Search-16.png"))); // NOI18N
        jMIBuscarParte.setText("Buscar Parte");
        jMIBuscarParte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIBuscarParteActionPerformed(evt);
            }
        });
        jMEditar.add(jMIBuscarParte);

        jMBMenu.add(jMEditar);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLTotal)
                    .addComponent(jLPrecioUnitario)
                    .addComponent(jLNumeroCargoTransporte)
                    .addComponent(jLFolio)
                    .addComponent(jLUsuario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTFUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                    .addComponent(jTFFolio)
                    .addComponent(jTFCargoEspecial)
                    .addComponent(jTFPrecioUnitario)
                    .addComponent(jTFTotal))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLProveedor)
                            .addComponent(jLOrdenReparacion)
                            .addComponent(jLClaveRefaccion)
                            .addComponent(jLCantidad)
                            .addComponent(jLClaveUnidad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTFProveedor, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(jTFClaveRefaccion)
                            .addComponent(jTFCantidad)
                            .addComponent(jTFOrdenReparacion)
                            .addComponent(jCBClaveUnidad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jBAgregarCargo, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 34, Short.MAX_VALUE)
                .addComponent(jLLogo)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLUsuario)
                            .addComponent(jTFUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLProveedor)
                            .addComponent(jTFProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLFolio)
                            .addComponent(jTFFolio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLOrdenReparacion)
                            .addComponent(jTFOrdenReparacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLNumeroCargoTransporte)
                            .addComponent(jTFCargoEspecial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLClaveRefaccion)
                            .addComponent(jTFClaveRefaccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLLogo))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLPrecioUnitario)
                    .addComponent(jTFPrecioUnitario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLCantidad)
                    .addComponent(jTFCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTotal)
                    .addComponent(jTFTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLClaveUnidad)
                    .addComponent(jCBClaveUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jBAgregarCargo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jMIAgregarActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jBAgregarCargoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarCargoActionPerformed
        this.agregar();
    }//GEN-LAST:event_jBAgregarCargoActionPerformed

    private void jTFPrecioUnitarioCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTFPrecioUnitarioCaretUpdate
        DecimalFormat format = new DecimalFormat("0.000");
        try{
            
            if(!"".equals(this.jTFCantidad.getText()) && !"".equals(this.jTFTotal.getText()) && 
                    !"".equals(this.jTFPrecioUnitario.getText())){
            
                double total = Double.parseDouble(this.jTFPrecioUnitario.getText()) +
                        Double.parseDouble(this.jTFCantidad.getText());
                this.jTFTotal.setText(format.format(total));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1306\n" + ex.getMessage(),
                    "Error en el calculo de los valores!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("CargoUnidadExtemporaneo jTFPrecioUnitarioCaretUpdate()", 1306, UserHome.getUsuario(), ex);
        }
    }//GEN-LAST:event_jTFPrecioUnitarioCaretUpdate

    private void jTFCantidadCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTFCantidadCaretUpdate
        DecimalFormat format = new DecimalFormat("0.000");
        try{
            
            if(!"".equals(this.jTFCantidad.getText()) && !"".equals(this.jTFTotal.getText()) && 
                    !"".equals(this.jTFPrecioUnitario.getText())){
            
                double total = Double.parseDouble(this.jTFPrecioUnitario.getText()) +
                        Double.parseDouble(this.jTFCantidad.getText());
                this.jTFTotal.setText(format.format(total));
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1307\n" + ex.getMessage(),
                    "Error en el calculo de los valores!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("CargoUnidadExtemporaneo jTFCantidadCaretUpdate()", 1307, UserHome.getUsuario(), ex);
        }
    }//GEN-LAST:event_jTFCantidadCaretUpdate

    private void jTFPrecioUnitarioFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFPrecioUnitarioFocusLost
        double cant = 0.00;
        try{
            cant = Double.parseDouble(this.valorOriginal);
        } catch(Exception ex) {
            cant = 0.00;
        }
        this.onFormatErrorSetValue(this.jTFPrecioUnitario, cant);
    }//GEN-LAST:event_jTFPrecioUnitarioFocusLost

    private void jTFCantidadFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCantidadFocusLost
        double cant = 0.00;
        try{
            cant = Double.parseDouble(this.valorOriginal);
        } catch(Exception ex) {
            cant = 0.00;
        }
        this.onFormatErrorSetValue(this.jTFCantidad, cant);
    }//GEN-LAST:event_jTFCantidadFocusLost

    private void jTFPrecioUnitarioFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFPrecioUnitarioFocusGained
        this.prepararCaptura(this.jTFPrecioUnitario);
    }//GEN-LAST:event_jTFPrecioUnitarioFocusGained

    private void jTFCantidadFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFCantidadFocusGained
        this.prepararCaptura(this.jTFCantidad);
    }//GEN-LAST:event_jTFCantidadFocusGained

    private void jMIBuscarParteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIBuscarParteActionPerformed
        this.buscar();
    }//GEN-LAST:event_jMIBuscarParteActionPerformed

    private void jTFOrdenReparacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTFOrdenReparacionFocusLost
        if(this.jTFOrdenReparacion != null && !"".equals(this.jTFOrdenReparacion.getText())){
            this.mostrarUnidadesPOrdenReparacion();
        } else if(this.jCBClaveUnidad != null) {
            this.jCBClaveUnidad.removeAllItems();
        }
    }//GEN-LAST:event_jTFOrdenReparacionFocusLost

    private void jMIBuscarProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIBuscarProveedorActionPerformed
        this.buscarProveedor();
    }//GEN-LAST:event_jMIBuscarProveedorActionPerformed

    public void agregar(){
        CargoDirectoDTO cargoDirecto = new CargoDirectoDTO();
        CargoUnidadDTO cargoUnidad =  new CargoUnidadDTO();
        try{
            CargoDirectoDAO accesoCargoDirecto = new CargoDirectoDAO();
            CargoUnidadDAO accesoCargoUnidad = new CargoUnidadDAO();
            RefaccionDAO accesoRefaccion = new RefaccionDAO();
            RefaccionDTO refaccionReq = new RefaccionDTO();
            OrdenReparacionDAO accesoOrdenReparacion = new OrdenReparacionDAO();
            OrdenReparacionDTO ordenReparacion = new OrdenReparacionDTO();
            UnidadTransporteDTO unidad = new UnidadTransporteDTO();
            UnidadTransporteDAO accesoUnidad = new UnidadTransporteDAO();
            FacturaDAO accesoFactura = new FacturaDAO();
            String nProveedor = ((this.jTFProveedor != null && !"".equals(this.jTFProveedor.getText())) ? this.jTFProveedor.getText() : "");
            String nOrdenReparacion = ((this.jTFOrdenReparacion != null && !"".equals(this.jTFOrdenReparacion.getText())) ? this.jTFOrdenReparacion.getText() : "");
            String folio = ((this.jTFFolio != null && !"".equals(this.jTFFolio.getText())) ? this.jTFFolio.getText() : "");
            String claveRefaccion = ((this.jTFClaveRefaccion != null && !"".equals(this.jTFClaveRefaccion.getText())) ? this.jTFClaveRefaccion.getText() : "");
            String claveUnidad = this.jCBClaveUnidad.getSelectedItem().toString();
            boolean agregarCargoDirectoExitoso = false;
            boolean agregarCargoUnidadExitoso = false;
            int numeroCargo = 0;
            int numeroProveedor = Integer.parseInt(nProveedor);
            int numeroOrdenReparacion = Integer.parseInt(nOrdenReparacion);
            
            //obtener clave de refaccion
            claveRefaccion = ((this.jTFClaveRefaccion != null && !"".equals(this.jTFClaveRefaccion.getText())) ? this.jTFClaveRefaccion.getText() : "");
            
            //obtener factura
            factura = accesoFactura.obtenerFactura(folio, numeroProveedor, true, true, true);
            
            //obtener orden de reparacion
            ordenReparacion = accesoOrdenReparacion.obtenerOrdenReparacion(numeroOrdenReparacion, true, true, true);
            
            //Validar que la unidad se encuentre en la orden de reparacion
            if(!this.validarTransportesPReparacion(this.jCBClaveUnidad.getSelectedItem().toString(), ordenReparacion)){
                JOptionPane.showMessageDialog(null, "La clave de Unidad de Transporte\nno pertenece "
                        + "a la orden de\nreparación indicada.\nVerifique los datos e inténtelo\notra vez."
                        , "Datos Erroneos!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            //verificar que el usuario tenga los privilegios para ejecutar la acción
            if(UserHome.getUsuario().getPrivilegio() != 1){
                JOptionPane.showMessageDialog(null, "El usuario activo no posee los privilegios\n"
                        + "necesarios para ejecutar la acción.", "Privilegios insuficientes", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //validar que exista la clave de refaccion en el inventario
            refaccionReq = accesoRefaccion.obtenerRefaccion(claveRefaccion, true, true);
            if(refaccionReq == null){
                JOptionPane.showMessageDialog(null, "La clave de refacción\nno existe en el inventario.",
                    "Refacción no econtrada!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }        
            
            //verificar que la factura exista
            if(factura == null){
                JOptionPane.showMessageDialog(null, "La factura ingresada no existe\n", 
                        "Factura inexistente", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            //validar que la orden de reparacion exista
            if(ordenReparacion == null){
                JOptionPane.showMessageDialog(null, "La orden de reparación seleccionada\n"
                        + "no existe.", "Operación no válida", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //validar que la orden de reparacion no este cancelada
            if(!ordenReparacion.isStatus()){
                JOptionPane.showMessageDialog(null, "La orden de reparación seleccionada\n"
                        + "se encuentra cancelada.", "Operación no válida", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            //validar que el campo de orden de reparación no se encuentre vacío
            if(this.jTFOrdenReparacion.getText() == null || "".equals(this.jTFOrdenReparacion.getText())){
                JOptionPane.showMessageDialog(null, "El campo de número de orden\nde reparación no contiene datos.", 
                        "Faltan datos", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            //validar que el campo de folio de factura no se encuentre vacío
            if(this.jTFFolio.getText() == null || "".equals(this.jTFFolio.getText())){
                JOptionPane.showMessageDialog(null, "El campo de folio de factura no contiene datos.", 
                        "Faltan datos", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            
            //Agregar los datos de cargo directo
            cargoDirecto.setCantidad(Double.parseDouble(this.jTFCantidad.getText()));
            cargoDirecto.setFactura(factura);
            cargoDirecto.setIva(0.0);
            //cargoDirecto.setNumeroCargoDirecto();//No se agrega el numero de cargo directo por que se genera automaticamente
            cargoDirecto.setOrdenReparacion(ordenReparacion);
            cargoDirecto.setPrecioUnitario(Double.parseDouble(this.jTFPrecioUnitario.getText()));
            cargoDirecto.setRefaccion(refaccionReq);
            cargoDirecto.setStatus(true);
            cargoDirecto.setSubtotal(0.0);
            cargoDirecto.setTotal(Double.parseDouble(this.jTFTotal.getText()));
            cargoDirecto.setUsuario(UserHome.getUsuario());
            numeroCargo = accesoCargoDirecto.obtenerUltimoCargoDirecto() + 1;
            cargoDirecto.setNumeroCargoDirecto(numeroCargo);
            
            //Validar que la cantidad sea válida
            if(cargoDirecto.getCantidad() < 1){
                JOptionPane.showMessageDialog(null, "La cantidad ingresada no es válida",
                    "Cantidad inválida!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            //Agregar los datos de cargo operador
            unidad = accesoUnidad.obtenerUnidad(claveUnidad, true, true, true);
            cargoUnidad = new CargoUnidadDTO(1, unidad, cargoDirecto);
            
            agregarCargoDirectoExitoso = accesoCargoDirecto.agregarCargoDirecto(cargoDirecto);
            agregarCargoUnidadExitoso = accesoCargoUnidad.agregarCargoUnidad(cargoUnidad);
            
            if(!agregarCargoUnidadExitoso && agregarCargoDirectoExitoso){
                boolean reparacionExitosa = false;
                reparacionExitosa = accesoCargoDirecto.repararErrorClasificacionCargoDirecto(cargoDirecto, accesoCargoDirecto.obtenerUltimoCargoDirecto() + 1);
                if(reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 1311\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(cargoDirecto.toString(), 1311, UserHome.getUsuario(), new Exception("#NA"));
                }
            }
            
            if(!agregarCargoUnidadExitoso){
                boolean reparacionExitosa = false;
                reparacionExitosa = accesoCargoUnidad.repararErrorAgregarCargoUnidad();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 1312\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(cargoUnidad.toString(), 1312, UserHome.getUsuario(), new Exception("#NA"));
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                 }
            }
            
            this.limpiar();
            this.controlFacturas.actualizarTablas();
        } catch (SQLException ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 1313\n" + ex.getMessage(),
                        "Error al guardar datos en la BD!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(cargoDirecto.toString() + cargoUnidad.toString(), 1313, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                CargoUnidadDAO accesoCargoUnidad = new CargoUnidadDAO();
                reparacionExitosa = accesoCargoUnidad.repararErrorAgregarCargoUnidad();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 1314\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(cargoDirecto.toString() + cargoUnidad.toString(), 1314, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(CargoUnidad.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (Exception ex){
            try {
                JOptionPane.showMessageDialog(null, "Código error: 1315\n" + ex.getMessage(),
                        "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(cargoDirecto.toString() + cargoUnidad.toString(), 1315, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                CargoUnidadDAO accesoCargoUnidad = new CargoUnidadDAO();
                reparacionExitosa = accesoCargoUnidad.repararErrorAgregarCargoUnidad();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 1316\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(cargoDirecto.toString() + cargoUnidad.toString(), 1316, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(CargoUnidad.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        
    }
    
    public void limpiar(){
        try{
            this.jCBClaveUnidad.removeAllItems();
            this.jTFCantidad.setText("0.000");
            this.jTFClaveRefaccion.setText(null);
            this.jTFPrecioUnitario.setText("0.000");
            this.jTFTotal.setText("0.000");
            this.jTFFolio.setText(null);
            this.jTFProveedor.setText(null);
            this.jTFOrdenReparacion.setText(null);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 1317\n" + ex.getMessage(),
                    "Error al limpiar los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("CargoUnidadExtemporaneo limpiar()", 1317, UserHome.getUsuario(), ex);
        }
    }
    
    private boolean validarTransportesPReparacion(String claveTransporte, OrdenReparacionDTO reparacion){
        try{
            TransporteReparacionDAO accesoTransporteReparacion = new TransporteReparacionDAO();
            List<TransporteReparacionDTO> transportes = accesoTransporteReparacion.
                    obtenerTransportesPReparacion(reparacion, true, true, true, true);

            for(TransporteReparacionDTO transporte : transportes){
                if(claveTransporte.equals(transporte.getTransporte().getClave())){
                    return true;
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1318\n" + ex.getMessage(),
                    "Error al obtener datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("CargoUnidadExtemporaneo validarTransportesPReparacion()", 1318, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1319\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("CargoUnidadExtemporaneo validarTransportesPReparacion()", 1319, UserHome.getUsuario(), ex);
        }
        return false;
    }
    
    private void onFormatErrorSetValue(javax.swing.JTextField campo, double value){
        DecimalFormat formatD  = new DecimalFormat("0.000");
        try{
            double n = Double.parseDouble(campo.getText());
            campo.setText(formatD.format(n));
        } catch (Exception ex) {
            campo.setText(formatD.format(value));
        }
    }
    
    private void onFormatErrorSetValue(javax.swing.JTextField campo, int value){
        try{
            int n = (int)(Double.parseDouble(campo.getText()));
            campo.setText(Integer.toString(n));
        } catch (Exception ex) {
            campo.setText(Integer.toString(value));
        }
    }
    
    private void prepararCaptura(javax.swing.JTextField campo){
        try{
            this.valorOriginal = ((campo != null && !"".equals(campo.getText())) ? campo.getText() : "");
            campo.setText(null);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 1320\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("CargoUnidadExtemporaneo prepararCaptura()", 1320, UserHome.getUsuario(), ex);
        }
    }
    
    private void buscar(){
        BuscarCampoSimple buscarCampo = new BuscarCampoSimple();
        buscarCampo.setTipoRespuesta(1);
        buscarCampo.setRecibirTexto(this.jTFClaveRefaccion);
        buscarCampo.setLocationRelativeTo(null);
        buscarCampo.setVisible(true);
    }
    
    private void mostrarUnidadesPOrdenReparacion(){
        try{
            this.jCBClaveUnidad.removeAllItems();
            
            if(this.jTFOrdenReparacion == null || "".equals(this.jTFOrdenReparacion.getText())){
                return;
            }
            int numeroOrden = Integer.parseInt(((this.jTFOrdenReparacion != null && !"".equals(this.jTFOrdenReparacion.getText())) ? this.jTFOrdenReparacion.getText() : ""));
            OrdenReparacionDTO ordenReparacion = new OrdenReparacionDTO();
            OrdenReparacionDAO accesoReparacion = new OrdenReparacionDAO();
            TransporteReparacionDAO accesoTReparacion = new TransporteReparacionDAO();
            ordenReparacion = accesoReparacion.obtenerOrdenReparacion(numeroOrden, true, true, true);
            List<TransporteReparacionDTO> transportes;
            
            if(ordenReparacion == null){
                JOptionPane.showMessageDialog(null, "No existe la orden de reparación especificada.",
                        "No existe la orden de reparación", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            transportes = accesoTReparacion.obtenerTransportesPReparacion(ordenReparacion, true, true, true, true);
            
            if(transportes == null){
                JOptionPane.showMessageDialog(null, "No se encontraron unidades\nde transporte asociadas\na la orden de reparación.",
                        "No se encontraron unidades de transporte", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            
            if(this.jTFOrdenReparacion != null && !"".equals(this.jTFOrdenReparacion.getText())){
                for(TransporteReparacionDTO transporte : transportes){
                    this.jCBClaveUnidad.addItem(transporte.getTransporte().getClave());
                }
            }
            
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1321\n" + ex.getMessage(),
                        "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("CargoUnidadExtemporaneo mostrarUnidadesPOrdenReparacion()", 1321, UserHome.getUsuario(), ex);
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1322\n" + ex.getMessage(),
                        "Error al obtener los datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("CargoUnidadExtemporaneo mostrarUnidadesPOrdenReparacion()", 1322, UserHome.getUsuario(), ex);
        }
    }
    
    private void buscarProveedor(){
        BuscarCampoSimple buscarCampo = new BuscarCampoSimple();
        buscarCampo.setTipoRespuesta(3);
        buscarCampo.setRecibirTexto(this.jTFProveedor);
        buscarCampo.setLocationRelativeTo(null);
        buscarCampo.setVisible(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CargoUnidadExtemporaneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CargoUnidadExtemporaneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CargoUnidadExtemporaneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CargoUnidadExtemporaneo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CargoUnidadExtemporaneo().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregarCargo;
    private javax.swing.JComboBox jCBClaveUnidad;
    private javax.swing.JLabel jLCantidad;
    private javax.swing.JLabel jLClaveRefaccion;
    private javax.swing.JLabel jLClaveUnidad;
    private javax.swing.JLabel jLFolio;
    private javax.swing.JLabel jLLogo;
    private javax.swing.JLabel jLNumeroCargoTransporte;
    private javax.swing.JLabel jLOrdenReparacion;
    private javax.swing.JLabel jLPrecioUnitario;
    private javax.swing.JLabel jLProveedor;
    private javax.swing.JLabel jLTotal;
    private javax.swing.JLabel jLUsuario;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIAgregar;
    private javax.swing.JMenuItem jMIBuscarParte;
    private javax.swing.JMenuItem jMIBuscarProveedor;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JTextField jTFCantidad;
    private javax.swing.JTextField jTFCargoEspecial;
    private javax.swing.JTextField jTFClaveRefaccion;
    private javax.swing.JTextField jTFFolio;
    private javax.swing.JTextField jTFOrdenReparacion;
    private javax.swing.JTextField jTFPrecioUnitario;
    private javax.swing.JTextField jTFProveedor;
    private javax.swing.JTextField jTFTotal;
    private javax.swing.JTextField jTFUsuario;
    // End of variables declaration//GEN-END:variables

}
