/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.MarcaMotorDTO;
import beans.MarcaUnidadDTO;
import beans.TipoUnidadDTO;
import beans.UnidadTransporteDTO;
import data.LazyQueryDAO;
import data.MarcaMotorDAO;
import data.MarcaUnidadDAO;
import data.TipoUnidadDAO;
import data.UnidadTransporteDAO;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import support.DBConnection;

/**
 *
 * @author David Israel
 */
public class ControlUnidades extends javax.swing.JFrame {

    boolean permitirCambiarImagen;
    
    /**
     * Creates new form ControlUnidades
     */
    public ControlUnidades() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.obtenerMarcas();
            this.obtenerUnidades();
            this.obtenerTiposUnidades();
            this.obtenerMarcasMotores();
            this.estadoBotonesInicio();
            this.jTCatalogoUnidades.setSelectionMode(0);
            this.permitirCambiarImagen = false;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1014\n" + ex.getMessage(),
                    "Error al iniciar ventana de\nControl de Unidades de Transporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlUnidades()", 1014, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    /**
     * Change the default icon image in the JFrame.
     * 
     * @return an icon for the JFrame.
     */
    @Override
    public Image getIconImage() {
        try{
            Image retValue = Toolkit.getDefaultToolkit().
                    getImage(ClassLoader.getSystemResource("icons/Truck-UnitControl.png"));
            return retValue;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1015\n" + ex.getMessage(),
                    "Error al obtener el ícono de la\nventana!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlUnidades getIconImage()", 1015, UserHome.getUsuario(), ex);
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLFechaAlta = new javax.swing.JLabel();
        jTFFechaAlta = new javax.swing.JTextField();
        jLUsuario = new javax.swing.JLabel();
        jTFUsuario = new javax.swing.JTextField();
        jLClave = new javax.swing.JLabel();
        jTFClave = new javax.swing.JTextField();
        jLVIN = new javax.swing.JLabel();
        jTFVIN = new javax.swing.JTextField();
        jLMarca = new javax.swing.JLabel();
        jLTipoUnidad = new javax.swing.JLabel();
        jLPlacas = new javax.swing.JLabel();
        jTFPlacas = new javax.swing.JTextField();
        jLAno = new javax.swing.JLabel();
        jTFModelo = new javax.swing.JTextField();
        jBDarBaja = new javax.swing.JButton();
        jBAgregar = new javax.swing.JButton();
        jBModificar = new javax.swing.JButton();
        jPCatalogoUnidades = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTCatalogoUnidades = new javax.swing.JTable();
        jCBMarca = new javax.swing.JComboBox();
        jCBTipoUnidad = new javax.swing.JComboBox();
        jLColor = new javax.swing.JLabel();
        jTFColor = new javax.swing.JTextField();
        jCBMarcaMotor = new javax.swing.JComboBox();
        jLMarcaMotor = new javax.swing.JLabel();
        jLModeloMotor = new javax.swing.JLabel();
        jTFModeloMotor = new javax.swing.JTextField();
        jLNSerieMotor = new javax.swing.JLabel();
        jTFNSerieMotor = new javax.swing.JTextField();
        jLCPL = new javax.swing.JLabel();
        jTFCPL = new javax.swing.JTextField();
        jPImage = new javax.swing.JPanel();
        jLImage = new javax.swing.JLabel();
        jLNumeroEconomico = new javax.swing.JLabel();
        jTFNumeroEconomico = new javax.swing.JTextField();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAgregar = new javax.swing.JMenuItem();
        jMIModificar = new javax.swing.JMenuItem();
        jMIDarBaja = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMReportes = new javax.swing.JMenu();
        jMICatalogoUnidades = new javax.swing.JMenuItem();
        jMICatalogoUnidadesCBajas = new javax.swing.JMenuItem();
        jMIReporteReparacionesPUnidad = new javax.swing.JMenuItem();
        jMIReporteCostoReparaciones = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Unidades");
        setIconImage(getIconImage());

        jLFechaAlta.setText("Fecha de Alta:");

        jTFFechaAlta.setEditable(false);
        jTFFechaAlta.setFocusable(false);

        jLUsuario.setText("Usuario:");

        jTFUsuario.setEditable(false);
        jTFUsuario.setFocusable(false);

        jLClave.setText("Clave:");

        jLVIN.setText("VIN:");

        jLMarca.setText("Marca:");

        jLTipoUnidad.setText("Tipo de Unidad");

        jLPlacas.setText("Placas:");

        jLAno.setText("Modelo:");

        jBDarBaja.setText("Dar de Baja");
        jBDarBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDarBajaActionPerformed(evt);
            }
        });

        jBAgregar.setText("Agregar");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });

        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jPCatalogoUnidades.setBorder(javax.swing.BorderFactory.createTitledBorder("Catálogo de Unidades"));

        jTCatalogoUnidades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Clave", "Marca", "Tipo", "Placas", "Modelo", "No Economico"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTCatalogoUnidades.getTableHeader().setReorderingAllowed(false);
        jTCatalogoUnidades.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTCatalogoUnidadesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTCatalogoUnidades);
        if (jTCatalogoUnidades.getColumnModel().getColumnCount() > 0) {
            jTCatalogoUnidades.getColumnModel().getColumn(0).setMinWidth(90);
            jTCatalogoUnidades.getColumnModel().getColumn(0).setPreferredWidth(90);
            jTCatalogoUnidades.getColumnModel().getColumn(0).setMaxWidth(90);
            jTCatalogoUnidades.getColumnModel().getColumn(3).setMinWidth(100);
            jTCatalogoUnidades.getColumnModel().getColumn(3).setPreferredWidth(100);
            jTCatalogoUnidades.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPCatalogoUnidadesLayout = new javax.swing.GroupLayout(jPCatalogoUnidades);
        jPCatalogoUnidades.setLayout(jPCatalogoUnidadesLayout);
        jPCatalogoUnidadesLayout.setHorizontalGroup(
            jPCatalogoUnidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCatalogoUnidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPCatalogoUnidadesLayout.setVerticalGroup(
            jPCatalogoUnidadesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCatalogoUnidadesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLColor.setText("Color:");

        jLMarcaMotor.setText("Marca Motor:");

        jLModeloMotor.setText("Modelo Motor:");

        jLNSerieMotor.setText("No. Serie Motor:");

        jLCPL.setText("CPL:");

        jPImage.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 102, 102), 1, true));

        jLImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/AGS TRANSPORTES 1.JPG"))); // NOI18N
        jLImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UnidadTransporteImagenMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPImageLayout = new javax.swing.GroupLayout(jPImage);
        jPImage.setLayout(jPImageLayout);
        jPImageLayout.setHorizontalGroup(
            jPImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPImageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLImage, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPImageLayout.setVerticalGroup(
            jPImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPImageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLImage, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLNumeroEconomico.setText("N° Económico:");

        jMArchivo.setText("Archivo");

        jMIAgregar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIAgregar.setText("Agregar");
        jMIAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregar);

        jMIModificar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMIModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Modify-16.png"))); // NOI18N
        jMIModificar.setText("Modificar");
        jMIModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIModificarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIModificar);

        jMIDarBaja.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMIDarBaja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Trash-16.png"))); // NOI18N
        jMIDarBaja.setText("Dar de Baja");
        jMIDarBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIDarBajaActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIDarBaja);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMBMenu.add(jMEditar);

        jMReportes.setText("Reportes");

        jMICatalogoUnidades.setText("Catálogo de Unidades");
        jMICatalogoUnidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICatalogoUnidadesActionPerformed(evt);
            }
        });
        jMReportes.add(jMICatalogoUnidades);

        jMICatalogoUnidadesCBajas.setText("Catálogo de Unidades con Bajas");
        jMICatalogoUnidadesCBajas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICatalogoUnidadesCBajasActionPerformed(evt);
            }
        });
        jMReportes.add(jMICatalogoUnidadesCBajas);

        jMIReporteReparacionesPUnidad.setText("Reporte Reparaciones P/Unidad");
        jMIReporteReparacionesPUnidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIReporteReparacionesPUnidadActionPerformed(evt);
            }
        });
        jMReportes.add(jMIReporteReparacionesPUnidad);

        jMIReporteCostoReparaciones.setText("Reporte Costo Reparaciones");
        jMIReporteCostoReparaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIReporteCostoReparacionesActionPerformed(evt);
            }
        });
        jMReportes.add(jMIReporteCostoReparaciones);

        jMBMenu.add(jMReportes);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPCatalogoUnidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBDarBaja))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLPlacas)
                                    .addComponent(jLMarca)
                                    .addComponent(jLClave)
                                    .addComponent(jLFechaAlta)
                                    .addComponent(jLColor)
                                    .addComponent(jLModeloMotor)
                                    .addComponent(jLCPL))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFFechaAlta)
                                    .addComponent(jTFClave)
                                    .addComponent(jTFPlacas, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(jCBMarca, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTFColor)
                                    .addComponent(jTFModeloMotor)
                                    .addComponent(jTFCPL))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLUsuario)
                                    .addComponent(jLVIN)
                                    .addComponent(jLTipoUnidad)
                                    .addComponent(jLAno)
                                    .addComponent(jLMarcaMotor)
                                    .addComponent(jLNSerieMotor)
                                    .addComponent(jLNumeroEconomico))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFUsuario)
                                    .addComponent(jTFVIN)
                                    .addComponent(jTFModelo, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(jCBTipoUnidad, 0, 200, Short.MAX_VALUE)
                                    .addComponent(jCBMarcaMotor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jTFNSerieMotor)
                                    .addComponent(jTFNumeroEconomico))))
                        .addGap(18, 18, 18)
                        .addComponent(jPImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAgregar, jBDarBaja, jBModificar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLFechaAlta)
                            .addComponent(jTFFechaAlta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLUsuario)
                            .addComponent(jTFUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLClave)
                            .addComponent(jTFClave, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLNumeroEconomico)
                            .addComponent(jTFNumeroEconomico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLMarca)
                                    .addComponent(jCBMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLPlacas)
                                    .addComponent(jTFPlacas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLColor)
                                    .addComponent(jTFColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLModeloMotor)
                                    .addComponent(jTFModeloMotor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLCPL)
                                    .addComponent(jTFCPL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLVIN)
                                    .addComponent(jTFVIN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLTipoUnidad)
                                    .addComponent(jCBTipoUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLAno)
                                    .addComponent(jTFModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jCBMarcaMotor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLMarcaMotor))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLNSerieMotor)
                                    .addComponent(jTFNSerieMotor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addComponent(jPImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBDarBaja)
                    .addComponent(jBModificar)
                    .addComponent(jBAgregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPCatalogoUnidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTCatalogoUnidadesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTCatalogoUnidadesMouseClicked
        //this.limpiar();
        this.obtenerUnidad();
    }//GEN-LAST:event_jTCatalogoUnidadesMouseClicked

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jBDarBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDarBajaActionPerformed
        this.baja();
    }//GEN-LAST:event_jBDarBajaActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jMIAgregarActionPerformed

    private void jMIModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jMIModificarActionPerformed

    private void jMIDarBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIDarBajaActionPerformed
        this.baja();
    }//GEN-LAST:event_jMIDarBajaActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jMICatalogoUnidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICatalogoUnidadesActionPerformed
        this.generarCatalogoUnidades();
    }//GEN-LAST:event_jMICatalogoUnidadesActionPerformed

    private void jMICatalogoUnidadesCBajasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICatalogoUnidadesCBajasActionPerformed
        this.generarCatalogoUnidadesCBajas();
    }//GEN-LAST:event_jMICatalogoUnidadesCBajasActionPerformed

    private void jMIReporteReparacionesPUnidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIReporteReparacionesPUnidadActionPerformed
        ReporteReparacionesPUnidad reparacionesUnidad = new ReporteReparacionesPUnidad();
        reparacionesUnidad.setLocationRelativeTo(null);
        reparacionesUnidad.setVisible(true);
    }//GEN-LAST:event_jMIReporteReparacionesPUnidadActionPerformed

    private void jMIReporteCostoReparacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIReporteCostoReparacionesActionPerformed
        ReporteCostoReparaciones costoReparaciones = new ReporteCostoReparaciones();
        costoReparaciones.setLocationRelativeTo(null);
        costoReparaciones.setVisible(true);
    }//GEN-LAST:event_jMIReporteCostoReparacionesActionPerformed

    private void UnidadTransporteImagenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UnidadTransporteImagenMouseClicked
        if(permitirCambiarImagen){
            
        }
    }//GEN-LAST:event_UnidadTransporteImagenMouseClicked
    
    public void agregar(){
        UnidadTransporteDTO unidad = new UnidadTransporteDTO();
        try {
            if(!validaciones()){
                return;
            }
            
            String gr[] = this.jCBMarca.getSelectedItem().toString().split("#");
            int marca = Integer.parseInt(gr[0]);
            
            gr = this.jCBMarcaMotor.getSelectedItem().toString().split("#");
            int marcaMotor = Integer.parseInt(gr[0]);
            
            UnidadTransporteDAO acceso = new UnidadTransporteDAO();
            unidad.setClave(this.jTFClave.getText());
            unidad.setNoEconomico(this.jTFNumeroEconomico.getText());
            unidad.setVin(this.jTFVIN.getText());
            unidad.setMarcaUnidad(new MarcaUnidadDAO().obtenerMarcaUnidad(marca, true, true));
            unidad.setTipoUnidad(new TipoUnidadDAO().obtenerTipoUnidad(this.jCBTipoUnidad.getSelectedIndex() + 1, true, true));
            unidad.setPlacas(this.jTFPlacas.getText());
            unidad.setModelo(this.jTFModelo.getText());
            unidad.setColor(this.jTFColor.getText());
            unidad.setMarcaMotor(new MarcaMotorDAO().obtenerMarcaMotor(marcaMotor, true, true));
            unidad.setModeloMotor(this.jTFModeloMotor.getText());
            unidad.setNoSerieMotor(this.jTFNSerieMotor.getText());
            unidad.setCpl(this.jTFCPL.getText());
        
            unidad.setUsuario(UserHome.getUsuario());
            acceso.altaUnidad(unidad);
        
            this.limpiar();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1016\n" + ex.getMessage()
                    + "\nError al intentar guardar la Unidad de Transporte de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(unidad.toString(), 1016, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1017\n" + ex.getMessage()
                    + "\nError al intentar guardar la Unidad de Transporte.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(unidad.toString(), 1017, UserHome.getUsuario(), ex);
        }
    }
    
    public void modificar(){
        UnidadTransporteDTO unidad = new UnidadTransporteDTO();
        try {
            if(!validaciones()){
                return;
            }
            
            String gr[] = this.jCBMarca.getSelectedItem().toString().split("#");
            int marca = Integer.parseInt(gr[0]);
            UnidadTransporteDAO acceso = new UnidadTransporteDAO();
        
            gr = this.jCBMarcaMotor.getSelectedItem().toString().split("#");
            int marcaMotor = Integer.parseInt(gr[0]);
            
            unidad.setClave(this.jTFClave.getText());
            unidad.setNoEconomico(this.jTFNumeroEconomico.getText());
            unidad.setVin(this.jTFVIN.getText());
            unidad.setMarcaUnidad(new MarcaUnidadDAO().obtenerMarcaUnidad(marca, true, true));
            unidad.setTipoUnidad(new TipoUnidadDAO().obtenerTipoUnidad(this.jCBTipoUnidad.getSelectedIndex() + 1, true, true));
            unidad.setPlacas(this.jTFPlacas.getText());
            unidad.setModelo(this.jTFModelo.getText());
            unidad.setColor(this.jTFColor.getText());
            unidad.setMarcaMotor(new MarcaMotorDAO().obtenerMarcaMotor(marcaMotor, true, true));
            unidad.setModeloMotor(this.jTFModeloMotor.getText());
            unidad.setNoSerieMotor(this.jTFNSerieMotor.getText());
            unidad.setCpl(this.jTFCPL.getText());
        
            unidad.setUsuario(UserHome.getUsuario());
        
            acceso.modificarUnidad(unidad);
        
            this.limpiar();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1018\n" + ex.getMessage()
                    + "\nError al intentar modificar la Unidad de Transporte en la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(unidad.toString(), 1018, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1019\n" + ex.getMessage()
                    + "\nError al intentar modificar la Unidad de Transporte.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(unidad.toString(), 1019, UserHome.getUsuario(), ex);
        }
    }
    
    public void baja(){
        UnidadTransporteDTO unidad = new UnidadTransporteDTO();
        try {
            if("".equals(this.jTFClave.getText()) || this.jTFClave == null){
                JOptionPane.showMessageDialog(this, "Aún no se especifica una clave\nde unidad.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            String gr[] = this.jCBMarca.getSelectedItem().toString().split("#");
            UnidadTransporteDAO acceso = new UnidadTransporteDAO();
        
            unidad.setClave(this.jTFClave.getText());
            unidad = acceso.obtenerUnidad(unidad.getClave(), true, true, true);
            unidad.setTipoUnidad(new TipoUnidadDAO().obtenerTipoUnidad(this.jCBTipoUnidad.getSelectedIndex() + 1, true, true));
            
            //Verificar que la unidad no tenga órdenes de reparación pendientes
            if(acceso.hayReparacionesPendientes(unidad, true, true)){
                JOptionPane.showMessageDialog(null, "La unidad que se está dando de baja\ntiene órdenes de reparación pendientes.",
                    "No se puede efectuar la operación!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
        
            unidad.setUsuario(UserHome.getUsuario());
        
            acceso.eliminarUnidad(unidad);
        
            this.limpiar();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1020\n" + ex.getMessage()
                    + "\nError al intentar dar de baja\nla Unidad de Transporte en la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(unidad.toString(), 1020, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1021\n" + ex.getMessage()
                    + "\nError al intentar dar de baja la\nUnidad de Transporte.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(unidad.toString(), 1021, UserHome.getUsuario(), ex);
        }
    }
    
    public void limpiar(){
        try{
            this.jTFCPL.setText(null);
            this.jTFClave.setText(null);
            this.jTFColor.setText(null);
            this.jTFFechaAlta.setText(null);
            this.jTFModelo.setText(null);
            this.jTFModeloMotor.setText(null);
            this.jTFNSerieMotor.setText(null);
            this.jTFNumeroEconomico.setText(null);
            this.jTFPlacas.setText(null);
            this.jTFVIN.setText(null);
            this.jTFUsuario.setText(UserHome.getUsuario().getNombre());
            DefaultTableModel modelo = (DefaultTableModel) this.jTCatalogoUnidades.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            this.obtenerUnidades();
            this.jCBMarca.setSelectedIndex(0);
            this.jCBTipoUnidad.setSelectedIndex(0);
            this.jCBMarcaMotor.setSelectedIndex(0);
            this.estadoBotonesInicio();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1022\n" + ex.getMessage()
                    + "\nError al intentar limpiar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlUnidades limpiar()", 1022, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerUnidades(){
        String mensajeError = "";
        try {
            DefaultTableModel modelo = (DefaultTableModel) this.jTCatalogoUnidades.getModel();
            List<UnidadTransporteDTO> transportes = null;
            transportes = new UnidadTransporteDAO().obtenerUnidades(true);
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            for(UnidadTransporteDTO transporte : transportes){
                Object datos[] = {transporte.getClave(), transporte.getMarcaUnidad().getNombre(), 
                    transporte.getTipoUnidad().getNombre(), transporte.getPlacas(),
                    transporte.getModelo(), transporte.getNoEconomico()};
                mensajeError = transporte.toString();
                modelo.addRow(datos);
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1023\n" + ex.getMessage()
                    + "\nError al intentar obtener las Unidades de Transporte de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(mensajeError, 1023, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1024\n" + ex.getMessage()
                    + "\nError al intentar convertir las Unidades de Transporte.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 1024, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerUnidad(){
        UnidadTransporteDTO transporte = new UnidadTransporteDTO();
        try{
            int index = this.jTCatalogoUnidades.getSelectedRow();
            String clave = null;
            int indexGrupo = 0;
            String grupo = null;
            String gr[];

            if(index > -1){
                clave = ((this.jTCatalogoUnidades.getValueAt(index, 0) != null) ? this.jTCatalogoUnidades.getValueAt(index, 0).toString() : "");
                if(clave != null) {
                    try {
                        transporte = new UnidadTransporteDAO().obtenerUnidad(clave, true, true, true);
                    } catch(SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Código error: 1025\n" + ex.getMessage()
                                + "\nError al intentar obtener la Unidad de Transporte de la BD.",
                                "Error!!!", JOptionPane.ERROR_MESSAGE); 
                        ErrorLogger.scribirLog(transporte.toString() + "_clave_" + clave, 1025, UserHome.getUsuario(), ex);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Código error: 1026\n" + ex.getMessage()
                                + "\nError al intentar convertir la Unidad de Transporte.",
                                "Error!!!", JOptionPane.ERROR_MESSAGE); 
                        ErrorLogger.scribirLog(transporte.toString() + "_clave_" + clave, 1026, UserHome.getUsuario(), ex);
                    }
                    try {
                        cargarImagenUnidadDB(transporte);
                    } catch(SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Código error: 2110\n" + ex.getMessage()
                                + "\nError al intentar obtener la imagen de la\nUnidad de Transporte de la BD.",
                                "Error!!!", JOptionPane.ERROR_MESSAGE); 
                        ErrorLogger.scribirLog(transporte.toString() + "_clave_" + clave, 2110, UserHome.getUsuario(), ex);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Código error: 2111\n" + ex.getMessage()
                                + "\nError al intentar convertir la Unidad de Transporte.",
                                "Error!!!", JOptionPane.ERROR_MESSAGE); 
                        ErrorLogger.scribirLog(transporte.toString() + "_clave_" + clave, 2111, UserHome.getUsuario(), ex);
                    }
                    
                    this.jTFCPL.setText(transporte.getCpl());
                    this.jTFClave.setText(transporte.getClave());
                    this.jTFColor.setText(transporte.getColor());
                    this.jTFFechaAlta.setText(transporte.getFechaInicio().toString());
                    this.jTFModelo.setText(transporte.getModelo());
                    this.jTFModeloMotor.setText(transporte.getModeloMotor());
                    this.jTFNSerieMotor.setText(transporte.getNoSerieMotor());
                    this.jTFNumeroEconomico.setText(transporte.getNoEconomico());
                    this.jTFPlacas.setText(transporte.getPlacas());
                    this.jTFVIN.setText(transporte.getVin());
                    this.jTFUsuario.setText(transporte.getUsuario().getNombre() + " " + transporte.getUsuario().getApellidos());

                    this.jCBTipoUnidad.setSelectedIndex(transporte.getTipoUnidad().getIdTipo() - 1);
                    this.jCBMarca.setSelectedIndex(0);
                    do{
                        gr = this.jCBMarca.getItemAt(indexGrupo).toString().split("#");
                        grupo = gr[1];
                        indexGrupo++;
                    } while(grupo == null ? transporte.getMarcaUnidad().getNombre() != null : !grupo.equals(transporte.getMarcaUnidad().getNombre()));
                    if(indexGrupo > 0){
                        this.jCBMarca.setSelectedIndex(indexGrupo - 1);
                    }
                    
                    grupo = null;
                    int indexMMotor = 0;
                    this.jCBMarcaMotor.setSelectedIndex(0);
                    do{
                        gr = this.jCBMarcaMotor.getItemAt(indexMMotor).toString().split("#");
                        grupo = gr[1];
                        indexMMotor++;
                    } while(grupo == null ? transporte.getMarcaMotor().getNombre() != null : !grupo.equals(transporte.getMarcaMotor().getNombre()));
                    if(indexMMotor > 0){
                        this.jCBMarcaMotor.setSelectedIndex(indexMMotor - 1);
                    }
                    
                    this.estadoBotonesClicUnidades();
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1027\n" + ex.getMessage()
                                + "\nError al intentar convertir las Unidades de Transporte.",
                                "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(transporte.toString(), 1027, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerMarcas(){
        String mensajeError = "";
        try {
            List<MarcaUnidadDTO> marcas = null;
            marcas = new MarcaUnidadDAO().obtenerMarcasUnidades();
            while(this.jCBMarca.getItemCount() > 0){
                this.jCBMarca.removeItemAt(this.jCBMarca.getItemCount() - 1);
            }
            for(MarcaUnidadDTO marca : marcas){
                Object datos = Integer.toString(marca.getIdMarca()) + "#" + marca.getNombre();
                mensajeError = marca.toString();
                this.jCBMarca.addItem(datos);
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1028\n" + ex.getMessage()
                    + "\nError al intentar obtener las Marcas de Transporte de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 1028, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1029\n" + ex.getMessage()
                    + "\nError al intentar convertir las Marcas de Transporte.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 1029, UserHome.getUsuario(), ex);
        }
    } 
    
    private void obtenerMarcasMotores(){
        String mensajeError = "";
        try {
            List<MarcaMotorDTO> marcas = new MarcaMotorDAO().obtenerMarcasMotores();
            while(this.jCBMarcaMotor.getItemCount() > 0){
                this.jCBMarcaMotor.removeItemAt(this.jCBMarcaMotor.getItemCount() - 1);
            }
            for(MarcaMotorDTO marca : marcas){
                Object datos = Integer.toString(marca.getIdMarcaMotor()) + "#" + marca.getNombre();
                mensajeError = marca.toString();
                this.jCBMarcaMotor.addItem(datos);
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1028\n" + ex.getMessage()
                    + "\nError al intentar obtener las Marcas de Transporte de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 1028, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1029\n" + ex.getMessage()
                    + "\nError al intentar convertir las Marcas de Transporte.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 1029, UserHome.getUsuario(), ex);
        }
    } 
    
    private void estadoBotonesInicio(){
        try{
            this.jBAgregar.setEnabled(true);
            this.jBDarBaja.setEnabled(false);
            this.jBModificar.setEnabled(false);

            this.jMIAgregar.setEnabled(true);
            this.jMIDarBaja.setEnabled(false);
            this.jMIModificar.setEnabled(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1030\n" + ex.getMessage(),
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlUnidades estadoBotonesInicio()", 1030, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesClicUnidades(){
        try{
            this.jBAgregar.setEnabled(false);
            this.jBDarBaja.setEnabled(true);
            this.jBModificar.setEnabled(true);

            this.jMIAgregar.setEnabled(false);
            this.jMIDarBaja.setEnabled(true);
            this.jMIModificar.setEnabled(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1031\n" + ex.getMessage(),
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlUnidades estadoBotonesClicUnidades()", 1031, UserHome.getUsuario(), ex);
        }
    }
    
    private void generarCatalogoUnidades(){
        try {
            String reportPath = "/reports/ReporteTransportesRemex.jasper";
            String logoPath = "/icons/Logo Efectivo Negro.png";
            Locale locale = new Locale("en", "US");
            InputStream jasperStream = getClass().getResourceAsStream(reportPath);
            JasperReport jReport = (JasperReport)JRLoader.loadObject(jasperStream);
            JasperPrint jPrint = null;
            HashMap parameters = new HashMap();
            LazyQueryDAO lazyQ = new LazyQueryDAO();
            parameters.put(JRParameter.REPORT_LOCALE, locale);
            parameters.put("LOGO", this.getClass().getResourceAsStream(logoPath));
            lazyQ.startLazyQuery();
            jPrint = JasperFillManager.fillReport(jReport, parameters, DBConnection.getConn());
            JasperViewer.viewReport(jPrint, false);
            lazyQ.endLazyQuery();
        } catch(SQLException ex) { 
            JOptionPane.showMessageDialog(null, "Código error: 1184\n" + ex.getMessage(),
                            "Error al acceder a los datos en la BD de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlUnidades generarCatalogoUnidades()", 1184, UserHome.getUsuario(), ex);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1185\n" + ex.getMessage(),
                            "Error al generar el reporte de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlUnidades generarCatalogoUnidades()", 1185, UserHome.getUsuario(), ex);
            //Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1186\n" + ex.getMessage(),
                            "Error error al ver el reporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlUnidades generarCatalogoUnidades()", 1186, UserHome.getUsuario(), ex);
        }
    }
    
    private void generarCatalogoUnidadesCBajas(){
        try {
            String reportPath = "/reports/ReporteTransportesRemexCBajas.jasper";
            String logoPath = "/icons/Logo Efectivo Negro.png";
            Locale locale = new Locale("en", "US");
            InputStream jasperStream = getClass().getResourceAsStream(reportPath);
            JasperReport jReport = (JasperReport)JRLoader.loadObject(jasperStream);
            JasperPrint jPrint = null;
            HashMap parameters = new HashMap();
            LazyQueryDAO lazyQ = new LazyQueryDAO();
            parameters.put(JRParameter.REPORT_LOCALE, locale);
            parameters.put("LOGO", this.getClass().getResourceAsStream(logoPath));
            lazyQ.startLazyQuery();
            jPrint = JasperFillManager.fillReport(jReport, parameters, DBConnection.getConn());
            JasperViewer.viewReport(jPrint, false);
            lazyQ.endLazyQuery();
        } catch(SQLException ex) { 
            JOptionPane.showMessageDialog(null, "Código error: 1187\n" + ex.getMessage(),
                            "Error al acceder a los datos en la BD de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlUnidades generarCatalogoUnidades()", 1187, UserHome.getUsuario(), ex);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1188\n" + ex.getMessage(),
                            "Error al generar el reporte de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlUnidades generarCatalogoUnidades()", 1188, UserHome.getUsuario(), ex);
            //Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1189\n" + ex.getMessage(),
                            "Error error al ver el reporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlUnidades generarCatalogoUnidades()", 1189, UserHome.getUsuario(), ex);
        }
    }
    
    public void obtenerTiposUnidades(){
        String mensajeError = "";
        try {
            List<TipoUnidadDTO> tiposUnidades;
            TipoUnidadDAO accesoTipoUnidad = new TipoUnidadDAO();
            tiposUnidades = accesoTipoUnidad.obtenerTiposUnidades();
            for(TipoUnidadDTO tipoUnidad : tiposUnidades){
                if(tipoUnidad.isStatus()){
                    mensajeError = tipoUnidad.toString();
                    this.jCBTipoUnidad.addItem(tipoUnidad.getNombre());
                }
            }
        } catch(SQLException ex) { 
            JOptionPane.showMessageDialog(null, "Código error: 1207\n" + ex.getMessage(),
                            "Error al acceder a los datos de los tipos de unidades!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(mensajeError, 1207, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1208\n" + ex.getMessage(),
                            "Error error al mostrar los datos de tipos de unidades!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(mensajeError, 1028, UserHome.getUsuario(), ex);
        }
    }
    
    public boolean validaciones(){
        if("".equals(this.jTFClave.getText()) || this.jTFClave == null){
            JOptionPane.showMessageDialog(this, "Aún no se le agrega una clave\na la unidad.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if("".equals(this.jTFNumeroEconomico.getText()) || this.jTFNumeroEconomico == null){
            JOptionPane.showMessageDialog(this, "Aún no se le agrega un número económico\na la unidad.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if("".equals(this.jTFPlacas.getText()) || this.jTFPlacas == null){
            JOptionPane.showMessageDialog(this, "Aún no se le agregan placas\na la unidad.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if("".equals(this.jTFModelo.getText()) || this.jTFModelo == null){
            JOptionPane.showMessageDialog(this, "Aún no se le agrega un modelo\na la unidad.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if("".equals(this.jTFNSerieMotor.getText()) || this.jTFNSerieMotor == null){
            JOptionPane.showMessageDialog(this, "Aún no se le agrega un número de serie\nde motor a la unidad.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if("".equals(this.jTFModeloMotor.getText()) || this.jTFModeloMotor == null){
            JOptionPane.showMessageDialog(this, "Aún no se le agrega un modelo\nde motor a la unidad.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        if("".equals(this.jTFCPL.getText()) || this.jTFCPL == null){
            JOptionPane.showMessageDialog(this, "Aún no se le agrega un CPL\na la unidad.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        return true;
    }
    
    private void cambiarImagenUnidad(){
        JFileChooser jfc = new JFileChooser();
        
    }
    
    private void guardarImagenUnidad(){
        
    }
    
    private void cargarImagenUnidadDB(UnidadTransporteDTO unidadTransporte) throws Exception, SQLException {
        Image imagen;
        UnidadTransporteDAO accesoUnidad = new UnidadTransporteDAO();
        imagen = accesoUnidad.getImagenUnidadTransporte(unidadTransporte);
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlUnidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlUnidades().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBDarBaja;
    private javax.swing.JButton jBModificar;
    private javax.swing.JComboBox jCBMarca;
    private javax.swing.JComboBox jCBMarcaMotor;
    private javax.swing.JComboBox jCBTipoUnidad;
    private javax.swing.JLabel jLAno;
    private javax.swing.JLabel jLCPL;
    private javax.swing.JLabel jLClave;
    private javax.swing.JLabel jLColor;
    private javax.swing.JLabel jLFechaAlta;
    private javax.swing.JLabel jLImage;
    private javax.swing.JLabel jLMarca;
    private javax.swing.JLabel jLMarcaMotor;
    private javax.swing.JLabel jLModeloMotor;
    private javax.swing.JLabel jLNSerieMotor;
    private javax.swing.JLabel jLNumeroEconomico;
    private javax.swing.JLabel jLPlacas;
    private javax.swing.JLabel jLTipoUnidad;
    private javax.swing.JLabel jLUsuario;
    private javax.swing.JLabel jLVIN;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIAgregar;
    private javax.swing.JMenuItem jMICatalogoUnidades;
    private javax.swing.JMenuItem jMICatalogoUnidadesCBajas;
    private javax.swing.JMenuItem jMIDarBaja;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMIModificar;
    private javax.swing.JMenuItem jMIReporteCostoReparaciones;
    private javax.swing.JMenuItem jMIReporteReparacionesPUnidad;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JMenu jMReportes;
    private javax.swing.JPanel jPCatalogoUnidades;
    private javax.swing.JPanel jPImage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTCatalogoUnidades;
    private javax.swing.JTextField jTFCPL;
    private javax.swing.JTextField jTFClave;
    private javax.swing.JTextField jTFColor;
    private javax.swing.JTextField jTFFechaAlta;
    private javax.swing.JTextField jTFModelo;
    private javax.swing.JTextField jTFModeloMotor;
    private javax.swing.JTextField jTFNSerieMotor;
    private javax.swing.JTextField jTFNumeroEconomico;
    private javax.swing.JTextField jTFPlacas;
    private javax.swing.JTextField jTFUsuario;
    private javax.swing.JTextField jTFVIN;
    // End of variables declaration//GEN-END:variables
}
