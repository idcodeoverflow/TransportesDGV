/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.OperadorDTO;
import beans.ProveedorDTO;
import beans.RefaccionDTO;
import data.OperadorDAO;
import data.ProveedorDAO;
import data.RefaccionDAO;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;

/**
 *
 * @author David Israel
 */
public class BuscarCampoSimple extends javax.swing.JFrame {

    private javax.swing.JTextField jTFRecibirTexto;
    private int tipoRespuesta;
    
    /**
     * Creates new form BuscarCampoSimple
     */
    public BuscarCampoSimple() {
        try{
            initComponents();
            this.tipoRespuesta = -1;
            this.jTResultados.setSelectionMode(0);
            this.setLocationRelativeTo(null);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código de error: 1251", "Error al abrir la interfaz", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor BuscarCampoSimple()", 1251, UserHome.getUsuario(), ex);
            this.dispose();
        }
        
    }

    public javax.swing.JTextField getRecibirTexto(){
        return this.jTFRecibirTexto;
    }
    
    public void setRecibirTexto(javax.swing.JTextField jTFRecibirTexto){
        this.jTFRecibirTexto = jTFRecibirTexto;
    }

    public int getTipoRespuesta(){
        return this.tipoRespuesta;
    }
    
    public void setTipoRespuesta(int tipoRespuesta){
        this.tipoRespuesta = tipoRespuesta;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLBuscar = new javax.swing.JLabel();
        jTFBuscar = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTResultados = new javax.swing.JTable();
        jBSeleccionar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMISeleccionar = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Buscar");

        jLBuscar.setText("Buscar:");

        jTFBuscar.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTFBuscarCaretUpdate(evt);
            }
        });

        jTResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Descripciópn"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTResultados.getTableHeader().setReorderingAllowed(false);
        jTResultados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTResultadosMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTResultados);
        if (jTResultados.getColumnModel().getColumnCount() > 0) {
            jTResultados.getColumnModel().getColumn(0).setMinWidth(130);
            jTResultados.getColumnModel().getColumn(0).setPreferredWidth(130);
            jTResultados.getColumnModel().getColumn(0).setMaxWidth(130);
        }

        jBSeleccionar.setText("Seleccionar");
        jBSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSeleccionarActionPerformed(evt);
            }
        });

        jBCancelar.setText("Cancelar");
        jBCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarActionPerformed(evt);
            }
        });

        jMArchivo.setText("Archivo");

        jMISeleccionar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        jMISeleccionar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMISeleccionar.setText("Seleccionar");
        jMISeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISeleccionarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISeleccionar);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMBMenu.add(jMEditar);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 442, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLBuscar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTFBuscar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jBSeleccionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBCancelar)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBCancelar, jBSeleccionar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLBuscar)
                    .addComponent(jTFBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBSeleccionar)
                    .addComponent(jBCancelar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTFBuscarCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTFBuscarCaretUpdate
        this.buscar();
    }//GEN-LAST:event_jTFBuscarCaretUpdate

    private void jBSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSeleccionarActionPerformed
        this.seleccionar();
    }//GEN-LAST:event_jBSeleccionarActionPerformed

    private void jTResultadosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTResultadosMouseReleased
        this.obtenerRespuesta();
    }//GEN-LAST:event_jTResultadosMouseReleased

    private void jMISeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISeleccionarActionPerformed
        this.seleccionar();
    }//GEN-LAST:event_jMISeleccionarActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jBCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jBCancelarActionPerformed

    private void limpiar(){
        try{
            this.jTFBuscar.setText(null);
            DefaultTableModel modelo = (DefaultTableModel) this.jTResultados.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código de error: 1253", 
                    "Error al limpiar los datos", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("BuscarCampoSimple limpiar()", 1253, UserHome.getUsuario(), ex);
        }
    }
    
    private void limpiarTabla(){
        try{
            DefaultTableModel modelo = (DefaultTableModel) this.jTResultados.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código de error: 1252", 
                    "Error al limpiar la tabla", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("BuscarCampoSimple limpiarTabla()", 1252, UserHome.getUsuario(), ex);
        }
    }
    
    private void buscar(){
        
        switch(tipoRespuesta){
            case -1:
                JOptionPane.showMessageDialog(null, "Advertencia!!!", "No se ha "
                        + "definido un tipo\nde búsqueda.", JOptionPane.WARNING_MESSAGE);
                break;
            case 1:
                RefaccionDTO refaccionBuscada = null;
                try {
                    List<RefaccionDTO> refacciones = new ArrayList<RefaccionDTO>();
                    RefaccionDAO accesoRefaccion = new RefaccionDAO();
                    refaccionBuscada = new RefaccionDTO();
                    refaccionBuscada.setNombre(this.jTFBuscar.getText());
                    refacciones = accesoRefaccion.buscarRefaccion(refaccionBuscada);
                    DefaultTableModel modelo = (DefaultTableModel) this.jTResultados.getModel();
                    this.limpiarTabla();
                    for(RefaccionDTO refaccion : refacciones){
                        Object datos[] = {refaccion.getClaveRefaccion(), refaccion.getNombre()};
                        modelo.addRow(datos);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 700\n" + ex.getMessage(),
                            "Error al buscar la refaccion en la BD!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(refaccionBuscada.toString(), 700, UserHome.getUsuario(), ex);
                } catch (Exception ex){
                    JOptionPane.showMessageDialog(null, "Código error: 701\n" + ex.getMessage(),
                            "Error al buscar la refaccion!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(refaccionBuscada.toString(), 701, UserHome.getUsuario(), ex);
                }
                break;
            case 2:
                OperadorDTO operadorBuscado = null;
                try {
                    List<OperadorDTO> operadores = new ArrayList<OperadorDTO>();
                    OperadorDAO accesoOperador = new OperadorDAO();
                    operadorBuscado = new OperadorDTO();
                    operadorBuscado.setNombre(this.jTFBuscar.getText());
                    operadores = accesoOperador.buscarOperador(operadorBuscado);
                    DefaultTableModel modelo = (DefaultTableModel) this.jTResultados.getModel();
                    this.limpiarTabla();
                    for(OperadorDTO operador : operadores){
                        Object datos[] = {operador.getNumeroOperador(), operador.getNombre() + " " + operador.getApellidos()};
                        modelo.addRow(datos);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 1202\n" + ex.getMessage(),
                            "Error al buscar el operador en la BD!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(operadorBuscado.toString(), 1202, UserHome.getUsuario(), ex);
                } catch (Exception ex){
                    JOptionPane.showMessageDialog(null, "Código error: 1203\n" + ex.getMessage(),
                            "Error al buscar el operador!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(operadorBuscado.toString(), 1203, UserHome.getUsuario(), ex);
                }
                break;
            
            case 3:
                ProveedorDTO proveedorBuscado = null;
                try {
                    List<ProveedorDTO> proveedores = new ArrayList<ProveedorDTO>();
                    ProveedorDAO accesoProveedor = new ProveedorDAO();
                    proveedorBuscado = new ProveedorDTO();
                    proveedorBuscado.setNombre(this.jTFBuscar.getText());
                    proveedores = accesoProveedor.buscarProveedor(proveedorBuscado);
                    DefaultTableModel modelo = (DefaultTableModel) this.jTResultados.getModel();
                    this.limpiarTabla();
                    for(ProveedorDTO proveedor : proveedores){
                        Object datos[] = {proveedor.getIdProveedor(), proveedor.getNombre()};
                        modelo.addRow(datos);
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 1249\n" + ex.getMessage(),
                            "Error al buscar el proveedor en la BD!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(proveedorBuscado.toString(), 1249, UserHome.getUsuario(), ex);
                } catch (Exception ex){
                    JOptionPane.showMessageDialog(null, "Código error: 1250\n" + ex.getMessage(),
                            "Error al buscar el proveedor!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(proveedorBuscado.toString(), 1250, UserHome.getUsuario(), ex);
                }
                break;
                
            default:
                JOptionPane.showMessageDialog(null, "Error!!!", "Tipo de búsqueda "
                        + "inválido.", JOptionPane.WARNING_MESSAGE);
                ErrorLogger.scribirLog("BuscarCampoSimple buscar():default", -1, UserHome.getUsuario(), new Exception("Default case."));
                break;
        }
    }
    
    private void seleccionar(){
        try{
            int index = this.jTResultados.getSelectedRow();
            
            if(index > -1){
                String numero = ((this.jTResultados.getValueAt(index, 0) != null) ? this.jTResultados.getValueAt(index, 0).toString() : "");
                if(numero != null) {
                    this.jTFRecibirTexto.setText(numero);
                }
            }
            this.dispose();
        /*}  catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: \n" + ex.getMessage(),
                    "Error al obtener datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
        */} catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 702\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("BuscarCampoSimple seleccionar()", 702, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerRespuesta(){
        switch(tipoRespuesta){
            case -1:
                JOptionPane.showMessageDialog(null, "Advertencia!!!", "No se ha "
                        + "definido un tipo\nde búsqueda.", JOptionPane.WARNING_MESSAGE);
                break;
            case 1:
                //refacciones
                break;
            case 2:
                //operadores
                break;
            case 3:
                //proveedores
                break;
            default:
                JOptionPane.showMessageDialog(null, "Error!!!", "Tipo de búsqueda "
                        + "inválido.", JOptionPane.WARNING_MESSAGE);
                break;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BuscarCampoSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BuscarCampoSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BuscarCampoSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BuscarCampoSimple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BuscarCampoSimple().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBSeleccionar;
    private javax.swing.JLabel jLBuscar;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMISeleccionar;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFBuscar;
    private javax.swing.JTable jTResultados;
    // End of variables declaration//GEN-END:variables
}
