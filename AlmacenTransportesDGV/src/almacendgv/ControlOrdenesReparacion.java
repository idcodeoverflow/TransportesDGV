/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

//import beans.CargoBodegaDTO;
import beans.CargoEspecialDTO;
import beans.CargoOperadorDTO;
import beans.CargoUnidadDTO;
import beans.OperadorDTO;
import beans.OrdenReparacionDTO;
import beans.SalidaAlmacenDTO;
import beans.SalidaEspecialDTO;
import beans.SalidaOperadorDTO;
import beans.SalidaUnidadDTO;
import beans.TrabajoExternoDTO;
import beans.TransporteReparacionDTO;
import beans.UnidadTransporteDTO;
import beans.UsuarioDTO;
import bussines.LazyQueryBO;
import bussines.SistemaBO;
//import data.CargoBodegaDAO;
import data.CargoDirectoDAO;
import data.CargoEspecialDAO;
import data.CargoOperadorDAO;
import data.CargoUnidadDAO;
import data.LazyQueryDAO;
import data.OperadorDAO;
import data.OrdenReparacionDAO;
import data.SalidaAlmacenDAO;
//import data.SalidaBodegaDAO;
import data.SalidaEspecialDAO;
import data.SalidaOperadorDAO;
import data.SalidaUnidadDAO;
import data.TrabajoExternoDAO;
import data.TransporteReparacionDAO;
import data.UnidadTransporteDAO;
import java.io.InputStream;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;
import mailer.AccountAddress;
import mailer.MailData;
import mailer.Mailer;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import support.DBConnection;

/**
 *
 * @author David Israel
 */
public class ControlOrdenesReparacion extends javax.swing.JFrame {

    private OrdenReparacionDTO ordenReparacion;
    private CargoUnidadDTO cargoUnidad;
    private CargoEspecialDTO cargoEspecial;
    private CargoOperadorDTO cargoOperador;
    
    private final int ABRIR_ORDEN = 1;
    private final int CERRAR_ORDEN = 2;
    
    private SistemaBO controlSistema;
    
    /**
     * Creates new form ControlOrdenesReparacion
     */
    public ControlOrdenesReparacion() {
        try{
            initComponents();
            this.controlSistema = new SistemaBO();
            this.setLocationRelativeTo(null);
            this.jTCargosDirectos.setSelectionMode(0);
            this.jTOrdenesReparacion.setSelectionMode(0);
            this.jTSalidasAlmacen.setSelectionMode(0);
            this.obtenerOrdenesReparacion();
            this.estadoBotonesAlIniciar();
            //Verificar que el usuario sea un administrador para activar la opción de modificar
            if(UserHome.getUsuario().getPrivilegio() == 1){
                this.jMIModificar.setEnabled(true);
            } else {
                this.jMIModificar.setEnabled(false);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 914\n" + ex.getMessage(),
                    "Error al iniciar ventana\nControl Órdenes de Reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlOrdenesReparacion()", 914, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    public void mostrarValores(){
        try{
            this.jTFUsuario.setText(UserHome.getUsuario().getNombre() + " " + 
                UserHome.getUsuario().getApellidos());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 915\n" + ex.getMessage(),
                    "Error al mostrar los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOrdenesReparacion mostrarValores()", 915, UserHome.getUsuario(), ex);
        }
    }
    
    public OrdenReparacionDTO getOrdenReparacion(){
        return this.ordenReparacion;
    }
    
    public void setOrdenReparacion(OrdenReparacionDTO ordenReparacion){
        this.ordenReparacion = ordenReparacion;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLNumeroOrden = new javax.swing.JLabel();
        jTFNumeroOrden = new javax.swing.JTextField();
        jLUsuario = new javax.swing.JLabel();
        jTFUsuario = new javax.swing.JTextField();
        jLFechaEntrada = new javax.swing.JLabel();
        jTFFechaEntrada = new javax.swing.JTextField();
        jLFechaSalida = new javax.swing.JLabel();
        jTFFechaSalida = new javax.swing.JTextField();
        jLNumeroOperador = new javax.swing.JLabel();
        jTFNumeroOperador = new javax.swing.JTextField();
        jLClavePlana = new javax.swing.JLabel();
        jTFClavePlana = new javax.swing.JTextField();
        jLClaveTracto = new javax.swing.JLabel();
        jTFClaveTracto = new javax.swing.JTextField();
        jBCancelarOrden = new javax.swing.JButton();
        jBAgregarOrden = new javax.swing.JButton();
        jPOrdenesReparacion = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTOrdenesReparacion = new javax.swing.JTable();
        jPCargosDirectos = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTCargosDirectos = new javax.swing.JTable();
        jPSalidasAlmacen = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTSalidasAlmacen = new javax.swing.JTable();
        jBFinalizar = new javax.swing.JButton();
        jLKilometrajeTracto = new javax.swing.JLabel();
        jTFKilometrajeTracto = new javax.swing.JTextField();
        jLKilometrajePlana = new javax.swing.JLabel();
        jTFKilometrajePlana = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTATotalesReparacion = new javax.swing.JTextArea();
        jLDescripcionTracto = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTADescripcionTracto = new javax.swing.JTextArea();
        jLDescripcionPlana = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTADescripcionPlana = new javax.swing.JTextArea();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAgregarOrden = new javax.swing.JMenuItem();
        jMIFinalizar = new javax.swing.JMenuItem();
        jMICancelarOrden = new javax.swing.JMenuItem();
        jMIModificar = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMIBuscarOperador = new javax.swing.JMenuItem();
        jMReportes = new javax.swing.JMenu();
        jMIReporteOrdenReparacion = new javax.swing.JMenuItem();
        jMIReporteReparacionesPUnidad = new javax.swing.JMenuItem();
        jMIReporteCostoReparaciones = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Órdenes de Reparación - Sistema de Administración Mantenimiento");
        setAutoRequestFocus(false);

        jLNumeroOrden.setText("N° Orden de Reparación");

        jLUsuario.setText("Usuario:");

        jTFUsuario.setEditable(false);
        jTFUsuario.setFocusable(false);

        jLFechaEntrada.setText("Fecha de Entrada:");

        jTFFechaEntrada.setEditable(false);
        jTFFechaEntrada.setFocusable(false);

        jLFechaSalida.setText("Fecha de Salida:");

        jTFFechaSalida.setEditable(false);
        jTFFechaSalida.setFocusable(false);

        jLNumeroOperador.setText("N° Operador:");

        jLClavePlana.setText("Clave Plana:");

        jLClaveTracto.setText("Clave Tracto:");

        jBCancelarOrden.setText("Cancelar");
        jBCancelarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCancelarOrdenActionPerformed(evt);
            }
        });

        jBAgregarOrden.setText("Agregar");
        jBAgregarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarOrdenActionPerformed(evt);
            }
        });

        jPOrdenesReparacion.setBorder(javax.swing.BorderFactory.createTitledBorder("Órdenes de Reparación"));

        jTOrdenesReparacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N° Orden", "Fecha Entrada", "Fecha Salida", "Operador", "Clave Tracto", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTOrdenesReparacion.getTableHeader().setReorderingAllowed(false);
        jTOrdenesReparacion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTOrdenesReparacionMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTOrdenesReparacion);
        if (jTOrdenesReparacion.getColumnModel().getColumnCount() > 0) {
            jTOrdenesReparacion.getColumnModel().getColumn(0).setMinWidth(65);
            jTOrdenesReparacion.getColumnModel().getColumn(0).setPreferredWidth(65);
            jTOrdenesReparacion.getColumnModel().getColumn(0).setMaxWidth(65);
            jTOrdenesReparacion.getColumnModel().getColumn(4).setMinWidth(80);
            jTOrdenesReparacion.getColumnModel().getColumn(4).setPreferredWidth(80);
            jTOrdenesReparacion.getColumnModel().getColumn(4).setMaxWidth(80);
            jTOrdenesReparacion.getColumnModel().getColumn(5).setMinWidth(70);
            jTOrdenesReparacion.getColumnModel().getColumn(5).setPreferredWidth(70);
            jTOrdenesReparacion.getColumnModel().getColumn(5).setMaxWidth(70);
        }

        javax.swing.GroupLayout jPOrdenesReparacionLayout = new javax.swing.GroupLayout(jPOrdenesReparacion);
        jPOrdenesReparacion.setLayout(jPOrdenesReparacionLayout);
        jPOrdenesReparacionLayout.setHorizontalGroup(
            jPOrdenesReparacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPOrdenesReparacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPOrdenesReparacionLayout.setVerticalGroup(
            jPOrdenesReparacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPOrdenesReparacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPCargosDirectos.setBorder(javax.swing.BorderFactory.createTitledBorder("Cargos Directos y Trabajos Externos"));

        jTCargosDirectos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Folio", "Proveedor", "Receptor", "Refacción", "Cantidad", "Total", "Tipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTCargosDirectos.getTableHeader().setReorderingAllowed(false);
        jTCargosDirectos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTCargosDirectosMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTCargosDirectos);
        if (jTCargosDirectos.getColumnModel().getColumnCount() > 0) {
            jTCargosDirectos.getColumnModel().getColumn(0).setMinWidth(50);
            jTCargosDirectos.getColumnModel().getColumn(0).setPreferredWidth(50);
            jTCargosDirectos.getColumnModel().getColumn(0).setMaxWidth(50);
            jTCargosDirectos.getColumnModel().getColumn(1).setMinWidth(70);
            jTCargosDirectos.getColumnModel().getColumn(1).setPreferredWidth(70);
            jTCargosDirectos.getColumnModel().getColumn(1).setMaxWidth(70);
            jTCargosDirectos.getColumnModel().getColumn(5).setMinWidth(65);
            jTCargosDirectos.getColumnModel().getColumn(5).setPreferredWidth(65);
            jTCargosDirectos.getColumnModel().getColumn(5).setMaxWidth(65);
            jTCargosDirectos.getColumnModel().getColumn(6).setMinWidth(80);
            jTCargosDirectos.getColumnModel().getColumn(6).setPreferredWidth(80);
            jTCargosDirectos.getColumnModel().getColumn(6).setMaxWidth(80);
            jTCargosDirectos.getColumnModel().getColumn(7).setMinWidth(80);
            jTCargosDirectos.getColumnModel().getColumn(7).setPreferredWidth(80);
            jTCargosDirectos.getColumnModel().getColumn(7).setMaxWidth(80);
        }

        javax.swing.GroupLayout jPCargosDirectosLayout = new javax.swing.GroupLayout(jPCargosDirectos);
        jPCargosDirectos.setLayout(jPCargosDirectosLayout);
        jPCargosDirectosLayout.setHorizontalGroup(
            jPCargosDirectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCargosDirectosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPCargosDirectosLayout.setVerticalGroup(
            jPCargosDirectosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCargosDirectosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPSalidasAlmacen.setBorder(javax.swing.BorderFactory.createTitledBorder("Salidas de Almacén"));

        jTSalidasAlmacen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id Salida", "Receptor", "Refacción", "Cantidad", "Precio Unit.", "Total", "Tipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTSalidasAlmacen.getTableHeader().setReorderingAllowed(false);
        jTSalidasAlmacen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTSalidasAlmacenMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(jTSalidasAlmacen);
        if (jTSalidasAlmacen.getColumnModel().getColumnCount() > 0) {
            jTSalidasAlmacen.getColumnModel().getColumn(0).setMinWidth(60);
            jTSalidasAlmacen.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTSalidasAlmacen.getColumnModel().getColumn(0).setMaxWidth(60);
            jTSalidasAlmacen.getColumnModel().getColumn(2).setMinWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(2).setPreferredWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(2).setMaxWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(3).setMinWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(3).setPreferredWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(3).setMaxWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(4).setMinWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(4).setPreferredWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(4).setMaxWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(5).setMinWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(5).setPreferredWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(5).setMaxWidth(80);
            jTSalidasAlmacen.getColumnModel().getColumn(6).setMinWidth(90);
            jTSalidasAlmacen.getColumnModel().getColumn(6).setPreferredWidth(90);
            jTSalidasAlmacen.getColumnModel().getColumn(6).setMaxWidth(90);
        }

        javax.swing.GroupLayout jPSalidasAlmacenLayout = new javax.swing.GroupLayout(jPSalidasAlmacen);
        jPSalidasAlmacen.setLayout(jPSalidasAlmacenLayout);
        jPSalidasAlmacenLayout.setHorizontalGroup(
            jPSalidasAlmacenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSalidasAlmacenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 706, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPSalidasAlmacenLayout.setVerticalGroup(
            jPSalidasAlmacenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPSalidasAlmacenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                .addContainerGap())
        );

        jBFinalizar.setText("Finalizar");
        jBFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFinalizarActionPerformed(evt);
            }
        });

        jLKilometrajeTracto.setText("Kilometraje Tracto:");

        jLKilometrajePlana.setText("Kilometraje Plana:");

        jTATotalesReparacion.setEditable(false);
        jTATotalesReparacion.setColumns(20);
        jTATotalesReparacion.setRows(5);
        jScrollPane4.setViewportView(jTATotalesReparacion);

        jLDescripcionTracto.setText("Descripción Tracto:");

        jScrollPane5.setPreferredSize(new java.awt.Dimension(166, 75));

        jTADescripcionTracto.setColumns(20);
        jTADescripcionTracto.setRows(5);
        jScrollPane5.setViewportView(jTADescripcionTracto);

        jLDescripcionPlana.setText("Descripción Plana:");

        jScrollPane7.setPreferredSize(new java.awt.Dimension(166, 75));

        jTADescripcionPlana.setColumns(20);
        jTADescripcionPlana.setRows(5);
        jScrollPane7.setViewportView(jTADescripcionPlana);

        jMArchivo.setText("Archivo");

        jMIAgregarOrden.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregarOrden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIAgregarOrden.setText("Agregar Orden");
        jMIAgregarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarOrdenActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregarOrden);

        jMIFinalizar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        jMIFinalizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/DirectCharge-16.png"))); // NOI18N
        jMIFinalizar.setText("Finalizar Orden");
        jMIFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIFinalizarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIFinalizar);

        jMICancelarOrden.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMICancelarOrden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Trash-16.png"))); // NOI18N
        jMICancelarOrden.setText("Cancelar Orden");
        jMICancelarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICancelarOrdenActionPerformed(evt);
            }
        });
        jMArchivo.add(jMICancelarOrden);

        jMIModificar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMIModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Modify-16.png"))); // NOI18N
        jMIModificar.setText("Modificar Orden");
        jMIModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIModificarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIModificar);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jMIBuscarOperador.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMIBuscarOperador.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Search-16.png"))); // NOI18N
        jMIBuscarOperador.setText("Buscar Operador");
        jMIBuscarOperador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIBuscarOperadorActionPerformed(evt);
            }
        });
        jMEditar.add(jMIBuscarOperador);

        jMBMenu.add(jMEditar);

        jMReportes.setText("Reportes");

        jMIReporteOrdenReparacion.setText("Reporte Orden de Reparación");
        jMIReporteOrdenReparacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIReporteOrdenReparacionActionPerformed(evt);
            }
        });
        jMReportes.add(jMIReporteOrdenReparacion);

        jMIReporteReparacionesPUnidad.setText("Reporte Reparaciones P/Unidad");
        jMIReporteReparacionesPUnidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIReporteReparacionesPUnidadActionPerformed(evt);
            }
        });
        jMReportes.add(jMIReporteReparacionesPUnidad);

        jMIReporteCostoReparaciones.setText("Reporte Costo Reparaciones");
        jMIReporteCostoReparaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIReporteCostoReparacionesActionPerformed(evt);
            }
        });
        jMReportes.add(jMIReporteCostoReparaciones);

        jMBMenu.add(jMReportes);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPOrdenesReparacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLClaveTracto)
                            .addComponent(jLNumeroOperador)
                            .addComponent(jLFechaEntrada)
                            .addComponent(jLNumeroOrden)
                            .addComponent(jLKilometrajeTracto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTFNumeroOrden)
                            .addComponent(jTFFechaEntrada)
                            .addComponent(jTFNumeroOperador)
                            .addComponent(jTFClaveTracto, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(jTFKilometrajeTracto))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLUsuario)
                                    .addComponent(jLFechaSalida)
                                    .addComponent(jLClavePlana)
                                    .addComponent(jLKilometrajePlana))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTFUsuario)
                                    .addComponent(jTFFechaSalida)
                                    .addComponent(jTFClavePlana)
                                    .addComponent(jTFKilometrajePlana)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBAgregarOrden)
                                .addGap(10, 10, 10)
                                .addComponent(jBFinalizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBCancelarOrden))))
                    .addComponent(jScrollPane4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLDescripcionTracto)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLDescripcionPlana)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPCargosDirectos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPSalidasAlmacen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAgregarOrden, jBCancelarOrden, jBFinalizar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLNumeroOrden)
                            .addComponent(jTFNumeroOrden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLUsuario)
                            .addComponent(jTFUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLFechaEntrada)
                            .addComponent(jTFFechaEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLFechaSalida)
                            .addComponent(jTFFechaSalida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLNumeroOperador)
                            .addComponent(jTFNumeroOperador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLClavePlana)
                            .addComponent(jTFClavePlana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLClaveTracto)
                            .addComponent(jTFClaveTracto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLKilometrajePlana)
                            .addComponent(jTFKilometrajePlana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLKilometrajeTracto)
                            .addComponent(jTFKilometrajeTracto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBCancelarOrden)
                            .addComponent(jBAgregarOrden)
                            .addComponent(jBFinalizar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                    .addComponent(jPCargosDirectos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPSalidasAlmacen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLDescripcionTracto)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLDescripcionPlana)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPOrdenesReparacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane5, jScrollPane7});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIAgregarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarOrdenActionPerformed
        this.agregar();
    }//GEN-LAST:event_jMIAgregarOrdenActionPerformed

    private void jMICancelarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICancelarOrdenActionPerformed
        this.cancelar();
    }//GEN-LAST:event_jMICancelarOrdenActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jBAgregarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarOrdenActionPerformed
        this.agregar();
    }//GEN-LAST:event_jBAgregarOrdenActionPerformed

    private void jBCancelarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCancelarOrdenActionPerformed
        this.cancelar();
    }//GEN-LAST:event_jBCancelarOrdenActionPerformed

    private void jTOrdenesReparacionMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTOrdenesReparacionMouseReleased
        this.obtenerOrdenReparacion();
        this.estadoBotonesClicReparacion(ordenReparacion);
    }//GEN-LAST:event_jTOrdenesReparacionMouseReleased

    private void jTCargosDirectosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTCargosDirectosMouseReleased
        this.obtenerCargoDirecto();
    }//GEN-LAST:event_jTCargosDirectosMouseReleased

    private void jTSalidasAlmacenMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTSalidasAlmacenMouseReleased
        this.obtenerSalidaAlmacen();
    }//GEN-LAST:event_jTSalidasAlmacenMouseReleased

    private void jBFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFinalizarActionPerformed
        this.finalizar();
    }//GEN-LAST:event_jBFinalizarActionPerformed

    private void jMIFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIFinalizarActionPerformed
        this.finalizar();
    }//GEN-LAST:event_jMIFinalizarActionPerformed

    private void jMIReporteOrdenReparacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIReporteOrdenReparacionActionPerformed
        this.generarReporteOrdenReparacion();
    }//GEN-LAST:event_jMIReporteOrdenReparacionActionPerformed

    private void jMIBuscarOperadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIBuscarOperadorActionPerformed
        this.buscarOperador();
    }//GEN-LAST:event_jMIBuscarOperadorActionPerformed

    private void jMIModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIModificarActionPerformed
        this.modificarOrden();
    }//GEN-LAST:event_jMIModificarActionPerformed

    private void jMIReporteReparacionesPUnidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIReporteReparacionesPUnidadActionPerformed
        ReporteReparacionesPUnidad reparacionesUnidad = new ReporteReparacionesPUnidad();
        reparacionesUnidad.setLocationRelativeTo(null);
        reparacionesUnidad.setVisible(true);
    }//GEN-LAST:event_jMIReporteReparacionesPUnidadActionPerformed

    private void jMIReporteCostoReparacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIReporteCostoReparacionesActionPerformed
        ReporteCostoReparaciones costoReparaciones = new ReporteCostoReparaciones();
        costoReparaciones.setLocationRelativeTo(null);
        costoReparaciones.setVisible(true);
    }//GEN-LAST:event_jMIReporteCostoReparacionesActionPerformed

    private void agregar(){
        
        OrdenReparacionDTO ordenReparacionLocal = new OrdenReparacionDTO();
        TransporteReparacionDTO trPlana = new TransporteReparacionDTO();
        TransporteReparacionDTO trTracto = new TransporteReparacionDTO();
        int max = 0;
        try{
            UnidadTransporteDTO tracto = null;
            UnidadTransporteDTO plana = null;
            LazyQueryBO lazyQ = new LazyQueryBO();
            OrdenReparacionDAO acceso = new OrdenReparacionDAO();
            OperadorDTO operador;
            OperadorDAO accesoOperador = new OperadorDAO();
            UnidadTransporteDAO accesoTransporte = new UnidadTransporteDAO();
            TransporteReparacionDAO accesoTransporteReparacion = new TransporteReparacionDAO();
            UsuarioDTO usuarioAlta = UserHome.getUsuario();
            int kilometrajeTracto = 0;
            int kilometrajePlana = 0;
            boolean usaPlana = (!"".equals(this.jTFClavePlana.getText()) && this.jTFClavePlana.getText() != null);
            boolean usaTracto = (!"".equals(this.jTFClaveTracto.getText()) && this.jTFClaveTracto.getText() != null);
            boolean usaKilometrajePlana = (!"".equals(this.jTFKilometrajePlana.getText()) && this.jTFKilometrajePlana.getText() != null);
            boolean usaKilometrajeTracto = (!"".equals(this.jTFKilometrajeTracto.getText()) && this.jTFKilometrajeTracto.getText() != null);
            boolean permitirPlana = usaPlana && usaKilometrajePlana;
            boolean permitirTracto = usaTracto && usaKilometrajeTracto;
            
            if(!permitirPlana && (usaPlana || usaKilometrajePlana)){
                JOptionPane.showMessageDialog(null, "Los datos de la plana no\n"
                            + "están completos.", "Advertencia!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            if(!permitirTracto && (usaTracto || usaKilometrajeTracto)){
                JOptionPane.showMessageDialog(null, "Los datos del tracto no\n"
                            + "están completos.", "Advertencia!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            lazyQ.startLazyQuery();
            
            if(permitirPlana){
                kilometrajePlana = Integer.parseInt(this.jTFKilometrajePlana.getText());
                plana = accesoTransporte.obtenerUnidad(this.jTFClavePlana.getText(), true, false, false);
            }
            
            if(permitirTracto){
                kilometrajeTracto = Integer.parseInt(this.jTFKilometrajeTracto.getText());
                tracto = accesoTransporte.obtenerUnidad(this.jTFClaveTracto.getText(), true, false, false);
            }
            
            operador = accesoOperador.obtenerOperador(Integer.parseInt(this.jTFNumeroOperador.getText()), false, false);
            
            if(!operador.isStatus() || (plana != null && !plana.isStatus()) || (tracto != null && !tracto.isStatus())){
                JOptionPane.showMessageDialog(null, "Código error: 916\nAl menos un Operador o "
                        + "Transporte está dado de baja.", "Error!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(operador.toString() + plana.toString() + tracto.toString(), 916, UserHome.getUsuario(), new Exception("#NA"));
                return;
            }
            
            if(null == operador){
                JOptionPane.showMessageDialog(null, "El operador que ha ingresado "
                        + "no esta dado de alta en la base de datos.", "Advertencia!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            if(permitirPlana && plana == null){
                JOptionPane.showMessageDialog(null, "La plana que ha ingresado "
                        + "no esta dada de alta en la base de datos.", "Advertencia!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            if(permitirTracto && tracto == null){
                JOptionPane.showMessageDialog(null, "El tracto que ha ingresado "
                        + "no esta dado de alta en la base de datos.", "Advertencia!!!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            
            if(permitirPlana){
                if(plana.getTipoUnidad().getIdTipo() == 2 || plana.getTipoUnidad().getIdTipo() == 8){
                    trPlana.setKilometraje(kilometrajePlana);
                    trPlana.setTransporte(plana);
                    trPlana.setOrdenReparacion(ordenReparacionLocal);
                    trPlana.setDescripcion(((!"".equals(this.jTADescripcionPlana.getText()) 
                            && this.jTADescripcionPlana.getText() != null) ? this.jTADescripcionPlana.getText() : ""));
                    trPlana.setStatus(true);
                } else {
                    JOptionPane.showMessageDialog(null, "La clave asignada a la "
                            + "Plana\nno corresponde a una Plana o Thermo.", "Error!!!", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            
            if(permitirTracto){
                if(tracto.getTipoUnidad().getIdTipo() != 2 && tracto.getTipoUnidad().getIdTipo() != 8){
                    trTracto.setKilometraje(kilometrajeTracto);
                    trTracto.setTransporte(tracto);
                    trTracto.setOrdenReparacion(ordenReparacionLocal);
                    trTracto.setDescripcion(((!"".equals(this.jTADescripcionTracto.getText()) 
                            && this.jTADescripcionTracto.getText() != null) ? this.jTADescripcionTracto.getText() : ""));
                    trTracto.setStatus(true);
                } else {
                    JOptionPane.showMessageDialog(null, "La clave asignada al "
                            + "Tracto\nno corresponde a un Tracto.", "Error!!!", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
            
            ordenReparacionLocal.setOperador(operador);
            ordenReparacionLocal.setPlana(plana);
            ordenReparacionLocal.setStatus(true);
            ordenReparacionLocal.setTracto(tracto);
            ordenReparacionLocal.setUsuario(UserHome.getUsuario());
            
            acceso.agregarOrdenReparacion(ordenReparacionLocal);
            max = acceso.obtenerUltimaOrdenReparacion(true, false); 
            lazyQ.endLazyQuery();
            
            ordenReparacionLocal.setNumeroOrden(max); 
            trPlana.setOrdenReparacion(ordenReparacionLocal);
            trTracto.setOrdenReparacion(ordenReparacionLocal);
            trTracto.setUsuario(usuarioAlta);
            trPlana.setUsuario(usuarioAlta);
            trPlana.setUsuarioBaja(null);
            trTracto.setUsuarioBaja(null);
            
            if(permitirPlana){
                accesoTransporteReparacion.agregarTransporteAReparacion(trPlana);
            }
            
            if(permitirTracto){
                accesoTransporteReparacion.agregarTransporteAReparacion(trTracto);
            }
            
            if(controlSistema.obtenerControlSistema(1, true, true).isNotificarNuevaOrden()){
                this.enviarReportePorMail(ABRIR_ORDEN);
            }
            
            this.limpiar();
            
        } catch(SQLException ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 917\n" + ex.getMessage()
                        + "\nError al intentar guardar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(ordenReparacionLocal.toString() + trPlana.toString() + trTracto.toString(), 917, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                OrdenReparacionDAO accesoOrdenReparacion = new OrdenReparacionDAO();
                reparacionExitosa = accesoOrdenReparacion.repararErrorAgregarOrdenReparacion();
                if(!reparacionExitosa){
                    /*JOptionPane.showMessageDialog(null, "Código error: 918\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);*/
                } else {
                    /*JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);*/
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (Exception ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 919\n" + ex.getMessage()
                        + "\nError al intentar obtener los datos ingresados.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(ordenReparacionLocal.toString() + trPlana.toString() + trTracto.toString(), 919, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                OrdenReparacionDAO accesoOrdenReparacion = new OrdenReparacionDAO();
                reparacionExitosa = accesoOrdenReparacion.repararErrorAgregarOrdenReparacion();
                if(!reparacionExitosa){
                    /*JOptionPane.showMessageDialog(null, "Código error: 920\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);*/
                } else {
                    /*JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);*/
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }
    
    private void finalizar(){
        
        OrdenReparacionDTO ordenReparacion = new OrdenReparacionDTO();
        UnidadTransporteDTO tracto = new UnidadTransporteDTO();
        UnidadTransporteDTO plana = new UnidadTransporteDTO();
        try{
            OrdenReparacionDAO acceso = new OrdenReparacionDAO();
            OperadorDTO operador = new OperadorDTO();
            OperadorDAO accesoOperador = new OperadorDAO();
            UnidadTransporteDAO accesoTransporte = new UnidadTransporteDAO();
            
            operador = accesoOperador.obtenerOperador(Integer.parseInt(this.jTFNumeroOperador.getText()), true, false);
            plana = accesoTransporte.obtenerUnidad(this.jTFClavePlana.getText(), true, false, false);
            tracto = accesoTransporte.obtenerUnidad(this.jTFClaveTracto.getText(), true, false, false);
            ordenReparacion = acceso.obtenerOrdenReparacion(Integer.parseInt(this.jTFNumeroOrden.getText()), true, false, true);
            
            acceso.terminarOrdenReparacion(ordenReparacion);
            this.estadoBotonesAlIniciar();
            this.cargarReporteOrdenReparacion();
            
            if(controlSistema.obtenerControlSistema(1, true, true).isNotificarFinOrden()){
                this.enviarReportePorMail(CERRAR_ORDEN);
            }
            
            this.limpiar();
            
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 921\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(ordenReparacion.toString() + plana.toString() + tracto.toString(), 921, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 922\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(ordenReparacion.toString() + plana.toString() + tracto.toString(), 922, UserHome.getUsuario(), ex);
        }
    }
    
    private void cancelar(){
        
        OrdenReparacionDTO ordenRep = new OrdenReparacionDTO();
        UnidadTransporteDTO tracto = new UnidadTransporteDTO();
        UnidadTransporteDTO plana = new UnidadTransporteDTO();
        try{
            if(this.jTCargosDirectos.getRowCount() == 0 && this.jTSalidasAlmacen.getRowCount() == 0){
                OrdenReparacionDAO acceso = new OrdenReparacionDAO();
                OperadorDTO operador = new OperadorDTO();
                OperadorDAO accesoOperador = new OperadorDAO();
                UnidadTransporteDAO accesoTransporte = new UnidadTransporteDAO();
                TransporteReparacionDAO accesoTransporteReparacion = new TransporteReparacionDAO();

                operador = accesoOperador.obtenerOperador(Integer.parseInt(this.jTFNumeroOperador.getText()), true, false);
                plana = accesoTransporte.obtenerUnidad(this.jTFClavePlana.getText(), true, false, false);
                tracto = accesoTransporte.obtenerUnidad(this.jTFClaveTracto.getText(), true, false, false);

                ordenRep = acceso.obtenerOrdenReparacion(Integer.parseInt(this.jTFNumeroOrden.getText()), true, false, true);

                acceso.eliminarOrdenReparacion(ordenRep);
                accesoTransporteReparacion.eliminarReparacionTransportePOrden(ordenRep, UserHome.getUsuario());
                this.limpiar();
                this.estadoBotonesAlIniciar();
            } else {
                JOptionPane.showMessageDialog(null, "No se puede dar de baja una\norden de reparación que\ncontiene salidas de refacciones.\n",
                    "Operación no permitida!!!", JOptionPane.WARNING_MESSAGE); 
            }
            
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 923\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(ordenRep.toString() + plana.toString() + tracto.toString(), 923, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 924\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos ingresados.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(ordenRep.toString() + plana.toString() + tracto.toString(), 924, UserHome.getUsuario(), ex);
        }
    }
    
    public void obtenerOrdenesReparacion(){
        String mensajeError = "";
        try{
            int limite = 300;
            DefaultTableModel modelo = (DefaultTableModel) this.jTOrdenesReparacion.getModel();
            List<OrdenReparacionDTO> ordenesReparacion = null;
            TransporteReparacionDAO accesoTransporteReparacion = new TransporteReparacionDAO();
            List<TransporteReparacionDTO> transportes = null;
            LazyQueryBO lazyQ = new LazyQueryBO();
    //        DecimalFormat formatD = new DecimalFormat("0.00");//No aplica
            try {

                ordenesReparacion = new OrdenReparacionDAO().obtenerOrdenesReparacion(true);

            } catch(SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 925\n" + ex.getMessage()
                        + "\nError al intentar obtener los datos de la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog("ControlOrdenesReparacion obtenerOrdenesReparacion()", 925, UserHome.getUsuario(), ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Código error: 926\n" + ex.getMessage()
                        + "\nError al intentar obtener los datos recibidos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog("ControlOrdenesReparacion obtenerOrdenesReparacion()", 926, UserHome.getUsuario(), ex);
            }

            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            lazyQ.startLazyQuery();
            for(OrdenReparacionDTO ordenRep : ordenesReparacion){
                mensajeError = ordenRep.toString();
                try {

                    transportes = accesoTransporteReparacion.obtenerTransportesPReparacion(ordenRep, true, false, false, false);

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 927\n" + ex.getMessage()
                        + "\nError al intentar obtener los datos de la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                    ErrorLogger.scribirLog("ControlOrdenesReparacion obtenerOrdenesReparacion()" + mensajeError, 927, UserHome.getUsuario(), ex);
                }

                for(TransporteReparacionDTO transporte : transportes){
                    try{
                        mensajeError += transporte.toString();
                        
                        if(transporte.getTransporte().getTipoUnidad().getIdTipo() != 2 && transporte.getTransporte().getTipoUnidad().getIdTipo() != 8) {
                            mensajeError = ordenRep.toString() + transporte.toString();
                            ordenRep.setTracto(transporte.getTransporte());
                        }

                    } catch (Exception ex) {}
                }

                Object datos[] = {ordenRep.getNumeroOrden(), ordenRep.getFechaEntrada(), 
                    ordenRep.getFechaSalida(), ordenRep.getOperador().getNumeroOperador() + "# " +
                        ordenRep.getOperador().getNombre() + " " + ordenRep.getOperador().getApellidos(), 
                    ((ordenRep.getTracto() != null) ? ordenRep.getTracto().getClave() : "#NA" ), 
                    ((ordenRep.isStatus()) ? "Vigente" : "Cancelada")};
                modelo.addRow(datos);

                if(limite-- <= 0){
                    break;
                }
            }
            lazyQ.endLazyQuery();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 928\n" + ex.getMessage()
                    + "\nError al intentar obtener Órdenes de Reparación.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 928, UserHome.getUsuario(), ex);
        }
    }
    
    public void obtenerOrdenReparacion(){
        
        String mensajeError = "";
        try {
            int rowIndex = this.jTOrdenesReparacion.getSelectedRow();
            int numeroOrden = 0;
            OrdenReparacionDTO ordenRep = new OrdenReparacionDTO();
            OrdenReparacionDAO acceso = new OrdenReparacionDAO();
            TransporteReparacionDAO accesoTransporteReparacion = new TransporteReparacionDAO();
            List<TransporteReparacionDTO> transportes = null;
            
            if(rowIndex > -1){
                
                this.limpiar();
                
                this.jTFClavePlana.setText(null);
                this.jTFClaveTracto.setText(null);
                this.jTFKilometrajePlana.setText(null);
                this.jTFKilometrajeTracto.setText(null);
                numeroOrden = Integer.parseInt(this.jTOrdenesReparacion.getValueAt(rowIndex, 0).toString());
                ordenRep = acceso.obtenerOrdenReparacion(numeroOrden, true, true, false);
                transportes = accesoTransporteReparacion.obtenerTransportesPReparacion(ordenRep, true, false, false, true);
                
                
                try{
                    for(TransporteReparacionDTO transporte : transportes){
                        mensajeError = transporte.toString();
                        if(transporte.getTransporte().getTipoUnidad().getIdTipo() == 2 || transporte.getTransporte().getTipoUnidad().getIdTipo() == 8){
                            ordenRep.setPlana(transporte.getTransporte());
                            this.jTFKilometrajePlana.setText(Integer.toString(transporte.getKilometraje()));
                            this.jTADescripcionPlana.setText(((transporte.getDescripcion() != null) ? transporte.getDescripcion() : ""));
                        } else {
                            ordenRep.setTracto(transporte.getTransporte());
                            this.jTFKilometrajeTracto.setText(Integer.toString(transporte.getKilometraje()));
                            this.jTADescripcionTracto.setText(((transporte.getDescripcion() != null) ? transporte.getDescripcion() : ""));
                        }
                    }
                } catch(Exception ex){}
                finally{
                    mensajeError += ordenRep.toString();                    
                }
                
                this.jTFFechaEntrada.setText(((ordenRep.getFechaEntrada() != null) ? ordenRep.getFechaEntrada().toString() : "" ));
                this.jTFFechaSalida.setText(((ordenRep.getFechaSalida() != null) ? ordenRep.getFechaSalida().toString() : "" ));
                this.jTFClavePlana.setText(((ordenRep.getPlana() != null) ? ordenRep.getPlana().getClave() : ""));
                this.jTFClaveTracto.setText(((ordenRep.getTracto() != null) ? ordenRep.getTracto().getClave() : ""));
                this.jTFNumeroOperador.setText(Integer.toString(ordenRep.getOperador().getNumeroOperador()));
                this.jTFNumeroOrden.setText(Integer.toString(ordenRep.getNumeroOrden()));
                this.jTFUsuario.setText(((ordenRep.getUsuario().getNombre() != null) ? ordenRep.getUsuario().getNombre() : "" ) + " " + 
                        ((ordenRep.getUsuario().getApellidos() != null) ? ordenRep.getUsuario().getApellidos() : "" ));
                
                this.ordenReparacion = ordenRep;
                this.obtenerCargosDirectos();
                this.obtenerSalidasAlmacen();
            }
            this.actualizarTotalesGeneralesOrdenReparacion();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 929\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 929, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 930\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos de la tabla.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 930, UserHome.getUsuario(), ex);
        }
    }
    
    public void obtenerCargosDirectos(){
        String mensajeError = "", errorUnidades = "", errorEspeciales = "", errorOperadores = "", errorExternos = "";
        try{
            DecimalFormat formatD = new DecimalFormat("0.00");
            LazyQueryBO lazyQ = new LazyQueryBO();

            //Variables de Apoyo para manipulacion de detalles factura
            this.cargoEspecial = null;
            this.cargoOperador = null;
            this.cargoUnidad = null;
            //Terminan variables de Apoyo

            DefaultTableModel modelo = (DefaultTableModel) this.jTCargosDirectos.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            if(this.ordenReparacion != null){
                mensajeError = ordenReparacion.toString();
                lazyQ.startLazyQuery();//abrir conexion para obtener LazyObjects
                
                //Cargos Especiales

                List<CargoEspecialDTO> cargosEspecial = null;
                try {
                    cargosEspecial = new CargoEspecialDAO().obtenerCargosEspecialesPReparacion(this.ordenReparacion, true, false, false);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 932\n" + ex.getMessage(),
                            "Error al acceder a los detalles de la reparación!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(ordenReparacion.toString(), 932, UserHome.getUsuario(), ex);
                }

                for(CargoEspecialDTO cargoEspecial : cargosEspecial){
                    errorEspeciales = cargoEspecial.toString();
                    Object datos[] = {cargoEspecial.getIdCargoEspecial(), cargoEspecial.getFactura().getFolio(),
                        cargoEspecial.getFactura().getProveedor().getNombre(), 
                        cargoEspecial.getNombreBeneficiario(), cargoEspecial.getRefaccion().getClaveRefaccion(),
                        cargoEspecial.getCantidad(), formatD.format(cargoEspecial.getTotal()), "C. Especial"};
                    modelo.addRow(datos);
                }
                mensajeError += errorEspeciales;

                //Cargos Operadores

                List<CargoOperadorDTO> cargosOperador = null;
                try {
                    cargosOperador = new CargoOperadorDAO().obtenerCargosOperadoresPReparacion(this.ordenReparacion, true, false, false);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 933\n" + ex.getMessage(),
                            "Error al acceder a los detalles de la reparación!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(ordenReparacion.toString(), 933, UserHome.getUsuario(), ex);
                }

                for(CargoOperadorDTO cargoOperador : cargosOperador){
                    errorOperadores = cargoOperador.toString();
                    Object datos[] = {cargoOperador.getIdCargoOperador(), cargoOperador.getFactura().getFolio(),
                        cargoOperador.getFactura().getProveedor().getNombre(), 
                        cargoOperador.getOperador().getNumeroOperador() + "# " + cargoOperador.getOperador().getNombre() + 
                        " " + cargoOperador.getOperador().getApellidos(), cargoOperador.getRefaccion().getClaveRefaccion(), 
                        cargoOperador.getCantidad(), formatD.format(cargoOperador.getTotal()), "C. Operador"};
                    modelo.addRow(datos);
                }
                mensajeError += errorOperadores;
                //Cargos Unidades

                List<CargoUnidadDTO> cargosUnidad = null;
                try {
                    cargosUnidad = new CargoUnidadDAO().obtenerCargosUnidadesPReparacion(this.ordenReparacion, true, false, false);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 934\n" + ex.getMessage(),
                            "Error al acceder a los detalles de la reparación!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(ordenReparacion.toString(), 934, UserHome.getUsuario(), ex);
                }

                for(CargoUnidadDTO cargoUnidad : cargosUnidad){
                    errorUnidades = cargoUnidad.toString();
                    Object datos[] = {cargoUnidad.getIdCargoUnidad(), cargoUnidad.getFactura().getFolio(),
                        cargoUnidad.getFactura().getProveedor().getNombre(), 
                        cargoUnidad.getUnidad().getClave(), cargoUnidad.getRefaccion().getClaveRefaccion(), 
                        cargoUnidad.getCantidad(), formatD.format(cargoUnidad.getTotal()), "C. Unidad"};
                    modelo.addRow(datos);
                }
                
                mensajeError += errorUnidades;
                //Trabajos Externos

                List<TrabajoExternoDTO> trabajosExternos = null;
                try {
                    trabajosExternos = new TrabajoExternoDAO().obtenerTrabajosExternosPReparacion(this.ordenReparacion, true, false, false);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 935\n" + ex.getMessage(),
                            "Error al acceder a los detalles de la reparación!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(ordenReparacion.toString(), 935, UserHome.getUsuario(), ex);
                }

                for(TrabajoExternoDTO trabajoExterno : trabajosExternos){
                    errorExternos = trabajoExterno.toString();
                    Object datos[] = {trabajoExterno.getNumeroTrabajoExterno(), trabajoExterno.getFactura().getFolio(),
                        trabajoExterno.getFactura().getProveedor().getNombre(), 
                        trabajoExterno.getUnidadTransporte().getClave(), trabajoExterno.getDescripcion(), 
                        trabajoExterno.getCantidad(), formatD.format(trabajoExterno.getMonto()), "T. Externo"};
                    modelo.addRow(datos);
                }

                lazyQ.endLazyQuery();

            }
            mensajeError += errorExternos;
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 936\n" + ex.getMessage()
                    + "\nError al intentar obtener los Cargos Directos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 936, UserHome.getUsuario(), ex);
        }
    }
    
    public void obtenerCargoDirecto(){
        
    }
    
    public void obtenerSalidasAlmacen(){
        String mensajeError = "", errorUnidades = "", errorOperadores = "", errorEspeciales = "" /*,errorBodegas = ""*/;
        try{
            SalidaEspecialDAO accesoEspecial = new SalidaEspecialDAO();
            SalidaOperadorDAO accesoOperador = new SalidaOperadorDAO();
            SalidaUnidadDAO accesoUnidad = new SalidaUnidadDAO();

            List<SalidaEspecialDTO> salidasEspeciales = null;
            List<SalidaOperadorDTO> salidasOperador = null;
            List<SalidaUnidadDTO> salidasUnidad = null;

            DecimalFormat formatD = new DecimalFormat("0.00");
            LazyQueryBO lazyQ = new LazyQueryBO();

            DefaultTableModel modelo = (DefaultTableModel) this.jTSalidasAlmacen.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            if(this.ordenReparacion != null){
                lazyQ.startLazyQuery();//abrir conexion para obtener LazyObjects
                mensajeError = ordenReparacion.toString();
                
                //Salidas Especiales
                try {
                    salidasEspeciales = accesoEspecial.obtenerSalidasEspecialesPReparacion(this.ordenReparacion, true, false, false);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 938\n" + ex.getMessage(),
                            "Error al acceder a los detalles de la reparación!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(ordenReparacion.toString(), 938, UserHome.getUsuario(), ex);
                }

                for(SalidaEspecialDTO salidaEspecial : salidasEspeciales){
                    errorEspeciales = salidaEspecial.toString();
                    Object datos[] = {salidaEspecial.getNumeroSalida(), salidaEspecial.getNombreBeneficiario(),
                        salidaEspecial.getRefaccion().getClaveRefaccion(), 
                        salidaEspecial.getCantidad(), formatD.format(salidaEspecial.getCosto() / salidaEspecial.getCantidad()),
                        formatD.format(salidaEspecial.getCosto()), "S. Especial"};
                    modelo.addRow(datos);
                }

                mensajeError += errorEspeciales;
                
                //Salidas Operadores
                try {
                    salidasOperador = accesoOperador.obtenerSalidasOperadoresPReparacion(this.ordenReparacion, true, false, false);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 939\n" + ex.getMessage(),
                            "Error al acceder a los detalles de la reparación!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(ordenReparacion.toString(), 939, UserHome.getUsuario(), ex);
                }

                for(SalidaOperadorDTO salidaOperador : salidasOperador){
                    errorOperadores = salidaOperador.toString();
                    Object datos[] = {salidaOperador.getNumeroSalida(), 
                        salidaOperador.getOperador().getNumeroOperador() + "# " + salidaOperador.getOperador().getNombre() + 
                        " " + salidaOperador.getOperador().getApellidos(), salidaOperador.getRefaccion().getClaveRefaccion(), 
                        salidaOperador.getCantidad(), formatD.format(salidaOperador.getCosto() / salidaOperador.getCantidad()), 
                        formatD.format(salidaOperador.getCosto()), "S. Operador"};
                    modelo.addRow(datos);
                }

                mensajeError += errorOperadores;
                
                //Salidas Unidades
                try {
                    salidasUnidad = accesoUnidad.obtenerSalidasUnidadPReparacion(this.ordenReparacion, true, false, false);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 940\n" + ex.getMessage(),
                            "Error al acceder a los detalles de la reparacion!!!", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(ordenReparacion.toString(), 940, UserHome.getUsuario(), ex);
                }

                for(SalidaUnidadDTO salidaUnidad : salidasUnidad){
                    errorUnidades = salidaUnidad.toString();
                    Object datos[] = {salidaUnidad.getNumeroSalida(), salidaUnidad.getTransporte().getClave(),
                        salidaUnidad.getRefaccion().getClaveRefaccion(), salidaUnidad.getCantidad(), 
                        formatD.format(salidaUnidad.getCosto() / salidaUnidad.getCantidad()), 
                        formatD.format(salidaUnidad.getCosto()), "S. Unidad"};
                    modelo.addRow(datos);
                }

                mensajeError += errorUnidades;
                lazyQ.endLazyQuery();

            }
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 941\n" + ex.getMessage()
                    + "\nError al intentar obtener las Salidas de Almacén.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 941, UserHome.getUsuario(), ex);
        }
    }
    
    public void obtenerSalidaAlmacen(){
        
    }
    
    private void limpiar(){
        
        try{
            //this.cargoBodega = null;
            this.cargoEspecial = null;
            this.cargoOperador = null;
            this.cargoUnidad = null;
            this.ordenReparacion = null;

            this.jTFClavePlana.setText(null);
            this.jTFClaveTracto.setText(null);
            this.jTFFechaEntrada.setText(null);
            this.jTFFechaSalida.setText(null);
            this.jTFKilometrajePlana.setText(null);
            this.jTFKilometrajeTracto.setText(null);
            this.jTFNumeroOperador.setText(null);
            this.jTFNumeroOrden.setText(null);
            this.jTFUsuario.setText(UserHome.getUsuario().getNombre() + " " + UserHome.getUsuario().getApellidos());
            
            this.jTATotalesReparacion.setText(null);
            this.jTADescripcionPlana.setText(null);
            this.jTADescripcionTracto.setText(null);
            
            this.actualizarTablas();
            this.estadoBotonesAlIniciar();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 942\n" + ex.getMessage(),
                        "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOrdenesReparacion limpiar()", 942, UserHome.getUsuario(), ex);
        }
    }
    
    public void actualizarTablas(){
        this.obtenerOrdenesReparacion();
        this.obtenerCargosDirectos();
        this.obtenerSalidasAlmacen();
    }
    
    private void estadoBotonesAlIniciar(){
        try{
            this.jBAgregarOrden.setEnabled(true);
            this.jBCancelarOrden.setEnabled(false);
            this.jBFinalizar.setEnabled(false);

            this.jMIAgregarOrden.setEnabled(true);
            this.jMICancelarOrden.setEnabled(false);
            this.jMIFinalizar.setEnabled(false);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 943\n" + ex.getMessage(),
                        "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOrdenesReparacion estadoBotonesAlIniciar()", 943, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesClicReparacion(OrdenReparacionDTO reparacion){
        try{
            boolean estaFinalizado = reparacion.getFechaSalida() == null;
            this.jBAgregarOrden.setEnabled(false);
            this.jMIAgregarOrden.setEnabled(false);

            if(estaFinalizado && reparacion.isStatus()){
                this.jBFinalizar.setEnabled(true);
                this.jMIFinalizar.setEnabled(true);
            } else {
                this.jBFinalizar.setEnabled(false);
                this.jMIFinalizar.setEnabled(false);
            }

            this.jBCancelarOrden.setEnabled(reparacion.isStatus() && estaFinalizado);
            this.jMICancelarOrden.setEnabled(reparacion.isStatus() && estaFinalizado);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 944\n" + ex.getMessage(),
                        "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOrdenesReparacion estadoBotonesClicReparacion()", 944, UserHome.getUsuario(), ex);
        }
    }
    
    public void actualizarTotalesGeneralesOrdenReparacion(){
        try {
            String totales = "";
            SalidaAlmacenDAO accesoSalidaAlmacen = new SalidaAlmacenDAO();
            SalidaUnidadDAO accesoSalidaUnidad = new SalidaUnidadDAO();
            SalidaOperadorDAO accesoSalidaOperador = new SalidaOperadorDAO();
            SalidaEspecialDAO accesoSalidaEspecial = new SalidaEspecialDAO();
            //SalidaBodegaDAO accesoSalidaBodegas = new SalidaBodegaDAO();(Eliminado)
            CargoDirectoDAO accesoCargoDirecto = new CargoDirectoDAO();
            CargoUnidadDAO accesoCargoUnidad = new CargoUnidadDAO();
            CargoOperadorDAO accesoCargoOperador = new CargoOperadorDAO();
            CargoEspecialDAO accesoCargoEspecial = new CargoEspecialDAO();
            //CargoBodegaDAO accesoCargoBodega = new CargoBodegaDAO();(Eliminado)
            TrabajoExternoDAO accesoTrabajoExterno = new TrabajoExternoDAO();
            
            double totalCargos = 0.0;
            double totalSalidas = 0.0;
            double totalTracto = 0.0;
            double totalPlana = 0.0;
            double totalGeneral = 0.0;
            //double totalTemporal = 0.0;
            double totalCargosUnidades = 0.0;
            double totalSalidasUnidades = 0.0;
            double totalCargosOperadores = 0.0;
            double totalSalidasOperadores = 0.0;
            double totalCargosEspeciales = 0.0;
            double totalSalidasEspeciales = 0.0;
            //double totalCargosBodegas = 0.0;
            //double totalSalidasBodegas = 0.0;
            double totalTrabajosExternos = 0.0;
            DecimalFormat formatD = new DecimalFormat("0.00");
            LazyQueryDAO lazyQ = new LazyQueryDAO();
            
            //Iniciar queries
            lazyQ.startLazyQuery();
            totalSalidasUnidades = accesoSalidaUnidad.obtenerTotalSalidasUnidadesPReparacion(ordenReparacion, false, false);
            totalSalidasOperadores = accesoSalidaOperador.obtenerTotalSalidasOperadorPReparacion(ordenReparacion, false, false);
            totalSalidasEspeciales = accesoSalidaEspecial.obtenerTotalSalidasEspecialesPReparacion(ordenReparacion, false, false);
            //totalSalidasBodegas = accesoSalidaBodegas.obtenerTotalSalidasBodegaPReparacion(ordenReparacion, false, false);(Eliminado)
            totalCargosUnidades = accesoCargoUnidad.obtenerTotalCargosUnidadesPReparacion(ordenReparacion, false, false);
            totalCargosOperadores = accesoCargoOperador.obtenerTotalCargosOperadorPReparacion(ordenReparacion, false, false);
            totalCargosEspeciales = accesoCargoEspecial.obtenerTotalCargosEspecialesPReparacion(ordenReparacion, false, false);
            //totalCargosBodegas = accesoCargoBodega.obtenerTotalCargosBodegaPReparacion(ordenReparacion, false, false);(Eliminado)
            totalTrabajosExternos = accesoTrabajoExterno.obtenerTotalTrabajosExternoPReparacion(ordenReparacion, false, false);
            totalCargos = totalCargosUnidades + totalCargosOperadores + totalCargosEspeciales /*+ totalCargosBodegas*/;
            totalSalidas = totalSalidasUnidades + totalSalidasOperadores + totalSalidasEspeciales /*+ totalSalidasBodegas*/;
            totalTracto = accesoCargoDirecto.obtenerTotalCargosDirectosTractoPReparacion(ordenReparacion, false, false) 
                    + accesoSalidaAlmacen.obtenerTotalSalidasTractoPReparacion(ordenReparacion, true, true) 
                    + accesoTrabajoExterno.obtenerTotalTrabajosExternosTractoPReparacion(ordenReparacion, true, true);
            totalPlana = accesoCargoDirecto.obtenerTotalCargosDirectosPlanaPReparacion(ordenReparacion, true, true) 
                    + accesoSalidaAlmacen.obtenerTotalSalidasPlanaPReparacion(ordenReparacion, true, true)
                    + accesoTrabajoExterno.obtenerTotalTrabajosExternosPlanaPReparacion(ordenReparacion, true, true);
            totalGeneral = totalCargos + totalSalidas + totalTrabajosExternos;
            
            
            totales = "Salidas Unidades     = " + formatD.format(totalSalidasUnidades) + "\t\t";
            totales += "Cargos Unidades     = " + formatD.format(totalCargosUnidades) + "\t\t";
            totales += "Trabajos Externos = " + formatD.format(totalTrabajosExternos) + "\n";
            totales += "Salidas Operadores = " + formatD.format(totalSalidasOperadores) + "\t\t";
            totales += "Cargos Operadores = " + formatD.format(totalCargosOperadores) + "\t\t";
            totales += "Tracto = " + formatD.format(totalTracto) + "\n";
            totales += "Salidas Especiales  = " + formatD.format(totalSalidasEspeciales) + "\t\t";
            totales += "Cargos Especiales  = " + formatD.format(totalCargosEspeciales) + "\t\t";
            totales += "Plana  = " + formatD.format(totalPlana) + "\n";
            //totales += "Salidas Bodegas      = " + formatD.format(totalSalidasBodegas) + "\t\t";(Eliminado)
            //totales += "Cargos Bodegas      = " + formatD.format(totalCargosBodegas) + "\t\t";(Eliminado)
            totales += "Orden Reparación = " + formatD.format(totalGeneral) + "\n";
            totales += "Salidas Almacén      = " + formatD.format(totalSalidas) + "\t\t";
            totales += "Cargos Directos       = " + formatD.format(totalCargos) + "\t\t";
            lazyQ.endLazyQuery();
            this.jTATotalesReparacion.setText(totales);
            //Finalizar queries
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 945\n" + ex.getMessage(),
                            "Error al acceder a los totales de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(ordenReparacion.toString(), 945, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 946\n" + ex.getMessage(),
                            "Error al convertir los totales de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(ordenReparacion.toString(), 946, UserHome.getUsuario(), ex);
        }
    }
    
    private void cargarReporteOrdenReparacion(){
        try {
            String reportPath = "/reports/ReporteOrdenRepRemex.jasper";
            String logoPath = "/icons/Logo Efectivo Negro.png";
            Locale locale = new Locale("en", "US");
            InputStream jasperStream = getClass().getResourceAsStream(reportPath);
            JasperReport jReport = (JasperReport) JRLoader.loadObject(jasperStream);
            JasperPrint jPrint = null;
            HashMap parameters = new HashMap();
            LazyQueryDAO lazyQ = new LazyQueryDAO();
            parameters.put("NUMERO_ORDEN", this.ordenReparacion.getNumeroOrden());
            parameters.put(JRParameter.REPORT_LOCALE, locale);
            parameters.put("LOGO", this.getClass().getResourceAsStream(logoPath));
            lazyQ.startLazyQuery();
            jPrint = JasperFillManager.fillReport(jReport, parameters, DBConnection.getConn());
            JasperViewer.viewReport(jPrint, false);
            lazyQ.endLazyQuery();
        } catch(SQLException ex) { 
            JOptionPane.showMessageDialog(null, "Código error: 1172\n" + ex.getMessage(),
                            "Error al acceder a los datos en la BD de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOrdenesReparacion cargarReporteOrdenReparacion()", 1172, UserHome.getUsuario(), ex);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1173\n" + ex.getMessage(),
                            "Error al generar el reporte de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOrdenesReparacion cargarReporteOrdenReparacion()", 1173, UserHome.getUsuario(), ex);
            //Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1174\n" + ex.getMessage(),
                            "Error error al ver el reporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOrdenesReparacion cargarReporteOrdenReparacion()", 1174, UserHome.getUsuario(), ex);
        }
    }
    
    private void generarReporteOrdenReparacion(){
        ReporteOrdenReparacion rOrdenReparacion = new ReporteOrdenReparacion();
        rOrdenReparacion.setLocationRelativeTo(null);
        rOrdenReparacion.setVisible(true);
    }
    
    private void buscarOperador(){
        BuscarCampoSimple buscarCampo = new BuscarCampoSimple();
        buscarCampo.setTipoRespuesta(2);
        buscarCampo.setRecibirTexto(this.jTFNumeroOperador);
        buscarCampo.setLocationRelativeTo(null);
        buscarCampo.setVisible(true);
    }
    
    private void modificarOrden(){
        if(UserHome.getUsuario().getPrivilegio() == 1){
            CambiosOrdenesReparacion cOR = new CambiosOrdenesReparacion();
            cOR.setControlOrdenesReparacion(this);
            cOR.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "El usuario activo no tiene los "
                    + "privilegios\nnecesarios para ejecutar la operación.", 
                    "Privilegios insuficientes", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void exportarReporteReparacionPDF(){
        try{
            String reportPath = "/reports/ReporteOrdenRepRemex.jasper";
            String logoPath = "/icons/Logo Efectivo Negro.png";
            Locale locale = new Locale("en", "US"); 
            if("".equals(this.jTFNumeroOrden.getText()) || this.jTFNumeroOrden == null){
                JOptionPane.showMessageDialog(this, "Aún no se escribe un número de orden.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            String nOrden = this.jTFNumeroOrden.getText();
            int numeroOrden = Integer.parseInt(nOrden);
            
            InputStream jasperStream = getClass().getResourceAsStream(reportPath);
            JasperReport jReport = (JasperReport) JRLoader.loadObject(jasperStream);
            JasperPrint jPrint = null;
            HashMap parameters = new HashMap();
            LazyQueryDAO lazyQ = new LazyQueryDAO();
            parameters.put("NUMERO_ORDEN", numeroOrden);
            parameters.put(JRParameter.REPORT_LOCALE, locale);
            parameters.put("LOGO", this.getClass().getResourceAsStream(logoPath));
            lazyQ.startLazyQuery();
            jPrint = JasperFillManager.fillReport(jReport, parameters, DBConnection.getConn());
            JasperExportManager.exportReportToPdfFile(jPrint, new MailData().getRelativeMailerPath() + "\\" + new MailData().getReportName());
            lazyQ.endLazyQuery();
        } catch(SQLException ex) { 
            JOptionPane.showMessageDialog(null, "Código error: 1371\n" + ex.getMessage(),
                            "Error al acceder a los datos en la BD de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ReporteOrdenReparacion generarReporteOrdenReparacion()", 1371, UserHome.getUsuario(), ex);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1372\n" + ex.getMessage(),
                            "Error al generar el reporte de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ReporteOrdenReparacion generarReporteOrdenReparacion()", 1372, UserHome.getUsuario(), ex);
            //Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1373\n" + ex.getMessage(),
                            "Error error al ver el reporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ReporteOrdenReparacion generarReporteOrdenReparacion()", 1373, UserHome.getUsuario(), ex);
        }
    }

    private void enviarReportePorMail(int tipo){
        exportarReporteReparacionPDF();
        Mailer mailer = new Mailer(new AccountAddress("taller.remex@gmail.com","remex2013"));
        MailData mailData = new MailData();
        mailer.send(((tipo == ABRIR_ORDEN) ? "Reporte apertura orden de reparación" : 
                "Reporte cierre de orden de reparacion"), mailData.getRelativeMailerPath(), 
                mailData.getReportName(), MailData.NOTIFICACION);
    }
    
    /**
     * @param args the command line argumentss
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlOrdenesReparacion().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregarOrden;
    private javax.swing.JButton jBCancelarOrden;
    private javax.swing.JButton jBFinalizar;
    private javax.swing.JLabel jLClavePlana;
    private javax.swing.JLabel jLClaveTracto;
    private javax.swing.JLabel jLDescripcionPlana;
    private javax.swing.JLabel jLDescripcionTracto;
    private javax.swing.JLabel jLFechaEntrada;
    private javax.swing.JLabel jLFechaSalida;
    private javax.swing.JLabel jLKilometrajePlana;
    private javax.swing.JLabel jLKilometrajeTracto;
    private javax.swing.JLabel jLNumeroOperador;
    private javax.swing.JLabel jLNumeroOrden;
    private javax.swing.JLabel jLUsuario;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIAgregarOrden;
    private javax.swing.JMenuItem jMIBuscarOperador;
    private javax.swing.JMenuItem jMICancelarOrden;
    private javax.swing.JMenuItem jMIFinalizar;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMIModificar;
    private javax.swing.JMenuItem jMIReporteCostoReparaciones;
    private javax.swing.JMenuItem jMIReporteOrdenReparacion;
    private javax.swing.JMenuItem jMIReporteReparacionesPUnidad;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JMenu jMReportes;
    private javax.swing.JPanel jPCargosDirectos;
    private javax.swing.JPanel jPOrdenesReparacion;
    private javax.swing.JPanel jPSalidasAlmacen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea jTADescripcionPlana;
    private javax.swing.JTextArea jTADescripcionTracto;
    private javax.swing.JTextArea jTATotalesReparacion;
    private javax.swing.JTable jTCargosDirectos;
    private javax.swing.JTextField jTFClavePlana;
    private javax.swing.JTextField jTFClaveTracto;
    private javax.swing.JTextField jTFFechaEntrada;
    private javax.swing.JTextField jTFFechaSalida;
    private javax.swing.JTextField jTFKilometrajePlana;
    private javax.swing.JTextField jTFKilometrajeTracto;
    private javax.swing.JTextField jTFNumeroOperador;
    private javax.swing.JTextField jTFNumeroOrden;
    private javax.swing.JTextField jTFUsuario;
    private javax.swing.JTable jTOrdenesReparacion;
    private javax.swing.JTable jTSalidasAlmacen;
    // End of variables declaration//GEN-END:variables
}
