/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.OperadorDTO;
import data.LazyQueryDAO;
import data.OperadorDAO;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import support.DBConnection;

/**
 *
 * @author David Israel
 */
public class ControlOperadores extends javax.swing.JFrame {

    /**
     * Creates new form ControlOperadores
     */
    public ControlOperadores() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.estadoBotonesInicio();
            this.obtenerOperadores();
            this.jTCatalogoOperadores.setSelectionMode(0);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 898\n" + ex.getMessage(),
                    "Error al iniciar ventana Control Operadores!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlOperadores()", 898, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLNumeroOperador = new javax.swing.JLabel();
        jTFNumeroOperador = new javax.swing.JTextField();
        jLFechaAlta = new javax.swing.JLabel();
        jTFFechaAlta = new javax.swing.JTextField();
        jLNombre = new javax.swing.JLabel();
        jTFNombre = new javax.swing.JTextField();
        jLApellidos = new javax.swing.JLabel();
        jTFApellidos = new javax.swing.JTextField();
        jBDarBaja = new javax.swing.JButton();
        jBModificar = new javax.swing.JButton();
        jBAgregar = new javax.swing.JButton();
        jPCatalogoOperadores = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTCatalogoOperadores = new javax.swing.JTable();
        jBMMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAgregar = new javax.swing.JMenuItem();
        jMIModificar = new javax.swing.JMenuItem();
        jMIDarBaja = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMReportes = new javax.swing.JMenu();
        jMICatalogoOperadores = new javax.swing.JMenuItem();
        jMICatalogoOperadoresCBajas = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Control de Operadores Sistema de Administración Mantenimiento");

        jLNumeroOperador.setText("Número Operador:");

        jTFNumeroOperador.setEditable(false);
        jTFNumeroOperador.setFocusable(false);

        jLFechaAlta.setText("Fecha de Alta:");

        jTFFechaAlta.setEditable(false);
        jTFFechaAlta.setFocusable(false);

        jLNombre.setText("Nombre:");

        jLApellidos.setText("Apellidos:");

        jBDarBaja.setText("Dar de Baja");
        jBDarBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDarBajaActionPerformed(evt);
            }
        });

        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jBAgregar.setText("Agregar");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });

        jPCatalogoOperadores.setBorder(javax.swing.BorderFactory.createTitledBorder("Catálogo de Operadores"));

        jTCatalogoOperadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número de Operador", "Nombre", "Apellidos", "Fecha Alta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTCatalogoOperadores.getTableHeader().setReorderingAllowed(false);
        jTCatalogoOperadores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTCatalogoOperadoresMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTCatalogoOperadores);
        if (jTCatalogoOperadores.getColumnModel().getColumnCount() > 0) {
            jTCatalogoOperadores.getColumnModel().getColumn(0).setMinWidth(150);
            jTCatalogoOperadores.getColumnModel().getColumn(0).setPreferredWidth(150);
            jTCatalogoOperadores.getColumnModel().getColumn(0).setMaxWidth(150);
        }

        javax.swing.GroupLayout jPCatalogoOperadoresLayout = new javax.swing.GroupLayout(jPCatalogoOperadores);
        jPCatalogoOperadores.setLayout(jPCatalogoOperadoresLayout);
        jPCatalogoOperadoresLayout.setHorizontalGroup(
            jPCatalogoOperadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCatalogoOperadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPCatalogoOperadoresLayout.setVerticalGroup(
            jPCatalogoOperadoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCatalogoOperadoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 242, Short.MAX_VALUE)
                .addContainerGap())
        );

        jMArchivo.setText("Archivo");

        jMIAgregar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIAgregar.setText("Agregar");
        jMIAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregar);

        jMIModificar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMIModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Modify-16.png"))); // NOI18N
        jMIModificar.setText("Modificar");
        jMIModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIModificarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIModificar);

        jMIDarBaja.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        jMIDarBaja.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Trash-16.png"))); // NOI18N
        jMIDarBaja.setText("Dar de Baja");
        jMIDarBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIDarBajaActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIDarBaja);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jBMMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiar);

        jBMMenu.add(jMEditar);

        jMReportes.setText("Reportes");

        jMICatalogoOperadores.setText("Catálogo Operadores");
        jMICatalogoOperadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICatalogoOperadoresActionPerformed(evt);
            }
        });
        jMReportes.add(jMICatalogoOperadores);

        jMICatalogoOperadoresCBajas.setText("Catálogo Operadores c/ Bajas");
        jMICatalogoOperadoresCBajas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMICatalogoOperadoresCBajasActionPerformed(evt);
            }
        });
        jMReportes.add(jMICatalogoOperadoresCBajas);

        jBMMenu.add(jMReportes);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMAyuda.add(jMIVerManual);

        jBMMenu.add(jMAyuda);

        setJMenuBar(jBMMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBDarBaja))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLNombre)
                                    .addComponent(jLNumeroOperador))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFNumeroOperador)
                                    .addComponent(jTFNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLFechaAlta)
                                    .addComponent(jLApellidos))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFApellidos, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                                    .addComponent(jTFFechaAlta))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPCatalogoOperadores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAgregar, jBDarBaja, jBModificar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNumeroOperador)
                    .addComponent(jTFNumeroOperador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLFechaAlta)
                    .addComponent(jTFFechaAlta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNombre)
                    .addComponent(jTFNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLApellidos)
                    .addComponent(jTFApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBDarBaja)
                    .addComponent(jBModificar)
                    .addComponent(jBAgregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPCatalogoOperadores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTCatalogoOperadoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTCatalogoOperadoresMouseClicked
        this.obtenerOperador();
    }//GEN-LAST:event_jTCatalogoOperadoresMouseClicked

    private void jMIAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jMIAgregarActionPerformed

    private void jMIModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jMIModificarActionPerformed

    private void jMIDarBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIDarBajaActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jMIDarBajaActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jBDarBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDarBajaActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jBDarBajaActionPerformed

    private void jMICatalogoOperadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICatalogoOperadoresActionPerformed
        this.generarCatalogoOperadores();
    }//GEN-LAST:event_jMICatalogoOperadoresActionPerformed

    private void jMICatalogoOperadoresCBajasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMICatalogoOperadoresCBajasActionPerformed
        this.generarCatalogoOperadoresCBajas();
    }//GEN-LAST:event_jMICatalogoOperadoresCBajasActionPerformed

    private void agregar(){
        OperadorDTO operador = new OperadorDTO();
        try {
            if("".equals(this.jTFNombre.getText()) || this.jTFNombre == null){
                JOptionPane.showMessageDialog(this, "No se ha escrito un nombre\nde operador.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if("".equals(this.jTFApellidos.getText()) || this.jTFApellidos == null){
                JOptionPane.showMessageDialog(this, "Aún no se le agrega un apellido\nal operador.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            OperadorDAO acceso = new OperadorDAO();
            operador.setApellidos(this.jTFApellidos.getText());
            operador.setNombre(this.jTFNombre.getText());
            acceso.agregarOperador(operador);
            this.limpiar();
        } catch (SQLException ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 899\n" + ex.getMessage(),
                        "Error al obtener los datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(operador.toString(), 899, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                OperadorDAO accesoOperador = new OperadorDAO();
                reparacionExitosa = accesoOperador.repararErrorAgregarOperador();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 900\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(operador.toString(), 900, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(ControlOperadores.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (Exception ex){
            try {
                JOptionPane.showMessageDialog(null, "Código error: 901\n" + ex.getMessage(),
                        "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(operador.toString(), 901, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                OperadorDAO accesoOperador = new OperadorDAO();
                reparacionExitosa = accesoOperador.repararErrorAgregarOperador();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 902\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(operador.toString(), 902, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(ControlOperadores.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }
    
    private void modificar(){
        OperadorDTO operador = new OperadorDTO();
        try {
            OperadorDAO acceso = new OperadorDAO();
            operador.setNumeroOperador(Integer.parseInt(this.jTFNumeroOperador.getText()));
            operador = acceso.obtenerOperador(operador.getNumeroOperador(), true, true);
            operador.setApellidos(this.jTFApellidos.getText());
            operador.setNombre(this.jTFNombre.getText());
            acceso.modificarOperador(operador);
            this.limpiar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 903\n" + ex.getMessage(),
                    "Error al obtener los datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(operador.toString(), 903, UserHome.getUsuario(), ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 904\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(operador.toString(), 904, UserHome.getUsuario(), ex);
        }
    }
    
    private void eliminar(){
        OperadorDTO operador = new OperadorDTO();
        try {
            OperadorDAO acceso = new OperadorDAO();
            operador.setNumeroOperador(Integer.parseInt(this.jTFNumeroOperador.getText()));
            operador = acceso.obtenerOperador(operador.getNumeroOperador(), true, true);
            acceso.eliminarOperador(operador);
            this.limpiar();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 905\n" + ex.getMessage(),
                    "Error al obtener los datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(operador.toString(), 905, UserHome.getUsuario(), ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 906\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(operador.toString(), 906, UserHome.getUsuario(), ex);
        }
    }
    
    private void limpiar(){
        try{
            this.jTFApellidos.setText(null);
            this.jTFFechaAlta.setText(null);
            this.jTFNombre.setText(null);
            this.jTFNumeroOperador.setText(null);
            DefaultTableModel modelo = (DefaultTableModel) this.jTCatalogoOperadores.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            this.estadoBotonesInicio();
            this.obtenerOperadores();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 907\n" + ex.getMessage(),
                    "Error al limpiar los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOperadores limpiar()", 907, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerOperador(){
        OperadorDTO operador = new OperadorDTO();
        try {
            int index = this.jTCatalogoOperadores.getSelectedRow();
            String numero = null;

            if(index > -1){
                numero = ((this.jTCatalogoOperadores.getValueAt(index, 0) != null) ? this.jTCatalogoOperadores.getValueAt(index, 0).toString() : "");
                if(numero != null) {
                        operador = new OperadorDAO().obtenerOperador(Integer.parseInt(numero), true, true);
                    this.jTFNumeroOperador.setText(Integer.toString(operador.getNumeroOperador()));
                    this.jTFNombre.setText(operador.getNombre());
                    this.jTFApellidos.setText(operador.getApellidos());
                    this.jTFFechaAlta.setText(operador.getFechaIngreso().toString());
                    this.estadoBotonesClicOperadores();
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 908\n" + ex.getMessage(),
                    "Error al obtener los datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(operador.toString(), 908, UserHome.getUsuario(), ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 909\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(operador.toString(), 909, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerOperadores(){
        String mensajeError = "";
        try {
            DefaultTableModel modelo = (DefaultTableModel) this.jTCatalogoOperadores.getModel();
            List<OperadorDTO> operadores = null;
                operadores = new OperadorDAO().obtenerOperadores();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            for(OperadorDTO operador : operadores){
                Object datos[] = {operador.getNumeroOperador(), operador.getNombre(), operador.getApellidos(), operador.getFechaIngreso()};
                modelo.addRow(datos);
            }
        }  catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 910\n" + ex.getMessage(),
                    "Error al obtener los datos de la BD!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(mensajeError, 910, UserHome.getUsuario(), ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 911\n" + ex.getMessage(),
                    "Error al obtener los datos!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog(mensajeError, 911, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesInicio(){
        try{
            this.jBAgregar.setEnabled(true);
            this.jBDarBaja.setEnabled(false);
            this.jBModificar.setEnabled(false);

            this.jMIAgregar.setEnabled(true);
            this.jMIDarBaja.setEnabled(false);
            this.jMIModificar.setEnabled(false);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 912\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOperadores estadoBotonesInicio()", 912, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesClicOperadores(){
        try{
            this.jBAgregar.setEnabled(false);
            this.jBDarBaja.setEnabled(true);
            this.jBModificar.setEnabled(true);

            this.jMIAgregar.setEnabled(false);
            this.jMIDarBaja.setEnabled(true);
            this.jMIModificar.setEnabled(true);
        } catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 913\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOperadores estadoBotonesClicOperadores", 913, UserHome.getUsuario(), ex);
        }
    }
    
    private void generarCatalogoOperadores(){
        try {
            String reportPath = "/reports/ReporteOperadoresRemex.jasper";
            String logoPath = "/icons/Logo Efectivo Negro.png";
            Locale locale = new Locale("en", "US");
            InputStream jasperStream = getClass().getResourceAsStream(reportPath);
            JasperReport jReport = (JasperReport)JRLoader.loadObject(jasperStream);
            JasperPrint jPrint = null;
            Map<String,Object> parameters = new HashMap<>();
            LazyQueryDAO lazyQ = new LazyQueryDAO();
            parameters.put(JRParameter.REPORT_LOCALE, locale);
            parameters.put("LOGO", this.getClass().getResourceAsStream(logoPath));
            lazyQ.startLazyQuery();
            jPrint = JasperFillManager.fillReport(jReport, parameters, DBConnection.getConn());
            JasperViewer.viewReport(jPrint, false);
            lazyQ.endLazyQuery();
        } catch(SQLException ex) { 
            JOptionPane.showMessageDialog(null, "Código error: 1178\n" + ex.getMessage(),
                            "Error al acceder a los datos en la BD de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOperadores generarCatalogoOperadores()", 1178, UserHome.getUsuario(), ex);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1179\n" + ex.getMessage(),
                            "Error al generar el reporte de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOperadores generarCatalogoOperadores()", 1179, UserHome.getUsuario(), ex);
            //Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1180\n" + ex.getMessage(),
                            "Error error al ver el reporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOperadores generarCatalogoOperadores()", 1180, UserHome.getUsuario(), ex);
        }
    }
    
    private void generarCatalogoOperadoresCBajas(){
        try {
            String reportPath = "/reports/ReporteOperadoresRemexCBajas.jasper";
            String logoPath = "/icons/Logo Efectivo Negro.png";
            Locale locale = new Locale("en", "US");
            InputStream jasperStream = getClass().getResourceAsStream(reportPath);
            JasperReport jReport = (JasperReport)JRLoader.loadObject(jasperStream);
            JasperPrint jPrint = null;
            Map<String,Object> parameters = new HashMap<>();
            LazyQueryDAO lazyQ = new LazyQueryDAO();
            parameters.put(JRParameter.REPORT_LOCALE, locale);
            parameters.put("LOGO", this.getClass().getResourceAsStream(logoPath));
            lazyQ.startLazyQuery();
            jPrint = JasperFillManager.fillReport(jReport, parameters, DBConnection.getConn());
            JasperViewer.viewReport(jPrint, false);
            lazyQ.endLazyQuery();
        } catch(SQLException ex) { 
            JOptionPane.showMessageDialog(null, "Código error: 1181\n" + ex.getMessage(),
                            "Error al acceder a los datos en la BD de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOperadores generarCatalogoOperadores()", 1181, UserHome.getUsuario(), ex);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1182\n" + ex.getMessage(),
                            "Error al generar el reporte de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOperadores generarCatalogoOperadores()", 1182, UserHome.getUsuario(), ex);
            //Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1183\n" + ex.getMessage(),
                            "Error error al ver el reporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlOperadores generarCatalogoOperadores()", 1183, UserHome.getUsuario(), ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlOperadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlOperadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlOperadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlOperadores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlOperadores().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBDarBaja;
    private javax.swing.JMenuBar jBMMenu;
    private javax.swing.JButton jBModificar;
    private javax.swing.JLabel jLApellidos;
    private javax.swing.JLabel jLFechaAlta;
    private javax.swing.JLabel jLNombre;
    private javax.swing.JLabel jLNumeroOperador;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIAgregar;
    private javax.swing.JMenuItem jMICatalogoOperadores;
    private javax.swing.JMenuItem jMICatalogoOperadoresCBajas;
    private javax.swing.JMenuItem jMIDarBaja;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMIModificar;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JMenu jMReportes;
    private javax.swing.JPanel jPCatalogoOperadores;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTCatalogoOperadores;
    private javax.swing.JTextField jTFApellidos;
    private javax.swing.JTextField jTFFechaAlta;
    private javax.swing.JTextField jTFNombre;
    private javax.swing.JTextField jTFNumeroOperador;
    // End of variables declaration//GEN-END:variables
}
