/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.UsuarioDTO;
import data.UsuarioDAO;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;

/**
 *
 * @author David Israel
 */
public class ControlUsuarios extends javax.swing.JFrame {

    /**
     * Creates new form ControlUsuarios
     */
    public ControlUsuarios() {
        try{
            initComponents();
            this.setLocationRelativeTo(null);
            this.obtenerUsuarios();
            this.estadoBotonesInicio();
            this.jTUsuarios.setSelectionMode(0);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1032\n" + ex.getMessage(),
                    "Error al iniciar ventana Control de Usuarios!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlUsuarios()", 1032, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    /**
     * Change the default icon image in the JFrame.
     * 
     * @return an icon for the JFrame.
     */
    @Override
    public Image getIconImage() {
        try{
            Image retValue = Toolkit.getDefaultToolkit().
                    getImage(ClassLoader.getSystemResource("icons/User-32.png"));
            return retValue;
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1209\n" + ex.getMessage(),
                            "Error al acceder a los datos en la BD de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlUsuarios getIconImage()", 1209, UserHome.getUsuario(), ex);
        }
        return null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLNumeroUsuario = new javax.swing.JLabel();
        jTFNumeroUsuario = new javax.swing.JTextField();
        jLFechaIngreso = new javax.swing.JLabel();
        jTFFechaIngreso = new javax.swing.JTextField();
        jLNombre = new javax.swing.JLabel();
        jTFNombreUsuario = new javax.swing.JTextField();
        jLApellidos = new javax.swing.JLabel();
        jTFApellidos = new javax.swing.JTextField();
        jLPrivilegios = new javax.swing.JLabel();
        jLPassword = new javax.swing.JLabel();
        jBAgregar = new javax.swing.JButton();
        jBEliminar = new javax.swing.JButton();
        jBModificar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTUsuarios = new javax.swing.JTable();
        jLConfirmarPassword = new javax.swing.JLabel();
        jPFConfirmarPassword = new javax.swing.JPasswordField();
        jPFPassword = new javax.swing.JPasswordField();
        jCBPrivilegios = new javax.swing.JComboBox();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        JMIAgregar = new javax.swing.JMenuItem();
        jMIModificar = new javax.swing.JMenuItem();
        jMIEliminar = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMILimpiar = new javax.swing.JMenuItem();
        jMIVerAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Usuarios - Grupo REMEX");
        setIconImage(getIconImage());
        setResizable(false);

        jLNumeroUsuario.setText("Número Usuario:");

        jTFNumeroUsuario.setEditable(false);
        jTFNumeroUsuario.setFocusable(false);

        jLFechaIngreso.setText("Fecha de Ingreso:");

        jTFFechaIngreso.setEditable(false);
        jTFFechaIngreso.setFocusable(false);

        jLNombre.setText("Nombre:");

        jLApellidos.setText("Apellidos:");

        jLPrivilegios.setText("Privilegios:");

        jLPassword.setText("Password:");

        jBAgregar.setText("Agregar");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });

        jBEliminar.setText("Eliminar");
        jBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarActionPerformed(evt);
            }
        });

        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jTUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Número Usuario", "Nombre", "Apellidos", "Privilegios"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTUsuarios.getTableHeader().setReorderingAllowed(false);
        jTUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTUsuariosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTUsuarios);
        if (jTUsuarios.getColumnModel().getColumnCount() > 0) {
            jTUsuarios.getColumnModel().getColumn(0).setMinWidth(110);
            jTUsuarios.getColumnModel().getColumn(0).setPreferredWidth(110);
            jTUsuarios.getColumnModel().getColumn(0).setMaxWidth(110);
        }

        jLConfirmarPassword.setText("Confirmar Password:");

        jCBPrivilegios.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Administrador", "Capturista" }));

        jMArchivo.setText("Archivo");

        JMIAgregar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        JMIAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        JMIAgregar.setText("Agregar");
        JMIAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JMIAgregarActionPerformed(evt);
            }
        });
        jMArchivo.add(JMIAgregar);

        jMIModificar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMIModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Modify-16.png"))); // NOI18N
        jMIModificar.setText("Modificar");
        jMIModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIModificarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIModificar);

        jMIEliminar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMIEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Trash-16.png"))); // NOI18N
        jMIEliminar.setText("Eliminar");
        jMIEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIEliminarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIEliminar);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMenu2.setText("Editar");

        jMILimpiar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiar.setText("Limpiar");
        jMILimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarActionPerformed(evt);
            }
        });
        jMenu2.add(jMILimpiar);

        jMBMenu.add(jMenu2);

        jMIVerAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMIVerManual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIVerManualActionPerformed(evt);
            }
        });
        jMIVerAyuda.add(jMIVerManual);

        jMBMenu.add(jMIVerAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLNombre)
                            .addComponent(jLNumeroUsuario)
                            .addComponent(jLPassword)
                            .addComponent(jLConfirmarPassword))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTFNumeroUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(jTFNombreUsuario)
                            .addComponent(jPFConfirmarPassword)
                            .addComponent(jPFPassword))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLFechaIngreso)
                                    .addComponent(jLApellidos)
                                    .addComponent(jLPrivilegios))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTFApellidos, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                    .addComponent(jTFFechaIngreso)
                                    .addComponent(jCBPrivilegios, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jBAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBEliminar)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 741, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAgregar, jBEliminar, jBModificar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNumeroUsuario)
                    .addComponent(jTFNumeroUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLFechaIngreso)
                    .addComponent(jTFFechaIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNombre)
                    .addComponent(jTFNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLApellidos)
                    .addComponent(jTFApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLPrivilegios)
                    .addComponent(jLPassword)
                    .addComponent(jPFPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBPrivilegios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLConfirmarPassword)
                    .addComponent(jPFConfirmarPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBModificar)
                    .addComponent(jBAgregar)
                    .addComponent(jBEliminar))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jBEliminarActionPerformed

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jMILimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarActionPerformed

    private void JMIAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JMIAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_JMIAgregarActionPerformed

    private void jMIModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jMIModificarActionPerformed

    private void jMIEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jMIEliminarActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMIVerManualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIVerManualActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMIVerManualActionPerformed

    private void jTUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTUsuariosMouseClicked
        this.obtenerUsuario();
    }//GEN-LAST:event_jTUsuariosMouseClicked

    private void agregar(){
        UsuarioDTO usuario = new UsuarioDTO();
        try {
            if("".equals(this.jTFNombreUsuario.getText()) || this.jTFNombreUsuario == null){
                JOptionPane.showMessageDialog(this, "Aún no se le agrega un nombre\nal usuario.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if("".equals(this.jTFApellidos.getText()) || this.jTFApellidos == null){
                JOptionPane.showMessageDialog(this, "Aún no se le agrega un apellido\nal usuario.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            UsuarioDAO acceso = new UsuarioDAO();

            if(new String(this.jPFPassword.getPassword()).equals(new String(this.jPFConfirmarPassword.getPassword()))){
                usuario.setApellidos(this.jTFApellidos.getText());
                usuario.setNombre(this.jTFNombreUsuario.getText());
                usuario.setPasswd(new String(this.jPFPassword.getPassword()));
                usuario.setPrivilegio(this.jCBPrivilegios.getSelectedIndex() + 1);
                usuario.setStatus(true);
                acceso.altaUsuario(usuario);
                this.limpiar();
            }  else {
                JOptionPane.showMessageDialog(null, "Código error: 1033\nLos password ingresados\nno coinciden.",
                        "Error!!!", JOptionPane.WARNING_MESSAGE);
                ErrorLogger.scribirLog("ControlUsuarios limpiar()", 1033, UserHome.getUsuario(), new Exception("#NA"));
            }
        } catch(SQLException ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 1034\n" + ex.getMessage()
                        + "\nError al intentar guardar los datos en la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(usuario.toString(), 1034, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                UsuarioDAO accesoUsuario = new UsuarioDAO();
                reparacionExitosa = accesoUsuario.repararErrorAgregarUsuario();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 1035\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(usuario.toString(), 1035, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(ControlUsuarios.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (Exception ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 1036\n" + ex.getMessage()
                        + "\nError al intentar guardar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE);
                ErrorLogger.scribirLog(usuario.toString(), 1036, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                UsuarioDAO accesoUsuario = new UsuarioDAO();
                reparacionExitosa = accesoUsuario.repararErrorAgregarUsuario();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 1037\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(usuario.toString(), 1037, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(ControlUsuarios.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }
    
    private void modificar(){
        UsuarioDTO usuario = new UsuarioDTO();
        try {
            UsuarioDAO acceso = new UsuarioDAO();

            if(new String(this.jPFPassword.getPassword()).equals(new String(this.jPFConfirmarPassword.getPassword()))){
                usuario.setNumeroUsuario(Integer.parseInt(this.jTFNumeroUsuario.getText()));
                usuario = acceso.obtenerUsuario(usuario.getNumeroUsuario(), true, true);
                usuario.setApellidos(this.jTFApellidos.getText());
                usuario.setNombre(this.jTFNombreUsuario.getText());
                usuario.setPasswd(new String(this.jPFPassword.getPassword()));
                usuario.setPrivilegio(this.jCBPrivilegios.getSelectedIndex() + 1);
                usuario.setStatus(true);
                acceso.modificarUsuario(usuario);
                this.limpiar();
            } else {
                JOptionPane.showMessageDialog(null, "Código error: 1038\nLos password ingresados\nno coinciden.",
                        "Error!!!", JOptionPane.WARNING_MESSAGE); 
                ErrorLogger.scribirLog(usuario.toString(), 1038, UserHome.getUsuario(), new Exception("#NA"));
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1039\n" + ex.getMessage()
                    + "\nError al intentar modificar los datos en la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(usuario.toString(), 1039, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1040\n" + ex.getMessage()
                    + "\nError al intentar modificar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(usuario.toString(), 1040, UserHome.getUsuario(), ex);
        }
    }
    
    private void eliminar(){
        UsuarioDTO usuario = new UsuarioDTO();
        try {
            UsuarioDAO acceso = new UsuarioDAO();
        
            usuario.setNumeroUsuario(Integer.parseInt(this.jTFNumeroUsuario.getText()));
            usuario = acceso.obtenerUsuario(usuario.getNumeroUsuario(), true, true);
            usuario.setApellidos(this.jTFApellidos.getText());
            usuario.setNombre(this.jTFNombreUsuario.getText());
            usuario.setPasswd(new String(this.jPFPassword.getPassword()));
            usuario.setPrivilegio(this.jCBPrivilegios.getSelectedIndex() + 1);
            usuario.setStatus(true);
            acceso.eliminarUsuario(usuario);
            this.limpiar();
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1041\n" + ex.getMessage()
                    + "\nError al intentar eliminar los datos en la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(usuario.toString(), 1041, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1042\n" + ex.getMessage()
                    + "\nError al intentar eliminar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(usuario.toString(), 1042, UserHome.getUsuario(), ex);
        }
    }
    
    private void limpiar(){
        try{
            this.jTFApellidos.setText(null);
            this.jTFFechaIngreso.setText(null);
            this.jTFNombreUsuario.setText(null);
            this.jTFNumeroUsuario.setText(null);
            this.jPFConfirmarPassword.setText(null);
            this.jPFPassword.setText(null);
            DefaultTableModel modelo = (DefaultTableModel) this.jTUsuarios.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            this.obtenerUsuarios();
            this.estadoBotonesInicio();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1043\n" + ex.getMessage() + 
                    "\nError al limpiar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlUsuarios limpiar()", 1043, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerUsuario(){
        UsuarioDTO usuario = new UsuarioDTO();
        try {
            int index = this.jTUsuarios.getSelectedRow();
            String numero = ((this.jTUsuarios.getValueAt(index, 0) != null) ? this.jTUsuarios.getValueAt(index, 0).toString() : "");

            if(index > -1){
                if(numero != null) {
                    usuario = new UsuarioDAO().obtenerUsuario(Integer.parseInt(numero), true, true);
                    this.jTFApellidos.setText(usuario.getApellidos());
                    this.jTFFechaIngreso.setText(usuario.getFechaIngreso().toString());
                    this.jTFNombreUsuario.setText(usuario.getNombre());
                    this.jTFNumeroUsuario.setText(Integer.toString(usuario.getNumeroUsuario()));
                    if(usuario.getPrivilegio() == 1){
                        this.jCBPrivilegios.setSelectedIndex(0);
                    } else {
                        this.jCBPrivilegios.setSelectedIndex(1);
                    }
                    this.estadoBotonesClicUsuarios();
                }
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1044\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlUsuarios obtenerUsuario()", 1044, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1045\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlUsuarios obtenerUsuario()", 1045, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerUsuarios(){
        String mensajeError = "";
        try {
            DefaultTableModel modelo = (DefaultTableModel) this.jTUsuarios.getModel();
            List<UsuarioDTO> usuarios = null;
            usuarios = new UsuarioDAO().obtenerUsuarios();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            for(UsuarioDTO usuario : usuarios){
                Object datos[] = {usuario.getNumeroUsuario(), usuario.getNombre(), 
                    usuario.getApellidos(), ((usuario.getPrivilegio() == 1) ? "Administrador" : "Capturista")};
                mensajeError = usuario.toString();
                modelo.addRow(datos);
            }
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1046\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos de la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 1046, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1047\n" + ex.getMessage()
                    + "\nError al intentar obtener los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 1047, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesInicio(){
        try{
            this.jBAgregar.setEnabled(true);
            this.jBEliminar.setEnabled(false);
            this.jBModificar.setEnabled(false);

            this.JMIAgregar.setEnabled(true);
            this.jMIEliminar.setEnabled(false);
            this.jMIModificar.setEnabled(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1048\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlUsuarios estadoBotonesInicio()", 1048, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesClicUsuarios(){
        try{
            this.jBAgregar.setEnabled(false);
            this.jBEliminar.setEnabled(true);
            this.jBModificar.setEnabled(true);

            this.JMIAgregar.setEnabled(false);
            this.jMIEliminar.setEnabled(true);
            this.jMIModificar.setEnabled(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1049\n" + ex.getMessage(),
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlUsuarios estadoBotonesClicUsuarios()", 1049, UserHome.getUsuario(), ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlUsuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlUsuarios().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem JMIAgregar;
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBModificar;
    private javax.swing.JComboBox jCBPrivilegios;
    private javax.swing.JLabel jLApellidos;
    private javax.swing.JLabel jLConfirmarPassword;
    private javax.swing.JLabel jLFechaIngreso;
    private javax.swing.JLabel jLNombre;
    private javax.swing.JLabel jLNumeroUsuario;
    private javax.swing.JLabel jLPassword;
    private javax.swing.JLabel jLPrivilegios;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenuItem jMIEliminar;
    private javax.swing.JMenuItem jMILimpiar;
    private javax.swing.JMenuItem jMIModificar;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenu jMIVerAyuda;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPasswordField jPFConfirmarPassword;
    private javax.swing.JPasswordField jPFPassword;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTFApellidos;
    private javax.swing.JTextField jTFFechaIngreso;
    private javax.swing.JTextField jTFNombreUsuario;
    private javax.swing.JTextField jTFNumeroUsuario;
    private javax.swing.JTable jTUsuarios;
    // End of variables declaration//GEN-END:variables
}
