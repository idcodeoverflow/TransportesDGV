/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package almacendgv;

import beans.ProveedorContadoDTO;
import beans.ProveedorCreditoDTO;
import beans.ProveedorDTO;
import data.LazyQueryDAO;
import data.ProveedorContadoDAO;
import data.ProveedorCreditoDAO;
import data.ProveedorDAO;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.InputStream;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logger.ErrorLogger;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRParameter;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;
import support.DBConnection;

/**
 *
 * @author David Israel
 */
public class ControlProveedores extends javax.swing.JFrame {

    private ProveedorDTO prov;
    
    public ProveedorDTO getProv() {
        return prov;
    }

    public void setProv(ProveedorDTO prov) {
        this.prov = prov;
    }
    
    /**
     * Creates new form ControlProveedores
     */
    public ControlProveedores() {
        try{
            initComponents();
            this.prov = new ProveedorDTO();
            this.setLocationRelativeTo(null);
            this.estadoBotonesInicio();
            this.jTFPlazoCredito.setEnabled(false);
            this.obtenerProveedores();
            this.jTCatalogoProveedores.setSelectionMode(0);//restringir la seleccion multiple
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 967\n" + ex.getMessage(),
                    "Error al iniciar ventana de\nControl de Proveedores!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlProveedores()", 967, UserHome.getUsuario(), ex);
            this.dispose();
        }
    }

    /**
     * Change the default icon image in the JFrame.
     * 
     * @return an icon for the JFrame.
     */
    @Override
    public Image getIconImage() {
        try{
            Image retValue = Toolkit.getDefaultToolkit().
                    getImage(ClassLoader.getSystemResource("icons/Provider-16.png"));
            return retValue;
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, "Código error: 968\n" + ex.getMessage(),
                    "Error al obtener el ícono de la ventana!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("Constructor ControlProveedores()", 968, UserHome.getUsuario(), ex);
        }
        return null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLIdProveedor = new javax.swing.JLabel();
        jTFIdProveedor = new javax.swing.JTextField();
        jLFechaAlta = new javax.swing.JLabel();
        jTFAltaProveedor = new javax.swing.JTextField();
        jLNombreProveedor = new javax.swing.JLabel();
        jTFNombreProveedor = new javax.swing.JTextField();
        jLDireccion = new javax.swing.JLabel();
        jLTelefono = new javax.swing.JLabel();
        jTFTelefonoProveedor = new javax.swing.JTextField();
        jBModificar = new javax.swing.JButton();
        jBAgregar = new javax.swing.JButton();
        jBEliminar = new javax.swing.JButton();
        jPCatalogoProveedores = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTCatalogoProveedores = new javax.swing.JTable();
        jLMail = new javax.swing.JLabel();
        jTFMail = new javax.swing.JTextField();
        jLRFC = new javax.swing.JLabel();
        jTFRFC = new javax.swing.JTextField();
        jLColonia = new javax.swing.JLabel();
        jTFColonia = new javax.swing.JTextField();
        jTFDireccion = new javax.swing.JTextField();
        jCBoxManejaCredito = new javax.swing.JCheckBox();
        jLPlazoCredito = new javax.swing.JLabel();
        jTFPlazoCredito = new javax.swing.JTextField();
        jMBMenu = new javax.swing.JMenuBar();
        jMArchivo = new javax.swing.JMenu();
        jMIAgregar = new javax.swing.JMenuItem();
        jMIModificar = new javax.swing.JMenuItem();
        jMIEliminar = new javax.swing.JMenuItem();
        jMIAgregarContacto = new javax.swing.JMenuItem();
        jMISalir = new javax.swing.JMenuItem();
        jMEditar = new javax.swing.JMenu();
        jMILimpiarProveedor = new javax.swing.JMenuItem();
        jMReportes = new javax.swing.JMenu();
        jMIReporteProveedoresActivos = new javax.swing.JMenuItem();
        jMAyuda = new javax.swing.JMenu();
        jMIVerManual = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Proveedores");
        setIconImage(getIconImage());

        jLIdProveedor.setText("Id de Proveedor:");

        jTFIdProveedor.setEditable(false);
        jTFIdProveedor.setFocusable(false);

        jLFechaAlta.setText("Fecha de Alta:");

        jTFAltaProveedor.setEditable(false);
        jTFAltaProveedor.setFocusable(false);

        jLNombreProveedor.setText("Nombre del Proveedor:");

        jLDireccion.setText("Dirección:");

        jLTelefono.setText("Teléfono:");

        jBModificar.setText("Modificar");
        jBModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarActionPerformed(evt);
            }
        });

        jBAgregar.setText("Agregar");
        jBAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAgregarActionPerformed(evt);
            }
        });

        jBEliminar.setText("Eliminar");
        jBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarActionPerformed(evt);
            }
        });

        jPCatalogoProveedores.setBorder(javax.swing.BorderFactory.createTitledBorder("Catálogo de Proveedores"));

        jTCatalogoProveedores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id de Proveedor", "Nombre", "Teléfono", "E-mail", "Dirección", "Fecha Alta"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTCatalogoProveedores.getTableHeader().setReorderingAllowed(false);
        jTCatalogoProveedores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTCatalogoProveedoresMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTCatalogoProveedores);
        if (jTCatalogoProveedores.getColumnModel().getColumnCount() > 0) {
            jTCatalogoProveedores.getColumnModel().getColumn(0).setMinWidth(100);
            jTCatalogoProveedores.getColumnModel().getColumn(0).setPreferredWidth(100);
            jTCatalogoProveedores.getColumnModel().getColumn(0).setMaxWidth(100);
            jTCatalogoProveedores.getColumnModel().getColumn(2).setMinWidth(120);
            jTCatalogoProveedores.getColumnModel().getColumn(2).setPreferredWidth(120);
            jTCatalogoProveedores.getColumnModel().getColumn(2).setMaxWidth(120);
            jTCatalogoProveedores.getColumnModel().getColumn(3).setMinWidth(130);
            jTCatalogoProveedores.getColumnModel().getColumn(3).setPreferredWidth(130);
            jTCatalogoProveedores.getColumnModel().getColumn(3).setMaxWidth(130);
            jTCatalogoProveedores.getColumnModel().getColumn(5).setMinWidth(150);
            jTCatalogoProveedores.getColumnModel().getColumn(5).setPreferredWidth(150);
            jTCatalogoProveedores.getColumnModel().getColumn(5).setMaxWidth(150);
        }

        javax.swing.GroupLayout jPCatalogoProveedoresLayout = new javax.swing.GroupLayout(jPCatalogoProveedores);
        jPCatalogoProveedores.setLayout(jPCatalogoProveedoresLayout);
        jPCatalogoProveedoresLayout.setHorizontalGroup(
            jPCatalogoProveedoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCatalogoProveedoresLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 831, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPCatalogoProveedoresLayout.setVerticalGroup(
            jPCatalogoProveedoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCatalogoProveedoresLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLMail.setText("E-mail:");

        jLRFC.setText("RFC:");

        jLColonia.setText("Colonia:");

        jCBoxManejaCredito.setText("Maneja Crédito");
        jCBoxManejaCredito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBoxManejaCreditoActionPerformed(evt);
            }
        });

        jLPlazoCredito.setText("Plazo Crédito:");

        jMArchivo.setText("Archivo");

        jMIAgregar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Apply-16.png"))); // NOI18N
        jMIAgregar.setText("Agregar");
        jMIAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregar);

        jMIModificar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jMIModificar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Modify-16.png"))); // NOI18N
        jMIModificar.setText("Modificar");
        jMIModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIModificarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIModificar);

        jMIEliminar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMIEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Trash-16.png"))); // NOI18N
        jMIEliminar.setText("Eliminar");
        jMIEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIEliminarActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIEliminar);

        jMIAgregarContacto.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMIAgregarContacto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Telephone-16.png"))); // NOI18N
        jMIAgregarContacto.setText("Agregar Contacto");
        jMIAgregarContacto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIAgregarContactoActionPerformed(evt);
            }
        });
        jMArchivo.add(jMIAgregarContacto);

        jMISalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMISalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Exit-16.png"))); // NOI18N
        jMISalir.setText("Salir");
        jMISalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMISalirActionPerformed(evt);
            }
        });
        jMArchivo.add(jMISalir);

        jMBMenu.add(jMArchivo);

        jMEditar.setText("Editar");

        jMILimpiarProveedor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jMILimpiarProveedor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Clear-16.png"))); // NOI18N
        jMILimpiarProveedor.setText("Limpiar");
        jMILimpiarProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMILimpiarProveedorActionPerformed(evt);
            }
        });
        jMEditar.add(jMILimpiarProveedor);

        jMBMenu.add(jMEditar);

        jMReportes.setText("Reportes");

        jMIReporteProveedoresActivos.setText("Reporte Proveedores");
        jMIReporteProveedoresActivos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMIReporteProveedoresActivosActionPerformed(evt);
            }
        });
        jMReportes.add(jMIReporteProveedoresActivos);

        jMBMenu.add(jMReportes);

        jMAyuda.setText("Ayuda");

        jMIVerManual.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMIVerManual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Help-16.png"))); // NOI18N
        jMIVerManual.setText("Ver Manual");
        jMAyuda.add(jMIVerManual);

        jMBMenu.add(jMAyuda);

        setJMenuBar(jMBMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPCatalogoProveedores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLNombreProveedor)
                            .addComponent(jLIdProveedor)
                            .addComponent(jLRFC)
                            .addComponent(jLDireccion)
                            .addComponent(jLTelefono))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTFIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLFechaAlta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTFAltaProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTFNombreProveedor)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTFRFC, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(54, 54, 54)
                                .addComponent(jLColonia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTFColonia))
                            .addComponent(jTFDireccion)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCBoxManejaCredito)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLPlazoCredito))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jTFTelefonoProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(58, 58, 58)
                                        .addComponent(jLMail)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTFMail)
                                    .addComponent(jTFPlazoCredito)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jBAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jBEliminar)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jTFIdProveedor, jTFTelefonoProveedor});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jBAgregar, jBEliminar, jBModificar});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLIdProveedor)
                    .addComponent(jTFIdProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLFechaAlta)
                    .addComponent(jTFAltaProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLNombreProveedor)
                    .addComponent(jTFNombreProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFRFC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLRFC)
                    .addComponent(jLColonia)
                    .addComponent(jTFColonia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLDireccion)
                    .addComponent(jTFDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLTelefono)
                    .addComponent(jTFTelefonoProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLMail)
                    .addComponent(jTFMail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBoxManejaCredito)
                    .addComponent(jLPlazoCredito)
                    .addComponent(jTFPlazoCredito, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBModificar)
                    .addComponent(jBAgregar)
                    .addComponent(jBEliminar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPCatalogoProveedores, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMIAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jMIAgregarActionPerformed

    private void jMIModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jMIModificarActionPerformed

    private void jMIEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jMIEliminarActionPerformed

    private void jMISalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMISalirActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMISalirActionPerformed

    private void jMILimpiarProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMILimpiarProveedorActionPerformed
        this.limpiar();
    }//GEN-LAST:event_jMILimpiarProveedorActionPerformed

    private void jBModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarActionPerformed
        this.modificar();
    }//GEN-LAST:event_jBModificarActionPerformed

    private void jBAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAgregarActionPerformed
        this.agregar();
    }//GEN-LAST:event_jBAgregarActionPerformed

    private void jBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarActionPerformed
        this.eliminar();
    }//GEN-LAST:event_jBEliminarActionPerformed

    private void jTCatalogoProveedoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTCatalogoProveedoresMouseClicked
        this.obtenerProveedor();
    }//GEN-LAST:event_jTCatalogoProveedoresMouseClicked

    private void jCBoxManejaCreditoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBoxManejaCreditoActionPerformed
        this.jTFPlazoCredito.setText(null);
        if(this.jCBoxManejaCredito.isSelected()){
            this.jTFPlazoCredito.setEnabled(true);
        } else {
            this.jTFPlazoCredito.setEnabled(false);
        }
    }//GEN-LAST:event_jCBoxManejaCreditoActionPerformed

    private void jMIAgregarContactoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIAgregarContactoActionPerformed
        try {
            ControlContactoProveedor contacto = new ControlContactoProveedor();
            contacto.setProveedor(new ProveedorDAO().
                    obtenerProveedor(Integer.parseInt(this.jTFIdProveedor.getText()), true, true));
            //contacto.obtenerDatos(prov.getIdProveedor());Se elimino esta linea ya que cargaba infomacion de contacto que era de otro proveedor
            contacto.obtenerContactos();
            contacto.mostrarNombreProveedor(prov);
            contacto.setLocationRelativeTo(null);
            contacto.setVisible(true);
        } catch(SQLException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 969\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos en la BD.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlProveedores jMIAgregarContactoActionPerformed()", 969, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 970\n" + ex.getMessage()
                    + "\nError al intentar guardar los datos.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlProveedores jMIAgregarContactoActionPerformed()", 970, UserHome.getUsuario(), ex);
        }
    }//GEN-LAST:event_jMIAgregarContactoActionPerformed

    private void jMIReporteProveedoresActivosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMIReporteProveedoresActivosActionPerformed
        this.cargarCatalogoProveedores();
    }//GEN-LAST:event_jMIReporteProveedoresActivosActionPerformed
    
    private void agregar(){
        String mensajeError = "";
        try {
            if("".equals(this.jTFNombreProveedor.getText()) || this.jTFNombreProveedor == null){
                JOptionPane.showMessageDialog(this, "Aún no se le agrega un nombre\nal proveedor.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                return;
            }
            ProveedorDTO proveedor = new ProveedorDTO();
            ProveedorDAO acceso = new ProveedorDAO();
            proveedor.setColonia(this.jTFColonia.getText());
            proveedor.setDireccion(this.jTFDireccion.getText());
            proveedor.setMail(this.jTFMail.getText());
            proveedor.setNombre(this.jTFNombreProveedor.getText());
            proveedor.setRfc(this.jTFRFC.getText());
            proveedor.setStatus(true);
            proveedor.setTel(this.jTFTelefonoProveedor.getText());
            proveedor.setIdProveedor(acceso.obtenerMaxIdProveedor() + 1);
            
            mensajeError = proveedor.toString();
            
            /*********** Se tiene la funcion para guardar proveedor en dos partes, en el IF para verificar el credito
             *********** y en el ELSE para los que no tienen credito, se hizo esto para tener el control de los ingresos
             *********** a la base de datos, por cuestion de las validaciones.
             ***********/
            
            if(this.jCBoxManejaCredito.isSelected()){
                ProveedorCreditoDTO credito = new ProveedorCreditoDTO();
                ProveedorCreditoDAO acc = new ProveedorCreditoDAO();
                credito.setIdProveedor(proveedor.getIdProveedor());
                credito.setTiempoLimitePago(Short.parseShort(this.jTFPlazoCredito.getText()));
                if(credito.getTiempoLimitePago() < 1){
                    JOptionPane.showMessageDialog(null, "La cantidad de días especificados\n"
                            + "de crédito para el proveedor\nno es válida.", "Error!!!", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                credito.setStatusCredito(true);
                
                mensajeError += credito.toString();
                
                acceso.agregarProveedor(proveedor);
                acc.agregarProveedorCredito(credito);
                
            } else {
                ProveedorContadoDTO contado = new ProveedorContadoDTO();
                ProveedorContadoDAO acc = new ProveedorContadoDAO();
                contado.setIdProveedor(proveedor.getIdProveedor());
                contado.setStatusContado(true);
                
                mensajeError += contado.toString();
                
                acceso.agregarProveedor(proveedor);
                acc.agregarProveedorContado(contado);
                
            }
            
        } catch(SQLException ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 971\n" + ex.getMessage()
                        + "\nError al intentar guardar los datos en la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(mensajeError, 971, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                ProveedorDAO accesoProveedor = new ProveedorDAO();
                reparacionExitosa = accesoProveedor.repararErrorAgregarProveedor();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 972\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(mensajeError, 972, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(ControlProveedores.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (Exception ex) {
            try {
                JOptionPane.showMessageDialog(null, "Código error: 973\n" + ex.getMessage()
                        + "\nError al intentar guardar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(mensajeError, 973, UserHome.getUsuario(), ex);
                boolean reparacionExitosa = false;
                ProveedorDAO accesoProveedor = new ProveedorDAO();
                reparacionExitosa = accesoProveedor.repararErrorAgregarProveedor();
                if(!reparacionExitosa){
                    JOptionPane.showMessageDialog(null, "Código error: 974\n" + "No se pudo reparar la tabla",
                    "Error en acceso a datos!!!\nError al reparar la tabla.", JOptionPane.ERROR_MESSAGE);
                    ErrorLogger.scribirLog(mensajeError, 974, UserHome.getUsuario(), ex);
                } else {
                    JOptionPane.showMessageDialog(null, "Reparación exitosa!!!",
                    "La tabla se reparó correctamente.", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (SQLException ex1) {
                //Logger.getLogger(ControlProveedores.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
        
        this.limpiar();
    }
    
    private void modificar(){
        String mensajeError = "";
        try{
            ProveedorDTO proveedor = new ProveedorDTO();
            ProveedorDAO acceso = new ProveedorDAO();
            proveedor.setIdProveedor(Integer.parseInt(this.jTFIdProveedor.getText()));
            try {
                proveedor = acceso.obtenerProveedor(proveedor.getIdProveedor(), true, true);
            } catch(SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 975\n" + ex.getMessage()
                        + "\nError al intentar guardar los datos en la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(mensajeError, 975, UserHome.getUsuario(), ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Código error: 976\n" + ex.getMessage()
                        + "\nError al intentar guardar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(mensajeError, 976, UserHome.getUsuario(), ex);
            }
            proveedor.setNombre(this.jTFNombreProveedor.getText());
            proveedor.setRfc(this.jTFRFC.getText());
            proveedor.setDireccion(this.jTFDireccion.getText());
            proveedor.setColonia(this.jTFColonia.getText());
            proveedor.setTel(this.jTFTelefonoProveedor.getText());
            proveedor.setMail(this.jTFMail.getText());
            proveedor.setStatus(true);

            mensajeError = proveedor.toString();
            
            if(this.jCBoxManejaCredito.isSelected()){
                ProveedorCreditoDTO credito = new ProveedorCreditoDTO();
                ProveedorCreditoDAO acc = new ProveedorCreditoDAO();
                credito.setIdProveedor(proveedor.getIdProveedor());
                credito.setTiempoLimitePago(Short.parseShort(this.jTFPlazoCredito.getText()));
                if(credito.getTiempoLimitePago() < 1){
                    JOptionPane.showMessageDialog(null, "La cantidad de días especificados\n"
                            + "de crédito para el proveedor\nno es válida.", "Error!!!", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                credito.setStatusCredito(true);
                mensajeError += credito.toString();
                try {
                    if(acc.obtenerProveedorCredito(proveedor.getIdProveedor()) == null){
                        ProveedorContadoDAO accesoContado = new ProveedorContadoDAO();
                        ProveedorContadoDTO pContado = new ProveedorContadoDTO();
                        pContado.setIdProveedor(proveedor.getIdProveedor());
                        accesoContado.eliminarProveedorContado(pContado);
                    }
                    
                    
                    acc.agregarProveedorCredito(credito);
                } catch(SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 977\n" + ex.getMessage()
                            + "\nError al intentar guardar los datos en la BD.",
                            "Error!!!", JOptionPane.ERROR_MESSAGE); 
                    ErrorLogger.scribirLog(mensajeError, 977, UserHome.getUsuario(), ex);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 978\n" + ex.getMessage()
                            + "\nError al intentar guardar los datos.",
                            "Error!!!", JOptionPane.ERROR_MESSAGE); 
                    ErrorLogger.scribirLog(mensajeError, 978, UserHome.getUsuario(), ex);
                }
            } else {
                ProveedorContadoDTO contado = new ProveedorContadoDTO();
                ProveedorContadoDAO acc = new ProveedorContadoDAO();
                contado.setIdProveedor(proveedor.getIdProveedor());
                contado.setStatusContado(true);
                
                mensajeError += contado.toString();
                
                try {
                    if(acc.obtenerProveedorContado(proveedor.getIdProveedor()) == null){
                        ProveedorCreditoDAO accesoCredito = new ProveedorCreditoDAO();
                        ProveedorCreditoDTO pCredito = new ProveedorCreditoDTO();
                        pCredito.setIdProveedor(proveedor.getIdProveedor());
                        accesoCredito.eliminarProveedorCredito(pCredito);
                    }
                    acc.agregarProveedorContado(contado);
                } catch(SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 979\n" + ex.getMessage()
                            + "\nError al intentar guardar los datos en la BD.",
                            "Error!!!", JOptionPane.ERROR_MESSAGE); 
                    ErrorLogger.scribirLog(mensajeError, 979, UserHome.getUsuario(), ex);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Código error: 980\n" + ex.getMessage()
                            + "\nError al intentar guardar los datos.",
                            "Error!!!", JOptionPane.ERROR_MESSAGE); 
                    ErrorLogger.scribirLog(mensajeError, 980, UserHome.getUsuario(), ex);
                }
            }


            try {
                acceso.modificarProveedor(proveedor);
            } catch(SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 981\n" + ex.getMessage()
                        + "\nError al intentar guardar los datos en la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(mensajeError, 981, UserHome.getUsuario(), ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Código error: 982\n" + ex.getMessage()
                        + "\nError al intentar guardar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(mensajeError, 982, UserHome.getUsuario(), ex);
            }
            this.limpiar();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 983\n" + ex.getMessage()
                    + "\nError al modificar el Proveedor.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 983, UserHome.getUsuario(), ex);
        }
    }
    
    private void eliminar(){
        String mensajeError = "";
        try{
            ProveedorDTO proveedor = new ProveedorDTO();
            ProveedorDAO acceso = new ProveedorDAO();
            ProveedorCreditoDTO pCredito = new ProveedorCreditoDTO();
            ProveedorContadoDTO pContado = new ProveedorContadoDTO();
            ProveedorCreditoDAO accCredito = new ProveedorCreditoDAO();
            ProveedorContadoDAO accContado = new ProveedorContadoDAO();
            proveedor.setIdProveedor(Integer.parseInt(this.jTFIdProveedor.getText()));
            
            mensajeError = proveedor.toString();
            
            try {
                proveedor = acceso.obtenerProveedor(proveedor.getIdProveedor(), true, true);
                if(acceso.tieneFacturasPendientes(proveedor, true, true)){
                    JOptionPane.showMessageDialog(null, "El proveedor que intenta dar de baja\ntiene facturas pendientes de pago.",
                        "No se puede realizar la operación!!!", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            } catch(SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 984\n" + ex.getMessage()
                        + "\nError al intentar eliminar los datos de la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(mensajeError, 984, UserHome.getUsuario(), ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Código error: 985\n" + ex.getMessage()
                        + "\nError al intentar eliminar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(mensajeError, 985, UserHome.getUsuario(), ex);
            }
            /*proveedor.setNombre(this.jTFNombreProveedor.getText());
            proveedor.setRfc(this.jTFRFC.getText());
            proveedor.setDireccion(this.jTFDireccion.getText());
            proveedor.setColonia(this.jTFColonia.getText());
            proveedor.setTel(this.jTFTelefonoProveedor.getText());
            proveedor.setMail(this.jTFMail.getText());
            proveedor.setStatus(true);
            *///no es necesario este segmento de codigo ya se obtienen todos estos datos al obtenerlos de la BD
            pContado.setIdProveedorContado(proveedor.getIdProveedor());
            pCredito.setIdProveedorCredito(proveedor.getIdProveedor());

            mensajeError += pContado.toString() + pCredito.toString();
            
            try {
                acceso.eliminarProveedor(proveedor);
                accCredito.eliminarProveedorCredito(pCredito);
                accContado.eliminarProveedorContado(pContado);
            } catch(SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 986\n" + ex.getMessage()
                        + "\nError al intentar eliminar los datos de la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(mensajeError, 986, UserHome.getUsuario(), ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Código error: 987\n" + ex.getMessage()
                        + "\nError al intentar eliminar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog(mensajeError, 987, UserHome.getUsuario(), ex);
            }
            this.limpiar();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 988\n" + ex.getMessage()
                    + "\nError al intentar eliminar el Proveedor.",
                    "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(mensajeError, 988, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerProveedor(){
        ProveedorDTO proveedor = new ProveedorDTO();
        ProveedorCreditoDTO pCredito = new ProveedorCreditoDTO();
        try{
            int index = this.jTCatalogoProveedores.getSelectedRow();
            String numero = null;
            ProveedorCreditoDAO accCredito = new ProveedorCreditoDAO();

            if(index > -1){
                numero = ((this.jTCatalogoProveedores.getValueAt(index, 0) != null) ? this.jTCatalogoProveedores.getValueAt(index, 0).toString() : "");
                if(numero != null) {
                    try {
                        proveedor = new ProveedorDAO().obtenerProveedor(Integer.parseInt(numero), true, true);
                        prov = new ProveedorDAO().obtenerProveedor(Integer.parseInt(numero), true, true);
                        pCredito = accCredito.obtenerProveedorCredito(Integer.parseInt(numero));
                    } catch(SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Código error: 989\n" + ex.getMessage()
                                + "\nError al intentar obtener los datos de la BD.",
                                "Error!!!", JOptionPane.ERROR_MESSAGE); 
                        ErrorLogger.scribirLog(prov.toString() + pCredito.toString(), 989, UserHome.getUsuario(), ex);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Código error: 990\n" + ex.getMessage()
                                + "\nError al intentar obtener los datos.",
                                "Error!!!", JOptionPane.ERROR_MESSAGE); 
                        ErrorLogger.scribirLog(prov.toString() + pCredito.toString(), 990, UserHome.getUsuario(), ex);
                    }
                    if(pCredito == null){
                        this.jTFPlazoCredito.setText(null);
                        this.jCBoxManejaCredito.setSelected(false);
                        this.jTFPlazoCredito.setEnabled(false);
                    } else {
                        this.jTFPlazoCredito.setText(Short.toString(pCredito.getTiempoLimitePago()));
                        this.jCBoxManejaCredito.setSelected(true);
                        this.jTFPlazoCredito.setEnabled(true);
                    }
                    this.jTFIdProveedor.setText(Integer.toString(proveedor.getIdProveedor()));
                    this.jTFNombreProveedor.setText(proveedor.getNombre());
                    this.jTFRFC.setText(proveedor.getRfc());
                    this.jTFDireccion.setText(proveedor.getDireccion());
                    this.jTFColonia.setText(proveedor.getColonia());
                    this.jTFTelefonoProveedor.setText(proveedor.getTel());
                    this.jTFMail.setText(proveedor.getMail());
                    this.jTFAltaProveedor.setText(proveedor.getFechaAlta().toString());
                    this.jTFMail.setText(proveedor.getMail());
                    this.estadoBotonesClicProveedores();
                }
                this.prov.setColonia(proveedor.getColonia());
                this.prov.setDireccion(proveedor.getDireccion());
                this.prov.setFechaAlta(proveedor.getFechaAlta());
                this.prov.setFechaBaja(proveedor.getFechaBaja());
                this.prov.setIdProveedor(proveedor.getIdProveedor());
                this.prov.setMail(proveedor.getMail());
                this.prov.setNombre(proveedor.getNombre());
                this.prov.setRfc(proveedor.getRfc());
                this.prov.setStatus(proveedor.isStatus());
                this.prov.setTel(proveedor.getTel());
            }
        } catch(Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 991\n" + ex.getMessage()
                                + "\nError al intentar obtener el Proveedor.",
                                "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog(prov.toString(), 991, UserHome.getUsuario(), ex);
        }
    }
    
    private void obtenerProveedores(){
        try{
            DefaultTableModel modelo = (DefaultTableModel) this.jTCatalogoProveedores.getModel();
            List<ProveedorDTO> proveedores = null;
            try {
                proveedores = new ProveedorDAO().obtenerProveedores();
            } catch(SQLException ex) {
                JOptionPane.showMessageDialog(null, "Código error: 992\n" + ex.getMessage()
                        + "\nError al intentar obtener los Proveedores de la BD.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog("ControlProveedores obtenerProveedores()", 992, UserHome.getUsuario(), ex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Código error: 993\n" + ex.getMessage()
                        + "\nError al intentar obtener los Proveedores.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
                ErrorLogger.scribirLog("ControlProveedores obtenerProveedores()", 993, UserHome.getUsuario(), ex);
            }
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }
            for(ProveedorDTO proveedor : proveedores){
                Object datos[] = {proveedor.getIdProveedor(), proveedor.getNombre(), 
                    proveedor.getTel(), proveedor.getMail(), proveedor.getDireccion(), 
                    proveedor.getFechaAlta()};
                modelo.addRow(datos);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 994\n" + ex.getMessage()
                        + "\nError al intentar obtener los Proveedores.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlProveedores obtenerProveedores()", 994, UserHome.getUsuario(), ex);
        }
    }
    
    private void limpiar(){
        try{
            DefaultTableModel modelo = (DefaultTableModel) this.jTCatalogoProveedores.getModel();
            while(modelo.getRowCount() > 0){
                modelo.removeRow(modelo.getRowCount() - 1);
            }

            this.jTFAltaProveedor.setText(null);
            this.jTFColonia.setText(null);
            this.jTFDireccion.setText(null);
            this.jTFIdProveedor.setText(null);
            this.jTFMail.setText(null);
            this.jTFMail.setText(null);
            this.jTFNombreProveedor.setText(null);
            this.jTFPlazoCredito.setText(null);
            this.jTFRFC.setText(null);
            this.jTFTelefonoProveedor.setText(null);
            this.jCBoxManejaCredito.setSelected(false);
            
            this.jTFPlazoCredito.setEnabled(false);
            
            this.estadoBotonesInicio();
            this.obtenerProveedores();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 995\n" + ex.getMessage()
                        + "\nError al intentar limpiar los datos.",
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlProveedores limpiar()", 995, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesInicio(){
        try{
            this.jBAgregar.setEnabled(true);
            this.jBEliminar.setEnabled(false);
            this.jBModificar.setEnabled(false);

            this.jMIAgregar.setEnabled(true);
            this.jMIEliminar.setEnabled(false);
            this.jMIModificar.setEnabled(false);
            this.jMIAgregarContacto.setEnabled(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 996\n" + ex.getMessage(),
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlProveedores estadoBotonesInicio()", 996, UserHome.getUsuario(), ex);
        }
    }
    
    private void estadoBotonesClicProveedores(){
        try{
            this.jBAgregar.setEnabled(false);
            this.jBEliminar.setEnabled(true);
            this.jBModificar.setEnabled(true);

            this.jMIAgregar.setEnabled(false);
            this.jMIEliminar.setEnabled(true);
            this.jMIModificar.setEnabled(true);
            this.jMIAgregarContacto.setEnabled(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 997\n" + ex.getMessage(),
                        "Error!!!", JOptionPane.ERROR_MESSAGE); 
            ErrorLogger.scribirLog("ControlProveedores estadoBotonesClicProveedores()", 997, UserHome.getUsuario(), ex);
        }
    }
    
    private void cargarCatalogoProveedores(){
        try {
            String reportPath = "/reports/CatalogoProveedoresAlmacenTaller.jasper";
            String logoPath = "/icons/Logo Efectivo Negro.png";
            Locale locale = new Locale("en", "US");
            InputStream jasperStream = getClass().getResourceAsStream(reportPath);
            JasperReport jReport = (JasperReport)JRLoader.loadObject(jasperStream);
            JasperPrint jPrint = null;
            Map<String,Object> parameters = new HashMap<>();
            LazyQueryDAO lazyQ = new LazyQueryDAO();
            parameters.put(JRParameter.REPORT_LOCALE, locale);
            parameters.put("LOGO", this.getClass().getResourceAsStream(logoPath));
            lazyQ.startLazyQuery();
            jPrint = JasperFillManager.fillReport(jReport, parameters, DBConnection.getConn());
            JasperViewer.viewReport(jPrint, false);
            lazyQ.endLazyQuery();
        } catch(SQLException ex) { 
            JOptionPane.showMessageDialog(null, "Código error: 1175\n" + ex.getMessage(),
                            "Error al acceder a los datos en la BD de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlProveedores cargarCatalogoProveedores()", 1175, UserHome.getUsuario(), ex);
        } catch (JRException ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1176\n" + ex.getMessage(),
                            "Error al generar el reporte de la reparación!!!", JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(ControlOrdenesReparacion.class.getName()).log(Level.SEVERE, null, ex);
            ErrorLogger.scribirLog("ControlProveedores cargarCatalogoProveedores()", 1176, UserHome.getUsuario(), ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Código error: 1177\n" + ex.getMessage(),
                            "Error error al ver el reporte!!!", JOptionPane.ERROR_MESSAGE);
            ErrorLogger.scribirLog("ControlProveedores cargarCatalogoProveedores()", 1177, UserHome.getUsuario(), ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ControlProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ControlProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ControlProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ControlProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ControlProveedores().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAgregar;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBModificar;
    private javax.swing.JCheckBox jCBoxManejaCredito;
    private javax.swing.JLabel jLColonia;
    private javax.swing.JLabel jLDireccion;
    private javax.swing.JLabel jLFechaAlta;
    private javax.swing.JLabel jLIdProveedor;
    private javax.swing.JLabel jLMail;
    private javax.swing.JLabel jLNombreProveedor;
    private javax.swing.JLabel jLPlazoCredito;
    private javax.swing.JLabel jLRFC;
    private javax.swing.JLabel jLTelefono;
    private javax.swing.JMenu jMArchivo;
    private javax.swing.JMenu jMAyuda;
    private javax.swing.JMenuBar jMBMenu;
    private javax.swing.JMenu jMEditar;
    private javax.swing.JMenuItem jMIAgregar;
    private javax.swing.JMenuItem jMIAgregarContacto;
    private javax.swing.JMenuItem jMIEliminar;
    private javax.swing.JMenuItem jMILimpiarProveedor;
    private javax.swing.JMenuItem jMIModificar;
    private javax.swing.JMenuItem jMIReporteProveedoresActivos;
    private javax.swing.JMenuItem jMISalir;
    private javax.swing.JMenuItem jMIVerManual;
    private javax.swing.JMenu jMReportes;
    private javax.swing.JPanel jPCatalogoProveedores;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTCatalogoProveedores;
    private javax.swing.JTextField jTFAltaProveedor;
    private javax.swing.JTextField jTFColonia;
    private javax.swing.JTextField jTFDireccion;
    private javax.swing.JTextField jTFIdProveedor;
    private javax.swing.JTextField jTFMail;
    private javax.swing.JTextField jTFNombreProveedor;
    private javax.swing.JTextField jTFPlazoCredito;
    private javax.swing.JTextField jTFRFC;
    private javax.swing.JTextField jTFTelefonoProveedor;
    // End of variables declaration//GEN-END:variables

}
